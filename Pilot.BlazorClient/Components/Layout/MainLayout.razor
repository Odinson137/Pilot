@using Blazored.Toast.Configuration
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.Contracts.Data.Enums
@using Pilot.Contracts.Services

@using Pilot.Contracts.DTO.ModelDto
@inherits LayoutComponentBase
@inject IJsonLocalizationService Localizer
@inject NavigationManager NavigationManager
@inject IMessengerService MessengerService
@inject IUserService UserService;
@inject ProtectedSessionStorage ProtectedSessionStorage;
@inject IToastService ToastService

<BlazoredToasts Position="ToastPosition.BottomRight"
                IconType="IconType.Material"
                ErrorIcon="error_outline"
                ShowProgressBar="@true"
                ShowCloseButton="@true"
                MaxToastCount="3">
    <CloseButtonContent>
        <div>
            <span class="myCloseButtonStyleClass">&times;</span>
        </div>
    </CloseButtonContent>
</BlazoredToasts>

<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container">
        <a class="navbar-brand text-primary fw-bold" href="/">Pilot</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link text-primary" href="/">@Localizer.GetString("Home", LocalizeName)</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-primary" href="/Vacancy">@Localizer.GetString("Vacancy", LocalizeName)</a>
                </li>
                @if (_isAuthenticated)
                {
                    <li class="nav-item">
                        <a class="nav-link text-primary" href="/Work">@Localizer.GetString("Work", LocalizeName)</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-primary"
                           href="/Chat">@Localizer.GetString("Chat", LocalizeName)</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-primary"
                           href="/Account">@Localizer.GetString("Account", LocalizeName)</a>
                    </li>
                    <li class="nav-item" style="margin-top: 5px">
                        <div class="position-relative">
                            <button class="btn btn-light p-0 position-relative" @onclick="ToggleNotifications">
                                <img class="bi bi-bell-fill text-primary" src="Images/Chat/free-icon-bell-512234.png"
                                     width="25px" alt="bell"/>
                                @if (_notificationCount > 0)
                                {
                                    <span
                                        class="badge bg-danger text-white position-absolute top-0 start-100 translate-middle">
                                        @_notificationCount
                                    </span>
                                }
                            </button>
                            @if (_showNotifications)
                            {
                                <div class="notification-container">
                                    <h6 class="text-center mb-2">Уведомления</h6>
                                    @if (_notifications.Count > 0)
                                    {
                                        <div class="container">
                                            <div class="row">
                                                @foreach (var notification in _notifications)
                                                {
                                                    <div class="col-12 mb-2">
                                                        <div class="card shadow-sm border-0">
                                                            <div class="card-body py-2 px-2">
                                                                <p class="mb-1 text-muted small @GetPriorityClass(notification.MessagePriority)">@notification.Description</p>
                                                                @if (notification.EntityType == ModelType.Chat)
                                                                {
                                                                    <button class="btn btn-sm btn-outline-primary"
                                                                            @onclick="() => MoveToChat(notification.EntityId!.Value)">
                                                                        Go to Chat
                                                                    </button>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-center text-muted mb-0">Нет новых уведомлений</p>
                                    }
                                </div>
                            }
                        </div>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link text-primary"
                           href="/User/Login">@Localizer.GetString("Log in", LocalizeName)</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-primary"
                           href="/User/Registration">@Localizer.GetString("Sign up", LocalizeName)</a>
                    </li>
                }
            </ul>
        </div>
        <div class="ms-auto">
            <button class="btn btn-outline-primary" @onclick='ToggleCulture'>@_toggleName</button>
        </div>
    </div>
</nav>


<div class="container mx-auto mt-4">
    <CustomErrorBoundary>
        @Body
    </CustomErrorBoundary>
</div>

<footer class="bg-light text-primary mt-auto" style="background-color: #f8f9fa;">
    <div class="container p-4">
        <div class="row">
            <!-- About the Project -->
            <div class="col-md-4 mb-4">
                <h5 class="text-uppercase fw-bold">About the Project</h5>
                <p>
                    The Pilot project was created for project management and team collaboration. Our solution helps you
                    track progress and achieve your goals faster.
                </p>
            </div>

            <!-- Contacts -->
            <div class="col-md-4 mb-4">
                <h5 class="text-uppercase fw-bold">Contacts</h5>
                <p>Email: contact@pilot.com</p>
                <p>Phone: +123 456 789</p>
            </div>

            <!-- GitHub -->
            <div class="col-md-4 mb-4">
                <h5 class="text-uppercase fw-bold">GitHub</h5>
                <a href="https://github.com/Odinson137/Pilot" class="text-primary" target="_blank">
                    <i class="bi bi-github"></i> Visit our GitHub repository
                </a>
            </div>
        </div>
    </div>

    <!-- Footer Bottom -->
    <div class="text-center p-3 bg-primary text-white" style="background-color: #4B0082;">
        © @(DateTime.Now.Year) Pilot - All rights reserved
    </div>
</footer>

<style>
    /* Стиль для фиксации футера внизу страницы */
    html, body {
        height: 100%;
    }

    body {
        display: flex;
        flex-direction: column;
    }

    footer {
        margin-top: auto;
    }

    /* Apply to the entire page or specific container */
    ::-webkit-scrollbar {
        width: 8px; /* Adjusts the width of the scrollbar */
    }

    ::-webkit-scrollbar-track {
        background: #f1f1f1; /* Track background */
        border-radius: 10px; /* Roundness of the track */
    }

    ::-webkit-scrollbar-thumb {
        background-color: #2980b9; /* Blue color for the scrollbar thumb */
        border-radius: 10px; /* Roundness of the scrollbar thumb */
        border: 2px solid #f1f1f1; /* Adds space around the thumb */
    }

    keyframes notification-bounce {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-5px);
        }
    }

    .notification-animate {
        animation: notification-bounce 0.5s ease-in-out;
    }

    .notification-container {
        position: absolute;
        top: 40px;
        right: -140px;
        z-index: 1050;
        width: 300px;
        min-height: 100px;
        background-color: #fff;
        border: 1px solid #ddd;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 5px;
    }

    .navbar {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .bg-danger {
        background-color: #dc3545;
        color: white;
    }

    .bg-success {
        background-color: #28a745;
        color: white;
    }

    .bg-warning {
        background-color: #ffc107;
        color: black;
    }

    .bg-info {
        background-color: #17a2b8;
        color: white;
    }

    .bg-primary {
        background-color: #007bff;
        color: white;
    }

    .bg-secondary {
        background-color: #6c757d;
        color: white;
    }

    .bg-dark {
        background-color: #343a40;
        color: white;
    }

    .bg-light {
        background-color: #f8f9fa;
        color: black;
    }
</style>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isAuthenticated;
    private const string LocalizeName = "Header";
    private string _toggleName;
    private int? _notificationCount;
    private bool _showNotifications;
    private List<InfoMessageViewModel> _notifications = new();

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await UserService.IsUserAuthorizationAsync();

        _toggleName = Localizer.CurrentCulture == "ru-RU" ? "Русский" : "English";

        if (_isAuthenticated)
        {
            var user = await UserService.GetCurrentUserAsync();

            _notificationCount = 0;
            await MessengerService.CreateConnectionAsync();

            MessengerService.OnReceiveNotification += async message =>
            {
                _notificationCount++;
                var infoMessageDto = message.FromJson<InfoMessageViewModel>();
                _notifications.Add(infoMessageDto);
                await InvokeAsync(StateHasChanged);
                ToastService.ShowSuccess(infoMessageDto.Title);
            };

            MessengerService.OnMessageReceived += async (message) =>
            {
                var messageDto = message.FromJson<MessageDto>();
                _notificationCount++;
                if (user.Id == messageDto.UserId)
                    ToastService.ShowSuccess("Сообщение успешно доставлено");
                else
                {
                    var newInfoMessage = new InfoMessageViewModel
                    {
                        CreateAt = messageDto.CreateAt,
                        Description = "У вас новое сообщение в чате",
                        MessagePriority = MessageInfo.Create | MessageInfo.Notification,
                        EntityType = ModelType.Chat,
                        EntityId = messageDto.Chat.Id
                    };
                    _notifications.Add(newInfoMessage);
                    await InvokeAsync(StateHasChanged);
                    ToastService.ShowSuccess(newInfoMessage.Description);
                }
            };
        }
    }

    private async Task MoveToChat(int chatId)
    {
        await ProtectedSessionStorage.SetAsync(ClientConstants.CurrentChat, chatId);
        NavigationManager.NavigateTo("chat");
    }

    private void ToggleNotifications()
    {
        _showNotifications = !_showNotifications;
        _notificationCount = 0;
    }

    private void ToggleCulture()
    {
        ChangeCultureAndReload();
    }

    private void ChangeCultureAndReload()
    {
        Localizer.Toggle();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void CloseNotifications()
    {
        _showNotifications = false;
    }

    private string GetPriorityClass(MessageInfo priority)
    {
        return priority switch
        {
            MessageInfo.Error => "bg-danger text-white", // Красный
            MessageInfo.Job => "bg-info text-white", // Голубой
            MessageInfo.Invitation => "bg-primary text-white", // Синий
            MessageInfo.Success => "bg-success text-white", // Зеленый
            MessageInfo.Create => "bg-warning text-dark", // Желтый
            MessageInfo.Update => "bg-secondary text-white", // Серый
            MessageInfo.Delete => "bg-danger text-white", // Красный
            MessageInfo.Validate => "bg-dark text-white", // Темно-серый
            MessageInfo.Notification => "bg-light text-dark", // Светло-серый
            _ => "bg-light text-dark" // По умолчанию
        };
    }

}

<script>
    function scrollToBottom(chatListRef) {
        if (chatListRef) {
            chatListRef.scrollTop = chatListRef.scrollHeight;
        }
    }

</script>