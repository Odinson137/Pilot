@page "/update-chat/{Id:int}"
@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.HelperViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@inject NavigationManager NavigationManager
@inject IChatPageService ChatPageService

<PageTitle>Update New Chat</PageTitle>

<div style="display: grid">
    <div class="chat">
        <h3>Update New Chat</h3>

        <EditForm Model="_chat" OnValidSubmit="HandleSubmit">

            <div class="form-group">
                <label for="Title">Title</label>
                <InputText id="Title" @bind-Value="_chat.Title" class="form-control"/>
            </div>

            <div class="form-group">
                <label for="Description">Description</label>
                <InputTextArea id="Description" @bind-Value="_chat.Description" class="form-control"/>
            </div>

            <div class="employee-list">
                @foreach (var user in _multySelect)
                {
                    <div class="employee-item">
                        @if (user.Value.Id == _chat.CreatedBy)
                        {
                            <input type="checkbox" class="employee-checkbox" checked disabled/>
                        }
                        else
                        {
                            <input type="checkbox" @bind="@(user.IsSelected)" class="employee-checkbox"/>
                        }
                        <img src="@TempFileService.GetUrl(user.Value.AvatarImage)" alt="User Avatar" class="avatar"/>
                        <div class="employee-info">
                            <div class="employee-name">@user.Value.FullName</div>
                            <div class="employee-username">@user.Value.UserName</div>
                        </div>
                    </div>
                }
            </div>

            <div class="buttons">
                <button type="submit" class="btn btn-primary">Update Chat</button>
                <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
            </div>
        </EditForm>

    </div>
</div>


@code {
    [Parameter] public int Id { get; set; }

    private ChatViewModel _chat = new();

    private ICollection<MultySelectViewModel<UserViewModel>> _multySelect = [];


    protected override async Task OnInitializedAsync()
    {
        _chat = await ChatPageService.GetValueAsync(Id);
        var employees = await ChatPageService.GetAllEmployeesAsync();
        _multySelect = MultySelectViewModel<UserViewModel>.GetList(employees);
        var chatIds = _chat.ChatMembers.Select(c => c.Id).ToList();
        foreach (var select in _multySelect)
        {
            if (chatIds.Contains(select.Value.Id))
            {
                select.IsSelected = true;
            }
        }
    }

    private async Task HandleSubmit()
    {
        _chat.ChatMembers = _multySelect.Where(c => c.IsSelected)
            .Select(c => new ChatMemberViewModel { UserId = c.Value.Id }).ToList();
        await ChatPageService.UpdateValueAsync(_chat);
        NavigationManager.NavigateTo("/chat");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/chat");
    }

}

<style>
    .chat {
        width: 500px;
        justify-self: center;
        margin-bottom: 100px;
    }

    .buttons {
        margin-top: 20px;
    }

    .employee-list {
        max-height: 400px; /* Adjust height as needed */
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .employee-item {
        display: flex;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #eee;
    }

    .employee-item:last-child {
        border-bottom: none;
    }

    .employee-checkbox {
        margin-right: 10px;
    }

    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    .employee-info {
        display: flex;
        flex-direction: column;
    }

    .employee-name {
        font-weight: bold;
    }

    .employee-username {
        color: #777;
        font-size: 0.9em;
    }

    #Description {
        min-height: 110px;
    }

</style>