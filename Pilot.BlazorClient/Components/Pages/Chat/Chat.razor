@page "/chat"
@using AutoMapper
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.Data
@using Pilot.Contracts.Data.Enums
@using Pilot.Contracts.DTO.ModelDto
@using Pilot.Contracts.Services
@inject IChatPageService ChatPageService
@inject IUserService UserService
@inject IMessengerService MessengerService
@inject IJSRuntime JsRuntime
@inject IMapper Mapper
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager
@inject IAiService AiService
@inject IJsonLocalizationService Localizer

<PageTitle>@Localizer.GetString("PageTitle", "Chat")</PageTitle>

<div class="chat-page" data-theme="@_theme">
    @if (_isLoading)
    {
        <Loading/>
    }
    else
    {
        <div class="chat-container">
            <!-- Mobile Menu Toggle -->
            <button class="menu-toggle" @onclick="ToggleSidebar" aria-label="Toggle Sidebar">
                <i class="fas fa-bars"></i>
            </button>

            <!-- Left Sidebar: Chat List -->
            <div class="sidebar chat-list" style="@(_isSidebarOpen ? "transform: translateX(0);" : "")">
                <div class="sidebar-header">
                    <h5>@Localizer.GetString("ChatsTitle", "Chat")</h5>
                    <button class="theme-toggle" @onclick="ToggleTheme" aria-label="Toggle Theme">
                        <i class="fas fa-@(_theme == "dark" ? "sun" : "moon")"></i>
                    </button>
                </div>
                <div class="sidebar-content">
                    <!-- AI Assistant Chat -->
                    <TitleChatComponent
                        ChatId="-2"
                        SelectedChat="@_selectedChat"
                        ChatTitle="@Localizer.GetString("AiAssistant", "Chat")"
                        OnChatClick="() => HandleAiChatClick(ClientConstants.AiId)"/>

                    @foreach (var chat in _chats)
                    {
                        <TitleChatComponent
                            ChatId="@chat.Id"
                            SelectedChat="@_selectedChat"
                            ChatTitle="@chat.Title"
                            OnChatClick="HandleTitleChatClick"/>
                    }
                </div>
                <button class="btn btn-primary create-chat-btn" @onclick="CreateNewChat">
                    @Localizer.GetString("CreateChat", "Chat")
                </button>
            </div>

            @if (_selectedChat != null)
            {
                <!-- Main Chat Area -->
                <div class="chat-main">
                    <!-- Chat Header -->
                    <div class="chat-header">
                        <div class="chat-title">
                            @if (_selectedChat.Id == ClientConstants.AiId)
                            {
                                <img src="/Images/Chat/ai.png" alt="AI Assistant" class="chat-icon"/>
                            }
                            <h4>@(_selectedChat.Title)</h4>
                        </div>
                        <div class="chat-actions">
                            <button class="btn btn-outline" @onclick="NavigateToReminders">
                                @Localizer.GetString("Reminders", "Chat")
                            </button>
                            <button class="btn btn-outline" @onclick="ToggleInfoPanel">
                                @Localizer.GetString("Settings", "Chat")
                            </button>
                        </div>
                    </div>

                    <!-- Chat Content -->
                    <div class="chat-content">
                        <div class="message-list" @ref="_chatListRef" id="chatListRef">
                            @if (_isChatLoading)
                            {
                                <Loading/>
                            }
                            else
                            {
                                @foreach (var message in _messages)
                                {
                                    <MessageComponent Message="@message" Users="@_users" User="@_currentUser"/>
                                }
                            }
                        </div>
                        <TextboxComponent OnSendMessageClick="HandleSendMessageClick"/>
                    </div>
                </div>

                <!-- Right Sidebar: Chat Info -->
                <div class="sidebar-overlay" style="@(_showInfoPanel ? "display: block;" : "display: none;")"
                     @onclick="ToggleInfoPanel"></div>
                <div class="sidebar chat-info"
                     style="@(_showInfoPanel ? "transform: translateX(0);" : "transform: translateX(110%);")">
                    <div class="sidebar-header">
                        <h5>@Localizer.GetString("ChatInfoTitle", "Chat")</h5>
                        <button class="btn-close" @onclick="ToggleInfoPanel" aria-label="Close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="sidebar-content">
                        <p><strong>@Localizer.GetString("Description", "Chat"):</strong> @_selectedChat!.Description</p>
                        @if (_selectedChat.Id != ClientConstants.AiId)
                        {
                            <p>
                                <strong>@Localizer.GetString("Members", "Chat"):</strong> @_selectedChat.ChatMembers.Count
                            </p>
                            <h6>@Localizer.GetString("CreatedBy", "Chat")</h6>
                            <a href="@GetUserProfileLink(_selectedChat.CreatedBy)" class="participant-link">
                                <span>@_users.FirstOrDefault(c => c.Id == _selectedChat.CreatedBy)?.UserName</span>
                            </a>
                            <h6>@Localizer.GetString("Participants", "Chat")</h6>
                            <div class="participants-list">
                                @foreach (var user in _users)
                                {
                                    <div class="participant-info">
                                        <img src="@TempFileService.GetUrl(user.AvatarImage)" alt="@user.UserName"
                                             class="participant-avatar"/>
                                        <a href="@GetUserProfileLink(user.Id)"
                                           class="participant-link">@user.UserName</a>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="sidebar-footer">
                        <button class="btn btn-outline" @onclick="CloseInfoPanel">
                            @Localizer.GetString("Close", "Chat")
                        </button>
                        @if (_selectedChat.Id != ClientConstants.AiId)
                        {
                            <button class="btn btn-primary" @onclick="UpdateAndClose">
                                @Localizer.GetString("Update", "Chat")
                            </button>
                        }
                    </div>
                </div>
            }
            else
            {
                <!-- Placeholder Content -->
                <div class="placeholder-content">
                    <h2>@Localizer.GetString("PlaceholderTitle", "Chat")</h2>
                    <p>@Localizer.GetString("PlaceholderSubtitle", "Chat")</p>
                    <p>@Localizer.GetString("PlaceholderPrompt", "Chat")</p>
                    <img src="/Images/Chat/welcome.png" alt="Welcome" class="placeholder-img"/>
                </div>
            }
        </div>
    }
</div>

@code {
    private ICollection<ChatViewModel> _chats = [];
    private ICollection<MessageViewModel> _messages = [];
    private ChatViewModel? _selectedChat;
    private bool _showInfoPanel;
    private ICollection<UserViewModel> _users = [];
    private UserViewModel _currentUser = null!;
    private bool _isLoading = true;
    private bool _isChatLoading;
    private ElementReference _chatListRef;
    private Action _updateMessage;
    private bool _isSidebarOpen;
    private string _theme = "light";

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await UserService.GetCurrentUserAsync();
        _chats = await ChatPageService.GetUserChatsAsync();

        MessengerService.OnMessageReceived += async (message) =>
        {
            var messageDto = message.FromJson<MessageDto>();
            if (_selectedChat?.Id == messageDto.Chat.Id)
            {
                var messageViewModel = Mapper.Map<MessageViewModel>(messageDto);
                _messages.Add(messageViewModel);
                await InvokeAsync(StateHasChanged);
                await ScrollToBottom();
            }
        };

        var currentChatStorageResult = await ProtectedSessionStorage.GetAsync<int>(ClientConstants.CurrentChat);
        if (currentChatStorageResult.Success)
        {
            await HandleTitleChatClick(currentChatStorageResult.Value);
            await HandleAiChatClick(currentChatStorageResult.Value);
        }

        _isLoading = false;
    }

    private async Task HandleTitleChatClick(int chatId)
    {
        _isChatLoading = true;
        var selectedChat = _chats.FirstOrDefault(chat => chat.Id == chatId);
        if (selectedChat != null)
        {
            _users = await ChatPageService.GetUsersAsync(selectedChat.ChatMembers);
            _messages = await ChatPageService.GetMessagesAsync(chatId, 0, 50);
        }

        _selectedChat = selectedChat;
        _isChatLoading = false;
        _isSidebarOpen = false;
        _showInfoPanel = false; // Закрываем правую панель при выборе чата
        await ProtectedSessionStorage.SetAsync(ClientConstants.CurrentChat, chatId);
        await ScrollToBottom();
    }

    private async Task CreateNewChat()
    {
        _showInfoPanel = false; // Закрываем панель перед навигацией
        NavigationManager.NavigateTo("/create-chat");
    }

    private async Task UpdateAndClose()
    {
        _showInfoPanel = false; // Закрываем панель перед навигацией
        await InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo($"/update-chat/{_selectedChat!.Id}");
    }

    private void ToggleInfoPanel()
    {
        _showInfoPanel = !_showInfoPanel;
        StateHasChanged();
    }

    private void CloseInfoPanel()
    {
        _showInfoPanel = false;
        StateHasChanged();
    }

    private async Task HandleSendMessageClick(string messageText)
    {
        if (_selectedChat == null) return;

        if (_selectedChat.Id != ClientConstants.AiId)
            await MessengerService.SendMessageAsync(_selectedChat.Id, messageText);
        if (_selectedChat.Id == ClientConstants.AiId)
        {
            var userMessage = new MessageViewModel
            {
                CreateAt = DateTime.Now,
                Text = messageText,
                UserId = _currentUser.Id,
                Chat = _selectedChat
            };
            _messages.Add(userMessage);

            var message = new MessageViewModel
            {
                CreateAt = DateTime.Now,
                Text = Localizer.GetString("AiThinking", "Chat"),
                UserId = (int)ChatMemberId.Ai,
                Chat = _selectedChat
            };
            _messages.Add(message);
            _updateMessage += ChangeMessage;
            await AiService.SendMessageAsync(messageText, message, _updateMessage);
        }

        await ScrollToBottom();
    }

    private async void ChangeMessage()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetUserProfileLink(int? userId) => $"/account/{userId}";

    private async Task ScrollToBottom()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("scrollToBottom", _chatListRef);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task NavigateToReminders()
    {
        _showInfoPanel = false; // Закрываем панель перед навигацией
        NavigationManager.NavigateTo($"/reminders/{_selectedChat!.Id}");
    }

    private async Task HandleAiChatClick(int chatId)
    {
        if (chatId != ClientConstants.AiId) return;

        _selectedChat = new ChatViewModel
        {
            Id = chatId,
            Title = Localizer.GetString("AiAssistant", "Chat"),
            Description = Localizer.GetString("AiAssistantDescription", "Chat")
        };

        _messages = new List<MessageViewModel>
        {
            new()
            {
                UserId = (int)ChatMemberId.Ai,
                Text = Localizer.GetString("AiWelcomeMessage", "Chat"),
                CreateAt = DateTime.Now
            }
        };

        _isChatLoading = false;
        _isSidebarOpen = false;
        _showInfoPanel = false; // Закрываем правую панель
        await ProtectedSessionStorage.SetAsync(ClientConstants.CurrentChat, chatId);
        await ScrollToBottom();
    }

    private void ToggleSidebar()
    {
        _isSidebarOpen = !_isSidebarOpen;
        if (_isSidebarOpen) _showInfoPanel = false; // Закрываем правую панель при открытии левой
        StateHasChanged();
    }

    private async Task ToggleTheme()
    {
        _theme = _theme == "light" ? "dark" : "light";
        await JsRuntime.InvokeVoidAsync("setTheme", _theme);
    }

}

<style>
    :root {
        --primary: #1e3a8a;
        --secondary: #3b82f6;
        --accent: #22c55e;
        --background: #f1f5f9;
        --surface: #ffffff;
        --text: #1e293b;
        --text-secondary: #64748b;
        --border: #e2e8f0;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        --gradient: linear-gradient(135deg, #1e3a8a, #3b82f6);
        --transition: all 0.3s ease;
        --radius: 12px;
    }

    [data-theme="dark"] {
        --primary: #1e40af;
        --secondary: #60a5fa;
        --accent: #4ade80;
        --background: #1e293b;
        --surface: #334155;
        --text: #f1f5f9;
        --text-secondary: #94a3b8;
        --border: #475569;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        --gradient: linear-gradient(135deg, #1e40af, #60a5fa);
    }

    .chat-page {
        font-family: 'Inter', sans-serif;
        background: var(--background);
        min-height: 100vh;
        color: var(--text);
        transition: var(--transition);
    }

    .chat-container {
        overflow: hidden;
        display: grid;
        grid-template-columns: 260px 1fr 270px;
        max-width: 1600px;
        margin: 0 auto;
        height: calc(100vh - 100px);
        gap: 1rem;
        padding: 1rem;
        position: relative;
    }

    .sidebar {
        background: var(--surface);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        padding: 1.5rem;
        overflow-y: auto;
        transition: transform 0.3s ease;
        z-index: 1000;
    }

    .sidebar-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
        transition: opacity 0.3s ease;
    }

    .sidebar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .sidebar-header h5 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
    }

    .sidebar-content {
        flex-grow: 1;
        overflow-y: auto;
    }

    .sidebar-footer {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .chat-main {
        display: flex;
        flex-direction: column;
        background: var(--surface);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        overflow: hidden;
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--border);
    }

    .chat-title {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .chat-title h4 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .chat-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .chat-actions {
        display: flex;
        gap: 0.5rem;
    }

    .chat-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .message-list {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .placeholder-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 2rem;
        background: var(--surface);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        margin: 1rem;
    }

    .placeholder-content h2 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .placeholder-content p {
        font-size: 1.1rem;
        color: var(--text-secondary);
        max-width: 600px;
        margin-bottom: 1.5rem;
    }

    .placeholder-img {
        max-width: 400px;
        border-radius: var(--radius);
        margin-top: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        border: none;
    }

    .btn-primary {
        background: var(--gradient);
        color: white;
    }

    .btn-primary:hover {
        background: var(--secondary);
        transform: translateY(-2px);
    }

    .btn-outline {
        background: transparent;
        border: 1px solid var(--border);
        color: var(--text);
    }

    .btn-outline:hover {
        background: var(--border);
        transform: translateY(-2px);
    }

    .theme-toggle, .menu-toggle, .btn-close {
        background: transparent;
        border: none;
        color: var(--text);
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        transition: var(--transition);
    }

    .theme-toggle:hover, .menu-toggle:hover, .btn-close:hover {
        color: var(--secondary);
    }

    .participant-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.5rem;
        border-radius: 8px;
        transition: var(--transition);
    }

    .participant-info:hover {
        background: var(--border);
    }

    .participant-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .participant-link {
        color: var(--text);
        text-decoration: none;
        font-size: 0.95rem;
    }

    .participant-link:hover {
        color: var(--secondary);
    }

    .participants-list {
        max-height: 200px;
        overflow-y: auto;
        margin-top: 0.5rem;
    }

    .create-chat-btn {
        width: 100%;
        margin-top: 1rem;
    }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Mobile Styles */
    .menu-toggle {
        display: none;
    }

    @@media (max-width: 1024px) {
        .chat-container {
            grid-template-columns: 1fr;
            position: relative;
        }

        .sidebar.chat-list {
            position: fixed;
            top: 0;
            left: 0;
            width: 280px;
            height: 100%;
            transform: translateX(-100%);
            z-index: 1000;
        }

        .sidebar.chat-info {
            position: fixed;
            top: 0;
            right: 0;
            width: 280px;
            height: 100%;
            z-index: 1000;
        }

        .menu-toggle {
            display: block;
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1100;
        }
    }

    @@media (max-width: 768px) {
        .chat-container {
            padding: 0.5rem;
        }

        .chat-header {
            flex-direction: column;
            gap: 0.5rem;
        }

        .chat-actions {
            width: 100%;
            justify-content: flex-end;
        }

        .placeholder-img {
            max-width: 100%;
        }
    }
</style>

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };

    window.setTheme = (theme) => {
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    };
</script>
