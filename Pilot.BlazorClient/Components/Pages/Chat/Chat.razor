@page "/chat"
@using AutoMapper
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.Data
@using Pilot.Contracts.Data.Enums
@using Pilot.Contracts.DTO.ModelDto
@using Pilot.Contracts.Services
@inject IChatPageService ChatPageService
@inject IUserService UserService
@inject IMessengerService MessengerService
@inject IJSRuntime JsRuntime
@inject IMapper Mapper
@inject ProtectedSessionStorage ProtectedSessionStorage;
@inject NavigationManager NavigationManager
@inject IAiService AiService

<PageTitle>Chat Page</PageTitle>

@if (_isLoading)
{
    <Loading/>
}
else
{
    <div class="chat-page d-flex" style="min-height: 75vh;">
        <!-- Left Sidebar: Chat List -->
        <div class="sidebar chat-list col-3">
            <h5 class="sidebar-title">Chats</h5>
            <!-- AI Assistant Chat -->
            <TitleChatComponent
                ChatId="-2"
                SelectedChat="@_selectedChat"
                ChatTitle="AI Assistant"
                OnChatClick="() => HandleAiChatClick(ClientConstants.AiId)"/>

            <div class="sidebar-section">
                @foreach (var chat in _chats)
                {
                    <TitleChatComponent ChatId="@chat.Id" SelectedChat="@_selectedChat" ChatTitle="@chat.Title"
                                        OnChatClick="HandleTitleChatClick"/>
                }
            </div>

            <button class="btn btn-primary create-chat-btn" @onclick="CreateNewChat">Create Chat</button>
        </div>

        @if (_selectedChat != null)
        {
            <!-- Center: Chat Messages and Info -->
            <div class="chat-main col-7">
                <!-- Center Header: Chat Title -->
                <div class="chat-header d-flex justify-content-between align-items-center">
                    @if (_selectedChat.Id == ClientConstants.AiId)
                    {
                        <img src="/Images/Chat/ai.png" width="40px"/>
                    }
                    <h4 style="max-width: 60%;">@(_selectedChat != null ? _selectedChat.Title : "")</h4>
                    @if (_selectedChat != null)
                    {
                        <div>
                            <button class="btn btn-secondary" @onclick="NavigateToReminders">Напоминания</button>
                            <button class="btn btn-secondary" @onclick="ToggleInfoPanel">Настройки</button>
                        </div>
                    }
                </div>

                <!-- Chat Content -->
                <div class="chat-content">

                    <!-- Messages Section -->
                    <div class="message-list" @ref="_chatListRef" id="chatListRef" style="display: grid">
                        @foreach (var message in _messages)
                        {
                            <MessageComponent Message="@message" Users="@_users" User="@_currentUser"/>
                        }
                    </div>

                    <TextboxComponent OnSendMessageClick="HandleSendMessageClick"/>
                </div>
            </div>

            @if (!_isChatLoading)
            {
                <!-- Right Sidebar: Chat Settings -->
                <div class="sidebar chat-info col-3"
                     style="display:@(_showInfoPanel && _selectedChat != null ? "block" : "none")">
                    <div class="chat-settings">
                        <h5 class="sidebar-title">Chat Info</h5>
                        <p>
                            <strong>Description:</strong> @_selectedChat!.Description
                        </p>
                        @if (_selectedChat.Id != -2)
                        {
                            <p>
                                <strong>Members:</strong> @_selectedChat.ChatMembers.Count
                            </p>

                            <h6>Created by</h6>
                            <a href="@GetUserProfileLink(_selectedChat.CreatedBy)">
                                <span
                                    class="sender-name">@_users.First(c => c.Id == _selectedChat.CreatedBy).UserName</span>
                            </a>

                            <h6>Participants</h6>
                            <div style="max-height: 200px;scroll-behavior: inherit;overflow-y: auto;">
                                @foreach (var user in _users)
                                {
                                    <div class="participant-info">
                                        <img src="@TempFileService.GetUrl(user.AvatarImage)" alt="@user.UserName"
                                             class="participant-avatar"/>
                                        <a href="@GetUserProfileLink(user.Id)">@user.UserName</a>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <button class="btn btn-secondary mt-3" style="margin-right: 10px" @onclick="ToggleInfoPanel">Close</button>
                    @if (_selectedChat.Id != -2)
                    {
                        <button class="btn btn-secondary mt-3" @onclick="UpdateNewChat">Update</button>
                    }
                </div>
            }
        }
        else
        {
            <!-- Placeholder Content When No Chat Selected -->
            <div class="placeholder-content text-center">
                <h2 style="color: #1e3a8a;">Welcome to Our Chat Page</h2>
                <p class="lead" style="color: #4a5568;">Here, you can communicate in real time with team members and
                    engage in discussions.</p>
                <p class="mt-3" style="color: #4a5568;">Select a chat from the left panel or create a new one to start
                    chatting. Stay connected, stay productive!</p>
            </div>
        }
    </div>
}

@code {
    private ICollection<ChatViewModel> _chats = [];
    private ICollection<MessageViewModel> _messages = [];
    private ChatViewModel? _selectedChat;
    private bool _showInfoPanel;
    private ICollection<UserViewModel> _users = [];
    private UserViewModel _currentUser = null!;
    private bool _isLoading = true;
    private bool _isChatLoading;
    private ElementReference _chatListRef;
    private Action _updateMessage;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await UserService.GetCurrentUserAsync();
        _chats = await ChatPageService.GetUserChatsAsync();

        MessengerService.OnMessageReceived += async (message) =>
        {
            var messageDto = message.FromJson<MessageDto>();
            if (_selectedChat?.Id == messageDto.Chat.Id)
            {
                var messageViewModel = Mapper.Map<MessageViewModel>(messageDto);
                _messages.Add(messageViewModel);
                await InvokeAsync(StateHasChanged);
                // await JsRuntime.InvokeVoidAsync("scrollToBottom", _chatListRef);
            }

            // MessengerService.OnReceiveNotification?.I;
        };

        var currentChatStorageResult = await ProtectedSessionStorage.GetAsync<int>(ClientConstants.CurrentChat);
        if (currentChatStorageResult.Success)
        {
            await HandleTitleChatClick(currentChatStorageResult.Value);
            await HandleAiChatClick(currentChatStorageResult.Value);
        }


        _isLoading = false;
    }

    private async Task HandleTitleChatClick(int chatId)
    {
        _isChatLoading = true;
        _selectedChat = _chats.FirstOrDefault(chat => chat.Id == chatId);
        if (_selectedChat != null)
        {
            _users = await ChatPageService.GetUsersAsync(_selectedChat.ChatMembers);
            _messages = await ChatPageService.GetMessagesAsync(chatId, 0, 50); // потом реализовать механизм подтягивания сообщений
        }

        _isChatLoading = false;

        await ProtectedSessionStorage.SetAsync(ClientConstants.CurrentChat, chatId);
    }

    private async Task CreateNewChat()
    {
        NavigationManager.NavigateTo("/create-chat");
    }

    private async Task UpdateNewChat()
    {
        NavigationManager.NavigateTo($"/update-chat/{_selectedChat!.Id}");
    }

    private void ToggleInfoPanel()
    {
        _showInfoPanel = !_showInfoPanel;
    }

    private async Task HandleSendMessageClick(string messageText)
    {
        if (_selectedChat == null) return;

        if (_selectedChat.Id != ClientConstants.AiId)
            await MessengerService.SendMessageAsync(_selectedChat.Id, messageText);
        if (_selectedChat.Id == ClientConstants.AiId)
        {
            var userMessage = new MessageViewModel
            {
                CreateAt = DateTime.Now,
                Text = messageText,
                UserId = _currentUser.Id,
                Chat = _selectedChat
            };
            _messages.Add(userMessage);
            
            var message = new MessageViewModel
            {
                CreateAt = DateTime.Now,
                Text = "Думаю...",
                UserId = (int)ChatMemberId.Ai,
                Chat = _selectedChat
            };
            _messages.Add(message);
            _updateMessage += ChangeMessage;
            await AiService.SendMessageAsync(messageText, message, _updateMessage);
        }
    }

    public async void ChangeMessage()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetUserProfileLink(int? userId) => $"/account/{userId}";

    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("scrollSidebarToBottom", _chatListRef);
    }

    private async Task NavigateToReminders()
    {
        NavigationManager.NavigateTo($"/reminders/{_selectedChat!.Id}");
    }

    private async Task HandleAiChatClick(int chatId)
    {
        if (chatId != ClientConstants.AiId) return;
        
        _selectedChat = new ChatViewModel
        {
            Id = chatId,
            Title = "AI Assistant",
            Description = "Chat with your virtual assistant for project-related questions and information."
        };

        _messages = new List<MessageViewModel>
        {
            new()
            {
                UserId = (int)ChatMemberId.Ai,
                Text = "Привет! Я AI ассистент по проекту Pilot. Как я могу вам помочь?",
                CreateAt = DateTime.Now
            }
        };

        _isChatLoading = false;

        await ProtectedSessionStorage.SetAsync(ClientConstants.CurrentChat, chatId);
    }

}

<style>
    .chat-page {
        display: flex;
        margin-bottom: 15vh;
        font-family: Arial, sans-serif;
    }

    .sidebar {
        background-color: #f7f7f7;
        padding: 1rem;
        border-right: 1px solid #ddd;
    }

    .chat-main {
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        padding: 0.5rem;
        color: black;
    }

    .chat-content {
        flex-grow: 1;
        padding: 1rem;
        height: 75vh;
    }

    .placeholder-content {
        width: 80%;
        margin-top: 5rem;
    }

    .placeholder-img {
        width: 500px;
        border-radius: 20px;
    }

    .participant-info {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .participant-avatar {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        margin-right: 0.5rem;
    }

    .sidebar-title {
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .chat-item, .participant-info a {
        display: block;
        padding: 0.5rem;
        text-decoration: none;
        color: #333;
    }

    .chat-item:hover, .participant-info a:hover {
        background-color: #eaeaea;
    }

    .sidebar img {
        object-fit: cover;
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }

    .message-list {
        max-height: 90%;
        overflow-y: auto;
    }

    .create-chat-btn {
        margin-top: 20px;
    }

    .reminders-btn {
        margin-top: 10px;
    }

    .chat-list .ai-assistant {
        font-weight: bold;
        color: #1e90ff;
        cursor: pointer;
    }

    .chat-list .ai-assistant:hover {
        text-decoration: underline;
    }

</style>

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };

    window.scrollSidebarToBottom = (sidebarSection) => {
        if (sidebarSection) {
            const observer = new MutationObserver((mutationsList, observer) => {
                const allElementsLoaded = Array.from(sidebarSection.children).every((child) => child.offsetHeight > 0);

                if (allElementsLoaded) {
                    sidebarSection.scrollTop = sidebarSection.scrollHeight;
                    observer.disconnect();
                }
            });

            observer.observe(sidebarSection, {childList: true, subtree: true});
        }
    };

</script>