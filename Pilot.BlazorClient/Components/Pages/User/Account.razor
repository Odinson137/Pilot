@page "/Account/{UserId:int}"
@page "/Account"
<PageTitle>Account</PageTitle>
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.ViewModels
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserPageService UserPageService

<AuthCheck/>

@if (!UserId.HasValue)
{
    <div class="header-banner">
        <h1>User Account Information</h1>
        <p>Manage your account details below</p>
    </div>
}
else
{
    <div class="header-banner">
        <h1>Your Employee Account Information</h1>
        <p>Learn your employees profiles and send message</p>
    </div>
}

@if (_isLoading)
{
    <Loading/>
}
else if (_user == null)
{
    <p>User not found.</p>
}
else
{
    <div class="user-info-container">
        <!-- Left section: photo and name -->
        <div class="left-section">
            <div class="avatar-section">
                @if (!string.IsNullOrEmpty(_user.AvatarUrl))
                {
                    <img src="@_user.AvatarUrl" alt="User Avatar" class="avatar-img"/>
                }
                else
                {
                    <img src="Images/Account/default-avatar.jpg" alt="Default Avatar" class="avatar-img"/>
                }
            </div>
            <h2>@_user.Name @_user.LastName</h2>
        </div>

        <!-- Right section: user details -->
        <div class="right-section">
            <p><strong>Username:</strong> @_user.UserName</p>
            <p><strong>Email:</strong> @(_user.Email ?? "No email provided")</p>
            <p><strong>Role:</strong> @_user.Role</p>
            <p><strong>Description:</strong> @(_user.Description ?? "No description provided")</p>
            <p><strong>Location:</strong> @(_user.Country ?? "Unknown"), @(_user.City ?? "Unknown")</p>
            <p><strong>Gender:</strong> @_user.Gender</p>
            <p><strong>Birthday:</strong> @(_user.Birthday?.ToString("MMMM dd, yyyy") ?? "Unknown")</p>
        </div>
    </div>

    
    <!-- Skills Section -->
    <div class="skills-section">
        <h3>User Skills</h3>
        @if (_skills != null && _skills.Any())
        {
            <ul class="skills-list">
                @foreach (var skill in _skills)
                {
                    <li class="skill-item">
                        <strong>@skill.Skill.Title</strong> - 
                        <span>@(skill.ExperienceYears.HasValue ? $"{skill.ExperienceYears.Value} years" : "No experience")</span> 
                        (Level: @skill.SkillLevel)
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No skills available.</p>
        }
    </div>
    
    @if (UserId.HasValue)
    {
        <div class="actions-section">
            <button class="btn btn-success" @onclick="SendMessage">Send Message</button>
        </div>
    }
    else
    {
        <div class="actions-section">
            <button class="btn btn-primary" @onclick="EditAccount">Edit Account</button>
            <button class="btn btn-primary" @onclick="Logout">Log Out</button>
            <button class="btn btn-danger" @onclick="DeleteAccount">Delete Account</button>
        </div>
    }
}

@code {
    [Parameter] public int? UserId { get; set; }

    private UserViewModel? _user;
    private ICollection<UserSkillViewModel>? _skills;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity is { IsAuthenticated: true };

        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("User/Login", forceLoad: true);
            return;
        }

        _isLoading = true;

        if (UserId.HasValue)
        {
            _user = await UserPageService.GetAnotherUserAsync(UserId.Value);
        }
        else
        {
            _user = await UserPageService.GetUserAsync();
        }

        if (_user != null)
        {
            _skills = await UserPageService.GetUserSkillAsync(_user.Id);
        }

        _isLoading = false;
    }

    private void SendMessage()
    {
        NavigationManager.NavigateTo($"/Chat/{UserId ?? _user?.Id}");
    }

    private async Task Logout()
    {
        NavigationManager.NavigateTo("/User/Logout");
    }

    private async Task DeleteAccount()
    {
    }

    private async Task EditAccount()
    {
        NavigationManager.NavigateTo("/Account/Edit");
    }
}

<style>
    /* Existing styles */

    .skills-section {
        margin-top: 20px;
        padding: 20px;
        background-color: #f7f9fc;
        border-radius: 8px;
    }

    .skills-list {
        list-style-type: none;
        padding: 0;
    }

    .skill-item {
        padding: 5px 0;
        border-bottom: 1px solid #e1e4e8;
    }

    .skill-item:last-child {
        border-bottom: none;
    }

    .header-banner {
        background-color: gray;
        height: 200px;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        margin-bottom: 20px;
    }

    .user-info-container {
        display: flex;
        justify-content: space-around;
        padding: 20px;
        gap: 20px;
    }

    .left-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .avatar-section {
        flex-shrink: 0;
    }

    .avatar-img {
        width: 150px;
        max-height: 400px;
        border-radius: 10%;
        margin-bottom: 10px;
    }

    .left-section h2 {
        margin: 0;
        text-align: center;
    }

    .right-section {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .right-section p {
        margin: 5px 0;
    }

    .actions-section {
        margin-top: 20px;
        text-align: center;
        margin-bottom: 100px;
    }

    .actions-section button {
        margin-right: 10px;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }
</style>