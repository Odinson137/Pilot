@page "/Account"
@using Microsoft.AspNetCore.Components.Authorization
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels.UserViewModels
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserPageService UserPageService

<div class="header-banner">
    <h1>User Account Information</h1>
    <p>Manage your account details below</p>
</div>

@if (_user == null)
{
<p>Loading user information...</p>
}
else
{
<div class="user-info-container">
    <!-- Левая секция: фотография и ФИО -->
    <div class="left-section">
        <div class="avatar-section">
            @if (!string.IsNullOrEmpty(_user.AvatarUrl))
            {
            <img src="@_user.AvatarUrl" alt="User Avatar" class="avatar-img" />
            }
            else
            {
            <img src="Images/Account/default-avatar.jpg" alt="Default Avatar" class="avatar-img" />
            }
        </div>
        <h2>@_user.Name @_user.LastName</h2>
    </div>

    <!-- Правая секция: данные пользователя -->
    <div class="right-section">
        <p><strong>Username:</strong> @_user.UserName</p>
        <p><strong>Email:</strong> @(_user.Email ?? "No email provided")</p>
        <p><strong>Role:</strong> @_user.Role</p>
        <p><strong>Description:</strong> @(_user.Description ?? "No description provided")</p>
        <p><strong>Location:</strong> @(_user.Country ?? "Unknown"), @(_user.City ?? "Unknown")</p>
        <p><strong>Gender:</strong> @_user.Gender</p>
        <p><strong>Birthday:</strong> @(_user.Birthday?.ToString("MMMM dd, yyyy") ?? "Unknown")</p>
    </div>
</div>

<div class="actions-section">
    <button class="btn btn-primary" @onclick="EditAccount">Edit Account</button>
    <button class="btn btn-primary" @onclick="Logout">Log Out</button>
    <button class="btn btn-danger" @onclick="DeleteAccount">Delete Account</button>
</div>
}

@code {
    private UserViewModel? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity is { IsAuthenticated: true };

        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("User/Login?ReturnUrl=Account", forceLoad: true);
            return;
        }

        _user = await UserPageService.GetUserAsync();
    }

    private async Task Logout()
    {
        NavigationManager.NavigateTo("/User/Logout");
    }

    private async Task DeleteAccount()
    {
        // Логика для удаления аккаунта
    }
    
    private async Task EditAccount()
    {
        NavigationManager.NavigateTo("/Account/Edit");
    }
}

<style>
    .header-banner {
        background-color: gray;
        height: 200px;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        margin-bottom: 20px;
    }

    .user-info-container {
        display: flex;
        justify-content: space-around;
        padding: 20px;
        gap: 20px;
    }

    /* Левая секция: фотография и ФИО */
    .left-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .avatar-section {
        flex-shrink: 0;
    }

    .avatar-img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        margin-bottom: 10px;
    }

    .left-section h2 {
        margin: 0;
        text-align: center;
    }

    /* Правая секция: данные пользователя */
    .right-section {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .right-section p {
        margin: 5px 0;
    }

    .actions-section {
        margin-top: 20px;
        text-align: center;
    }

    .actions-section button {
        margin-right: 10px;
    }
</style>
