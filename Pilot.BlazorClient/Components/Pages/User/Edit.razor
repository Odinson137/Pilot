@page "/Account/Edit"
<PageTitle>@Localizer.GetString("PageTitle", "EditAccount")</PageTitle>
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.Service
@using Pilot.BlazorClient.Service.Pages
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.Contracts.Data.Enums
@using Pilot.BlazorClient.Components.Helpers
@inject IUserPageService UserPageService
@inject NavigationManager NavigationManager
@inject IJsonLocalizationService Localizer
@inject IProjectTaskPageService ProjectTaskPageService
@inject ProtectedSessionStorage ProtectedSessionStorage

<!-- Header Section -->
<header class="header-banner">
    <h1 class="banner-title">@Localizer.GetString("HeaderTitle", "EditAccount")</h1>
    <p class="banner-subtitle">@Localizer.GetString("HeaderSubtitle", "EditAccount")</p>
    <div class="header-decor"></div>
</header>

<!-- Main Content -->
<div class="edit-container">
    @if (_user == null)
    {
        <Loading></Loading>
    }
    else
    {
        <!-- Intro Section -->
        <section class="intro-section">
            <h2 class="section-title">@Localizer.GetString("IntroTitle", "EditAccount")</h2>
            <p class="section-text">@Localizer.GetString("IntroText", "EditAccount")</p>
        </section>

        <!-- Edit Form -->
        <EditForm Model="_user" OnValidSubmit="HandleValidSubmit" class="edit-form">
            <DataAnnotationsValidator/>
            <ValidationSummary class="validation-summary"/>

            <div class="form-section">
                <h3 class="form-section-title">@Localizer.GetString("PersonalInfoTitle", "EditAccount")</h3>
                <p class="form-section-desc">@Localizer.GetString("PersonalInfoDesc", "EditAccount")</p>

                <div class="form-group">
                    <label for="name">@Localizer.GetString("FirstName", "EditAccount")</label>
                    <InputText id="name" @bind-Value="_user.Name" class="form-control"/>
                </div>

                <div class="form-group">
                    <label for="lastName">@Localizer.GetString("LastName", "EditAccount")</label>
                    <InputText id="lastName" @bind-Value="_user.LastName" class="form-control"/>
                </div>

                <div class="form-group">
                    <label for="email">@Localizer.GetString("Email", "EditAccount")</label>
                    <InputText id="email" @bind-Value="_user.Email" class="form-control"/>
                </div>

                <div class="form-group">
                    <label for="birthday">@Localizer.GetString("Birthday", "EditAccount")</label>
                    <InputDate id="birthday" @bind-Value="_user.Birthday" class="form-control"/>
                </div>

                <div class="form-group">
                    <label for="gender">@Localizer.GetString("Gender", "EditAccount")</label>
                    <InputSelect id="gender" @bind-Value="_user.Gender" class="form-control">
                        <option disabled="disabled" value="">@Localizer.GetString("SelectGender", "EditAccount")</option>
                        @foreach (var gender in Enum.GetValues<Gender>())
                        {
                            <option value="@gender">@Localizer.GetString(gender.ToString(), "EditAccount")</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-section">
                <h3 class="form-section-title">@Localizer.GetString("CareerInfoTitle", "EditAccount")</h3>
                <p class="form-section-desc">@Localizer.GetString("CareerInfoDesc", "EditAccount")</p>
                <div class="form-group">
                    <label for="dreamPost">@Localizer.GetString("DreamPost", "EditAccount")</label>
                    <InputText id="dreamPost" @bind-Value="_user.DreamPost" class="form-control"/>
                </div>
            </div>

            <div class="form-section">
                <h3 class="form-section-title">@Localizer.GetString("LocationTitle", "EditAccount")</h3>
                <p class="form-section-desc">@Localizer.GetString("LocationDesc", "EditAccount")</p>
                <div class="form-group location-group">
                    <label for="country">@Localizer.GetString("Country", "EditAccount")</label>
                    <InputText id="country" @bind-Value="_user.Country" class="form-control location-input"/>
                </div>
                <div class="form-group location-group">
                    <label for="city">@Localizer.GetString("City", "EditAccount")</label>
                    <InputText id="city" @bind-Value="_user.City" class="form-control location-input"/>
                </div>
            </div>

            <div class="form-section">
                <h3 class="form-section-title">@Localizer.GetString("DescriptionTitle", "EditAccount")</h3>
                <p class="form-section-desc">@Localizer.GetString("DescriptionDesc", "EditAccount")</p>
                <div class="form-group">
                    <label for="description">@Localizer.GetString("Description", "EditAccount")</label>
                    <InputTextArea id="description" @bind-Value="_user.Description" class="form-control"/>
                </div>
            </div>

            <div class="form-section avatar-section card mb-4 border-primary shadow-sm">
                <div class="card-body">
                    <h3 class="form-section-title">@Localizer.GetString("AvatarTitle", "EditAccount")</h3>
                    <p class="form-section-desc">@Localizer.GetString("AvatarDesc", "EditAccount")</p>
                    <div class="avatar-preview">
                        @if (_newAvatar != null)
                        {
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(_newAvatar.Value.Item2)}")" alt="New Avatar" class="avatar-img"/>
                        }
                        else if (!string.IsNullOrEmpty(_user.AvatarImage))
                        {
                            <img src="@TempFileService.GetUrl(_user.AvatarImage)" alt="Current Avatar" class="avatar-img"/>
                        }
                        else
                        {
                            <div class="avatar-placeholder">
                                <span class="material-icons">person</span>
                                <p>@Localizer.GetString("NoAvatar", "EditAccount")</p>
                            </div>
                        }
                    </div>
                    <InputFile id="file-upload" OnChange="HandleFileSelected" class="file-input" accept="image/*"/>
                    <label for="file-upload" class="btn btn-outline-primary btn-sm">
                        <span class="material-icons">upload</span> @Localizer.GetString("UploadPhoto", "EditAccount")
                    </label>
                    @if (_fileError != null)
                    {
                        <p class="file-error">@_fileError</p>
                    }
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">@Localizer.GetString("Cancel", "EditAccount")</button>
                <button type="submit" class="btn btn-success">@Localizer.GetString("Save", "EditAccount")</button>
            </div>
        </EditForm>

        <!-- Tips Section -->
        <section class="tips-section">
            <h2 class="section-title">@Localizer.GetString("TipsTitle", "EditAccount")</h2>
            <div class="tips-grid">
                <div class="tip-card">
                    <h4>@Localizer.GetString("Tip1Title", "EditAccount")</h4>
                    <p>@Localizer.GetString("Tip1Text", "EditAccount")</p>
                </div>
                <div class="tip-card">
                    <h4>@Localizer.GetString("Tip2Title", "EditAccount")</h4>
                    <p>@Localizer.GetString("Tip2Text", "EditAccount")</p>
                </div>
            </div>
        </section>
    }
</div>

@code {
    private UserViewModel? _user;
    private string? _fileError;
    private (string, byte[])? _newAvatar;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserPageService.GetUserAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Upload and save avatar if a new one was selected
            if (_newAvatar != null)
            {
                var fileViewModel = new FileViewModel
                {
                    Name = Guid.NewGuid().ToString(),
                    Type = "image/png",
                    Format = FileFormat.Image,
                    ByteFormFile = _newAvatar!.Value.Item2
                };
                await ProjectTaskPageService.UploadFileAsync(fileViewModel);
                _user!.AvatarImage = fileViewModel.Name;
                _newAvatar = null;
            }

            // Save user changes
            await UserPageService.SaveUserAsync(_user!);
            await ProtectedSessionStorage.DeleteAsync(ClientConstants.User);
            await Task.Delay(500);
            NavigationManager.NavigateTo("/Account");
        }
        catch (Exception ex)
        {
            _fileError = $"{Localizer.GetString("FileUploadError", "EditAccount")}: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        _newAvatar = null;
        NavigationManager.NavigateTo("/Account");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                await using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);

                _newAvatar = (file.Name, ms.ToArray());
                _fileError = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _fileError = $"{Localizer.GetString("FileUploadError", "EditAccount")}: {ex.Message}";
        }
    }
}

<style>
    :root {
        --primary: #007bff;
        --success: #28a745;
        --secondary: #6c757d;
        --accent: #ff6f61;
        --light: #f8f9fa;
        --dark: #343a40;
        --shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        --transition: all 0.3s ease;
    }

    .header-banner {
        position: relative;
        height: 220px;
        background: linear-gradient(135deg, #007bff 0%, #ff6f61 100%);
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        border-radius: 0 0 30px 30px;
        box-shadow: var(--shadow);
        overflow: hidden;
    }

    .header-decor {
        position: absolute;
        bottom: -20px;
        left: 0;
        width: 100%;
        height: 40px;
        background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="rgba(255,255,255,0.1)" d="M0,160L48,144C96,128,192,96,288,112C384,128,480,192,576,213.3C672,235,768,213,864,192C960,171,1056,149,1152,160C1248,171,1344,213,1392,234.7L1440,256L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path></svg>') no-repeat center;
        background-size: cover;
    }

    .banner-title {
        font-size: 3rem;
        margin: 0;
        font-weight: 800;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .banner-subtitle {
        font-size: 1.3rem;
        margin-top: 15px;
        opacity: 0.9;
    }

    .edit-container {
        max-width: 900px;
        margin: 50px auto;
        padding: 0 20px;
    }

    .intro-section {
        background: #fff;
        border-radius: 15px;
        padding: 30px;
        box-shadow: var(--shadow);
        margin-bottom: 40px;
        text-align: center;
    }

    .section-title {
        font-size: 2rem;
        color: var(--dark);
        margin-bottom: 15px;
        font-weight: 700;
    }

    .section-text {
        font-size: 1.1rem;
        color: #666;
        line-height: 1.6;
    }

    .edit-form {
        background: #fff;
        border-radius: 15px;
        padding: 40px;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease;
    }

    .form-section {
        margin-bottom: 40px;
    }

    .form-section-title {
        font-size: 1.8rem;
        color: var(--primary);
        margin-bottom: 10px;
        font-weight: 600;
    }

    .form-section-desc {
        font-size: 1rem;
        color: #777;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-group label {
        font-size: 1.2rem;
        color: var(--dark);
        font-weight: 600;
        margin-bottom: 10px;
        display: block;
    }

    .form-control {
        width: 100%;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        font-size: 1rem;
        color: #333;
        background: #fafafa;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
        box-shadow: 0 0 8px rgba(255, 111, 97, 0.3);
        outline: none;
    }

    .form-control[textarea] {
        height: 180px;
        resize: vertical;
    }

    .location-group {
        position: relative;
        transition: transform 0.3s ease;
    }

    .location-input:focus {
        box-shadow: 0 0 8px rgba(255, 111, 97, 0.3);
    }

    .avatar-section {
        text-align: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 15px;
    }

    .avatar-preview {
        margin: 20px 0;
    }

    .avatar-img {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        border: 3px solid #fff;
    }

    .avatar-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: #e0e0e0;
        margin: 0 auto;
    }

    .avatar-placeholder .material-icons {
        font-size: 48px;
        color: #666;
    }

    .avatar-placeholder p {
        font-size: 0.9rem;
        color: #666;
        margin: 5px 0 0;
    }

    .file-input {
        display: none;
    }

    .btn-outline-primary {
        padding: 10px 20px;
        border: 2px solid var(--primary);
        color: var(--primary);
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
        transition: var(--transition);
    }

    .btn-outline-primary:hover {
        background: var(--primary);
        color: #fff;
        transform: scale(1.05);
    }

    .file-error {
        color: #dc3545;
        font-size: 0.9rem;
        margin-top: 15px;
    }

    .validation-summary {
        color: #dc3545;
        font-size: 1rem;
        margin-bottom: 25px;
        background: #fff5f5;
        padding: 15px;
        border-radius: 10px;
    }

    .loading-section {
        text-align: center;
        padding: 40px;
        background: #fff;
        border-radius: 15px;
        box-shadow: var(--shadow);
    }

    .loading-spinner {
        display: inline-block;
        width: 40px;
        height: 40px;
        border: 4px solid var(--primary);
        border-top: 4px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .form-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 40px;
        padding-bottom: 30px;
    }

    .btn {
        padding: 14px 35px;
        border: none;
        border-radius: 10px;
        font-weight: 700;
        font-size: 1.1rem;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-success {
        background: var(--success);
        color: #fff;
    }

    .btn-success:hover {
        background: #1e7e34;
        transform: scale(1.05);
    }

    .btn-secondary {
        background: var(--secondary);
        color: #fff;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: scale(1.05);
    }

    .tips-section {
        margin-top: 50px;
        padding: 40px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        box-shadow: var(--shadow);
    }

    .tips-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-top: 30px;
    }

    .tip-card {
        background: #fff;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease;
    }

    .tip-card:hover {
        transform: translateY(-5px);
    }

    .tip-card h4 {
        font-size: 1.4rem;
        color: var(--primary);
        margin-bottom: 15px;
    }

    .tip-card p {
        font-size: 1rem;
        color: #666;
        line-height: 1.6;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @@media (max-width: 768px) {
        .header-banner {
            height: 180px;
        }

        .banner-title {
            font-size: 2.2rem;
        }

        .banner-subtitle {
            font-size: 1.1rem;
        }

        .edit-form {
            padding: 25px;
        }

        .tips-grid {
            grid-template-columns: 1fr;
        }

        .form-actions {
            flex-direction: column;
            gap: 15px;
        }

        .btn {
            width: 100%;
        }

        .avatar-img {
            width: 100px;
            height: 100px;
        }
    }
</style>