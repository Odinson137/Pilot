@page "/create-task/{ProjectId:int}/{UserId:int}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Pilot.BlazorClient.ViewModels
@using Pilot.Contracts.Data.Enums
@using Pilot.BlazorClient.Service
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.Components.Pages.User
@inject IProjectTaskPageService ProjectTaskPageService
@inject IJsonLocalizationService Localization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<AuthCheck />

<PageTitle>@Localization.GetString("CreateTaskTitle", "CreateTask")</PageTitle>

<div class="task-create-container">
    <div class="task-create-header">
        <h2>@Localization.GetString("CreateTaskTitle", "CreateTask")</h2>
        <p class="header-subtitle">@Localization.GetString("CreateTaskSubtitle", "CreateTask")</p>
    </div>

    @if (ErrorMessage != null)
    {
        <div class="error-message">
            <span class="material-icons">error</span>
            @ErrorMessage
        </div>
    }

    <EditForm Model="Task" class="task-create-form">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="task-name">
                <span class="material-icons">assignment</span>
                @Localization.GetString("TaskName", "CreateTask")
            </label>
            <InputText id="task-name" @bind-Value="Task.Name" class="form-input" placeholder="@Localization.GetString("TaskNamePlaceholder", "CreateTask")" />
            <p class="form-hint">@Localization.GetString("TaskNameHint", "CreateTask")</p>
            <ValidationMessage For="@(() => Task.Name)" />
        </div>

        <div class="form-group">
            <label for="task-description">
                <span class="material-icons">description</span>
                @Localization.GetString("Description", "CreateTask")
            </label>
            <InputTextArea id="task-description" @bind-Value="Task.Description" class="form-textarea" placeholder="@Localization.GetString("DescriptionPlaceholder", "CreateTask")" />
            <p class="form-hint">@Localization.GetString("DescriptionHint", "CreateTask")</p>
            <ValidationMessage For="@(() => Task.Description)" />
        </div>

        <div class="form-group">
            <label for="task-team">
                <span class="material-icons">group</span>
                @Localization.GetString("Team", "CreateTask")
            </label>
            <InputSelect id="task-team" @bind-Value="SelectedTeamId" class="form-select">
                <option value="0" disabled selected>@Localization.GetString("SelectTeam", "CreateTask")</option>
                @foreach (var team in Teams)
                {
                    <option value="@team.Id">@team.Name</option>
                }
            </InputSelect>
            <p class="form-hint">@Localization.GetString("TeamHint", "CreateTask")</p>
            @if (SelectedTeamId == 0 && FormSubmitted)
            {
                <p class="field-validation-error">@Localization.GetString("TeamRequired", "CreateTask")</p>
            }
        </div>

        <div class="form-group">
            <label for="task-priority">
                <span class="material-icons">priority_high</span>
                @Localization.GetString("Priority", "CreateTask")
            </label>
            <InputSelect id="task-priority" @bind-Value="Task.Priority" class="form-select">
                @foreach (var priority in Enum.GetValues<TaskPriority>())
                {
                    <option value="@priority">@Localization.GetString($"TaskPriority_{priority}", "CreateTask")</option>
                }
            </InputSelect>
            <p class="form-hint">@Localization.GetString("PriorityHint", "CreateTask")</p>
            <ValidationMessage For="@(() => Task.Priority)" />
        </div>

        <div class="form-group">
            <label for="task-status">
                <span class="material-icons">task_alt</span>
                @Localization.GetString("Status", "CreateTask")
            </label>
            <InputSelect id="task-status" @bind-Value="Task.TaskStatus" class="form-select">
                @foreach (var status in Enum.GetValues<ProjectTaskStatus>())
                {
                    <option value="@status">@Localization.GetString($"TaskStatus_{status}", "CreateTask")</option>
                }
            </InputSelect>
            <p class="form-hint">@Localization.GetString("StatusHint", "CreateTask")</p>
            <ValidationMessage For="@(() => Task.TaskStatus)" />
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-save"  @onclick="SaveTask">
                <span class="material-icons">save</span>
                @Localization.GetString("Save", "CreateTask")
            </button>
            <button type="button" class="btn btn-cancel" @onclick="Cancel">
                <span class="material-icons">cancel</span>
                @Localization.GetString("Cancel", "CreateTask")
            </button>
        </div>
    </EditForm>
</div>

<style>
    :root {
        --primary: #3b82f6;
        --secondary: #6b7280;
        --success: #10b981;
        --danger: #ef4444;
        --bg-light: #f3f4f6;
        --bg-white: #ffffff;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .task-create-container {
        max-width: 800px;
        margin: 3rem auto;
        padding: 2.5rem;
        background: linear-gradient(145deg, var(--bg-white), #e5e7eb);
        border-radius: 16px;
        box-shadow: var(--shadow);
        animation: slideIn 0.5s ease-out;
    }

    .task-create-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    h2 {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--text-primary);
        margin: 0;
        background: linear-gradient(to right, var(--primary), #60a5fa);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .header-subtitle {
        font-size: 1.1rem;
        color: var(--text-secondary);
        margin-top: 0.5rem;
        line-height: 1.5;
    }

    .error-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: #fee2e2;
        border: 1px solid var(--danger);
        border-radius: 8px;
        color: var(--danger);
        font-size: 1rem;
        margin-bottom: 1.5rem;
    }

    .task-create-form {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .form-group {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-group label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .form-group .material-icons {
        font-size: 1.2rem;
        color: var(--primary);
    }

    .form-input,
    .form-textarea,
    .form-select {
        padding: 1rem;
        border: 2px solid #d1d5db;
        border-radius: 12px;
        font-size: 1rem;
        background: var(--bg-white);
        transition: var(--transition);
    }

    .form-input:focus,
    .form-textarea:focus,
    .form-select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
        outline: none;
    }

    .form-textarea {
        min-height: 150px;
        resize: vertical;
    }

    .form-select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23333'%3E%3Cpath d='M7 10l5 5 5-5H7z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1.2rem;
        padding-right: 2.5rem;
    }

    .form-hint {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.25rem;
        line-height: 1.4;
    }

    .field-validation-error {
        color: var(--danger);
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        box-shadow: var(--shadow);
    }

    .btn-save {
        background: linear-gradient(90deg, var(--success), #34d399);
        color: #fff;
    }

    .btn-save:hover {
        background: linear-gradient(90deg, #059669, #10b981);
        transform: translateY(-2px);
    }

    .btn-cancel {
        background: linear-gradient(90deg, var(--secondary), #9ca3af);
        color: #fff;
    }

    .btn-cancel:hover {
        background: linear-gradient(90deg, #4b5563, #6b7280);
        transform: translateY(-2px);
    }

    .btn .material-icons {
        font-size: 1.2rem;
    }
</style>

@code {
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public int UserId { get; set; }

    private ProjectTaskViewModel Task { get; set; } = new();
    private List<TeamViewModel> Teams { get; set; } = new();
    private int SelectedTeamId { get; set; }
    private string? ErrorMessage { get; set; }
    private bool FormSubmitted { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Teams = (await ProjectTaskPageService.GetProjectTeamsAsync(ProjectId)).ToList();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        Task = new ProjectTaskViewModel
        {
            CompanyUser = new CompanyUserViewModel { Id = UserId },
            TaskStatus = ProjectTaskStatus.ToDo,
            Priority = TaskPriority.Normal
        };
    }

    private async Task SaveTask()
    {
        FormSubmitted = true;
        if (SelectedTeamId == 0)
        {
            ErrorMessage = Localization.GetString("TeamRequired", "CreateTask");
            return;
        }

        if (string.IsNullOrEmpty(Task.Name))
        {
            ErrorMessage = Localization.GetString("RequiredField", "CreateTask");
            return;
        }

        ErrorMessage = null;
        Task.Team = new TeamViewModel { Id = SelectedTeamId };
        await ProjectTaskPageService.AddProjectTaskAsync(Task);
        NavigationManager.NavigateTo("work");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("work");
    }
}