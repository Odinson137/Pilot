@page "/task/{Id:int}"
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.Contracts.Data.Enums
@using TaskStatus = Pilot.Contracts.Data.Enums.ProjectTaskStatus
@using Pilot.BlazorClient.Components.Pages.User
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Service
@inject IProjectTaskPageService ProjectTaskPageService
@inject IJsonLocalizationService Localizer
@inject IUserService UserService

<PageTitle>@Localizer.GetString("TaskTitle", "Task") @(_task?.Id ?? 0)</PageTitle>

<AuthCheck/>

@if (_isLoading)
{
    <Loading/>
}
else if (_task == null)
{
    <p class="not-found">@Localizer.GetString("TaskNotFound", "Task")</p>
}
else
{
    <div class="task-container">
        <div class="task-header">
            <h1 class="task-title">@_task.Name</h1>
            <p class="task-subtitle">@_task.Description</p>
        </div>

        <div class="tabs">
            <button @onclick="() => SetTab(Tab.View)" class="tab-button @(CurrentTab == Tab.View ? "active" : "")">
                @Localizer.GetString("ViewTab", "Task")
            </button>
            <button @onclick="() => SetTab(Tab.Edit)" class="tab-button @(CurrentTab == Tab.Edit ? "active" : "")">
                @Localizer.GetString("EditTab", "Task")
            </button>
            <button @onclick="() => SetTab(Tab.History)" class="tab-button @(CurrentTab == Tab.History ? "active" : "")">
                @Localizer.GetString("HistoryTab", "Task")
            </button>
        </div>

        <div class="tab-content">
            @switch (CurrentTab)
            {
                case Tab.View:
                    <div class="task-view">
                        <div class="task-info-grid">
                            <div class="task-section">
                                <h3>@Localizer.GetString("Details", "Task")</h3>
                                <div class="task-meta">
                                    <p><span class="label">@Localizer.GetString("Priority", "Task")</span> <span style="color: @GetPriorityColor(_task.Priority)">@GetPriorityLabel(_task.Priority)</span></p>
                                    <p><span class="label">@Localizer.GetString("Status", "Task")</span> <span style="color: @GetStatusColor(_task.TaskStatus)">@_task.TaskStatus</span></p>
                                    <p><span class="label">@Localizer.GetString("CreatedOn", "Task")</span> @_task.CreateAt</p>
                                </div>
                            </div>

                            <div class="task-section">
                                <h3>@Localizer.GetString("People", "Task")</h3>
                                <div class="user-card">
                                    <span class="label">@Localizer.GetString("AssignedTo", "Task")</span>
                                    <a href="@GetUserProfileLink(_task?.TeamEmployee?.CompanyUser.Id)" class="user-link">
                                        <img src="@TempFileService.GetUrl(_userViewModel?.AvatarImage)" alt="avatar" class="avatar"/>
                                        <span>@_userViewModel?.FullName</span>
                                    </a>
                                </div>
                                <div class="user-card">
                                    <span class="label">@Localizer.GetString("CreatedBy", "Task")</span>
                                    <a href="@GetUserProfileLink(_task?.CreatedBy.Id)" class="user-link">
                                        <img src="@TempFileService.GetUrl(_createdUserViewModel?.AvatarImage)" alt="avatar" class="avatar"/>
                                        <span>@_createdUserViewModel?.FullName</span>
                                    </a>
                                </div>
                            </div>
                        </div>

                        <div class="task-section progress-section">
                            <h3>@Localizer.GetString("AddProgressUpdate", "Task")</h3>
                            <div class="progress-input">
                                <textarea @bind="_newTaskInfoDescription" placeholder="@Localizer.GetString("EnterTaskUpdate", "Task")" class="form-textarea"></textarea>
                                <div class="time-input">
                                    <select @bind="_newTaskInfoTimeSpentHours" class="form-select">
                                        @for (int i = 0; i <= 23; i++)
                                        {
                                            <option value="@i">@i ч</option>
                                        }
                                    </select>
                                    <select @bind="_newTaskInfoTimeSpentMinutes" class="form-select">
                                        @for (int i = 0; i <= 59; i += 5)
                                        {
                                            <option value="@i">@i мин</option>
                                        }
                                    </select>
                                </div>
                                @if (_attachedFile != null)
                                {
                                    <div class="file-preview">
                                        <span>@_attachedFile.Value.Item1</span>
                                        <button class="btn btn-icon btn-danger" @onclick="RemoveAttachedFile">
                                            <span class="material-icons">delete</span>
                                        </button>
                                    </div>
                                }
                                <div class="progress-actions">
                                    <label class="upload-btn">
                                        <span class="material-icons">attach_file</span>
                                        <InputFile OnChange="HandleFileUpload" class="file-input" multiple />
                                    </label>
                                    <button class="btn btn-primary" @onclick="AddNewTaskInfo">@Localizer.GetString("AddUpdate", "Task")</button>
                                </div>
                            </div>
                        </div>

                        <div class="task-section">
                            <h3>@Localizer.GetString("TaskProgress", "Task")</h3>
                            @if (_task?.TaskInfos is { Count: > 0 })
                            {
                                @foreach (var info in _task.TaskInfos)
                                {
                                    <div class="progress-card">
                                        <p class="progress-description">@info.Description</p>
                                        @if (info.File != null)
                                        {
                                            <img src="@TempFileService.GetUrl(info.File)" alt="file" class="progress-image"/>
                                        }
                                        <div class="progress-meta">
                                            <p><span class="label">@Localizer.GetString("AddedBy", "Task")</span> @_userViewModels[info.CreatedBy.Id].FullName</p>
                                            <p><span class="label">@Localizer.GetString("Date", "Task")</span> @info.CreateAt</p>
                                            <p><span class="label">@Localizer.GetString("TimeSpent", "Task")</span> @info.TimeSpent.ToString("hh\\:mm")</p>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="no-data">@Localizer.GetString("NoProgressUpdates", "Task")</p>
                            }
                        </div>
                    </div>
                    break;

                case Tab.Edit:
                    <div class="task-edit">
                        <EditForm Model="_task" class="edit-form">
                            <div class="form-group">
                                <label>@Localizer.GetString("TaskName", "Task")</label>
                                <input @bind="_task.Name" placeholder="@Localizer.GetString("EnterTaskName", "Task")" class="form-input"/>
                            </div>
                            <div class="form-group">
                                <label>@Localizer.GetString("Description", "Task")</label>
                                <textarea @bind="_task.Description" placeholder="@Localizer.GetString("EnterTaskDescription", "Task")" class="form-textarea"></textarea>
                            </div>
                            <div class="form-group">
                                <label>@Localizer.GetString("Priority", "Task")</label>
                                <select @bind="_task.Priority" class="form-select">
                                    @foreach (var value in Enum.GetValues(typeof(TaskPriority)))
                                    {
                                        <option value="@value">@value</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label>@Localizer.GetString("Status", "Task")</label>
                                <select @bind="_task.TaskStatus" class="form-select">
                                    @foreach (var value in Enum.GetValues<TaskStatus>().Take(_companyUserViewModel!.Permissions.HasPermission(Permission.TaskClosing) ? 4 : 3))
                                    {
                                        <option value="@value">@value</option>
                                    }
                                </select>
                            </div>
                            <div class="form-actions">
                                <button type="button" class="btn btn-success" @onclick="Save">@Localizer.GetString("Save", "Task")</button>
                                <button type="button" class="btn btn-secondary" @onclick="() => SetTab(Tab.View)">@Localizer.GetString("Cancel", "Task")</button>
                            </div>
                        </EditForm>
                    </div>
                    break;

                case Tab.History:
                    <div class="task-history">
                        <h3>@Localizer.GetString("TaskHistory", "Task")</h3>
                        <div class="history-list">
                            <div class="history-card">
                                <p><span class="label">@Localizer.GetString("User", "Task")</span> John Doe</p>
                                <p><span class="label">@Localizer.GetString("Date", "Task")</span> 2025-03-20 14:30</p>
                                <p><span class="label">@Localizer.GetString("Change", "Task")</span> Changed status to "Work"</p>
                            </div>
                            <div class="history-card">
                                <p><span class="label">@Localizer.GetString("User", "Task")</span> Jane Smith</p>
                                <p><span class="label">@Localizer.GetString("Date", "Task")</span> 2025-03-21 09:15</p>
                                <p><span class="label">@Localizer.GetString("Change", "Task")</span> Updated description</p>
                            </div>
                        </div>
                    </div>
                    break;
            }
        </div>
    </div>
}

@code {
    private bool _isLoading = true;
    private ProjectTaskViewModel? _task;
    private (string, byte[])? _attachedFile;
    private string _newTaskInfoDescription = string.Empty;
    private int _newTaskInfoTimeSpentHours ;
    private int _newTaskInfoTimeSpentMinutes = 5; // default
    private UserViewModel? _createdUserViewModel;
    private UserViewModel? _userViewModel;
    private CompanyUserViewModel _companyUserViewModel;
    private Dictionary<int, UserViewModel> _userViewModels = [];

    [Parameter] public int Id { get; set; }

    private Tab CurrentTab = Tab.View;

    private enum Tab { View, Edit, History }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetCurrentUserAsync();
        _companyUserViewModel = await ProjectTaskPageService.GetCompanyUserAsync(user.Id);
        
        _task = await ProjectTaskPageService.GetTaskAsync(Id);
        var userIds = new List<int>
        {
            _task.CreatedBy.Id,
            _task.TeamEmployee?.CompanyUser.Id ?? throw new Exception("Database inconsistency: CompanyUser cannot be null")
        };

        var userViewModels = await ProjectTaskPageService.GetUsersAsync(userIds);
        _createdUserViewModel = userViewModels.FirstOrDefault(c => c.Id == _task.CreatedBy.Id);
        _userViewModel = userViewModels.FirstOrDefault(c => c.Id == _task.TeamEmployee.CompanyUser.Id);

        var taskInfosIds = _task.TaskInfos.Select(c => c.Id).ToList();
        if (taskInfosIds.Any())
        {
            _task.TaskInfos = await ProjectTaskPageService.GetTaskInfoAsync(taskInfosIds);
            var taskInfoCreatedByIds = _task.TaskInfos.Select(c => c.CreatedBy!.Id).ToList();
            var taskInfoCreatedBy = await ProjectTaskPageService.GetUsersAsync(taskInfoCreatedByIds);
            foreach (var createdBy in taskInfoCreatedBy)
            {
                _userViewModels[createdBy.Id] = createdBy;
            }
        }

        _isLoading = false;
    }

    private string GetPriorityLabel(TaskPriority? priority)
    {
        return priority switch
        {
            TaskPriority.Low => "Low Priority",
            TaskPriority.Normal => "Middle Priority",
            TaskPriority.High => "High Priority",
            _ => "Unknown Priority"
        };
    }

    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "#6c757d",
            TaskPriority.Normal => "#ffc107",
            TaskPriority.High => "#dc3545",
            _ => "#000000"
        };
    }

    private string GetStatusColor(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.ToDo => "#6c757d",
            TaskStatus.Work => "#007bff",
            TaskStatus.Completed => "#28a745",
            _ => "#000000"
        };
    }

    private async Task AddNewTaskInfo()
    {
        var fileName = _attachedFile?.Item2 is null ? null : Guid.NewGuid().ToString();
        var taskInfo = new TaskInfoViewModel
        {
            ProjectTask = new BaseViewModel { Id = _task!.Id },
            File = fileName,
            Description = _newTaskInfoDescription,
            TimeSpent = TimeSpan.FromHours(_newTaskInfoTimeSpentHours) + TimeSpan.FromMinutes(_newTaskInfoTimeSpentMinutes)
        };

        if (fileName is not null)
        {
            var file = new FileViewModel
            {
                Name = fileName,
                Type = "png",
                Format = FileFormat.Image,
                ByteFormFile = _attachedFile?.Item2
            };
            await ProjectTaskPageService.UploadFileAsync(file);
            await Task.Delay(500);
        }

        await ProjectTaskPageService.AddTaskInfoAsync(taskInfo, async void (message) =>
        {
            try
            {
                var newTaskInfo = new TaskInfoViewModel
                {
                    Id = message.EntityId!.Value,
                    CreateAt = DateTime.Now,
                    ProjectTask = _task,
                    File = fileName,
                    Description = _newTaskInfoDescription,
                    CreatedBy = _companyUserViewModel,
                    TimeSpent = TimeSpan.FromMinutes(_newTaskInfoTimeSpentMinutes).Add(TimeSpan.FromHours(_newTaskInfoTimeSpentHours))
                };
                var infos = _task.TaskInfos.ToList();
                infos.Insert(0, newTaskInfo);
                _task.TaskInfos = infos;
                _newTaskInfoDescription = string.Empty;
                _newTaskInfoTimeSpentHours = 0;
                _newTaskInfoTimeSpentMinutes = 5;
                _attachedFile = null;
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                Console.WriteLine($"Error with handler method {e.Message}");
            }
        });

    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        _attachedFile = (e.File.Name, ms.ToArray());
    }

    private string GetUserProfileLink(int? userId) => $"/account/{userId}";

    private async Task Save()
    {
        if (_task != null)
        {
            await ProjectTaskPageService.UpdateValueAsync(_task);
            SetTab(Tab.View);
        }
    }

    private void RemoveAttachedFile()
    {
        _attachedFile = null;
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync("document.querySelector('input[type=file]').click");
    }

    private void SetTab(Tab tab)
    {
        CurrentTab = tab;
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;
}


<style>
    /* Общие стили */
    :root {
        --primary: #007bff;
        --success: #28a745;
        --danger: #dc3545;
        --secondary: #6c757d;
        --light: #f8f9fa;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .task-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 15px;
        box-shadow: var(--shadow);
        animation: fadeIn 0.5s ease-in-out;
    }

    .task-header {
        text-align: center;
        padding: 20px;
        border-bottom: 1px solid #e0e0e0;
    }

    .task-title {
        font-size: 2rem;
        color: #333;
        margin: 0;
    }

    .task-subtitle {
        font-size: 1.1rem;
        color: #666;
        margin-top: 5px;
    }

    /* Вкладки */
    .tabs {
        display: flex;
        justify-content: center;
        gap: 10px;
        padding: 10px 0;
        background: #fff;
        border-radius: 10px 10px 0 0;
    }

    .tab-button {
        padding: 12px 25px;
        font-size: 1rem;
        font-weight: 600;
        color: #555;
        background: #e9ecef;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
    }

    .tab-button:hover {
        background: #dee2e6;
    }

    .tab-button.active {
        background: var(--primary);
        color: #fff;
        box-shadow: 0 2px 5px rgba(0, 123, 255, 0.3);
    }

    /* Контент вкладок */
    .tab-content {
        background: #fff;
        border-radius: 0 0 10px 10px;
        padding: 20px;
        box-shadow: var(--shadow);
    }

    /* Вкладка просмотра */
    .task-view {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .task-info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .task-section {
        padding: 15px;
        background: #fff;
        border-radius: 10px;
        box-shadow: var(--shadow);
    }

    .task-section h3 {
        font-size: 1.5rem;
        color: #333;
        margin-bottom: 15px;
    }

    .task-meta p, .progress-meta p {
        margin: 5px 0;
        font-size: 1rem;
    }

    .label {
        font-weight: 600;
        color: #555;
        margin-right: 5px;
    }

    .user-card {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
    }

    .user-link {
        display: flex;
        align-items: center;
        gap: 10px;
        text-decoration: none;
        color: #333;
        transition: var(--transition);
    }

    .user-link:hover {
        color: var(--primary);
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    /* Прогресс */
    .progress-section {
        background: #f8f9fa;
    }

    .progress-input {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .form-textarea {
        width: 100%;
        min-height: 120px;
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        resize: vertical;
        transition: var(--transition);
    }

    .form-textarea:focus {
        border-color: var(--primary);
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        outline: none;
    }

    .time-input {
        display: flex;
        gap: 10px;
    }

    .form-select {
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        background: #fff;
        transition: var(--transition);
    }

    .form-select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        outline: none;
    }

    .file-preview {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        background: #e9ecef;
        border-radius: 8px;
    }

    .progress-actions {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .upload-btn {
        display: flex;
        align-items: center;
        gap: 5px;
        padding: 8px 15px;
        background: #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
    }

    .upload-btn:hover {
        background: #dee2e6;
    }

    .file-input {
        opacity: 0;
        position: absolute;
        width: 0;
        height: 0;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-primary {
        background: var(--primary);
        color: #fff;
    }

    .btn-primary:hover {
        background: #0056b3;
    }

    .btn-danger {
        background: var(--danger);
        color: #fff;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .btn-icon {
        padding: 5px;
        font-size: 1rem;
    }

    .progress-card {
        padding: 15px;
        background: #fff;
        border-radius: 10px;
        box-shadow: var(--shadow);
        margin-bottom: 15px;
        transition: transform 0.2s ease;
    }

    .progress-card:hover {
        transform: translateY(-5px);
    }

    .progress-description {
        font-size: 1rem;
        color: #333;
        margin-bottom: 10px;
    }

    .progress-image {
        max-width: 200px;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .no-data {
        font-style: italic;
        color: #888;
    }

    /* Вкладка редактирования */
    .task-edit {
        padding: 20px;
    }

    .edit-form {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .form-group label {
        font-weight: 600;
        color: #333;
    }

    .form-input {
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        transition: var(--transition);
    }

    .form-input:focus {
        border-color: var(--primary);
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        outline: none;
    }

    .form-actions {
        display: flex;
        gap: 15px;
    }

    .btn-success {
        background: var(--success);
        color: #fff;
    }

    .btn-success:hover {
        background: #218838;
    }

    .btn-secondary {
        background: var(--secondary);
        color: #fff;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    /* Вкладка истории */
    .task-history h3 {
        font-size: 1.5rem;
        color: #333;
        margin-bottom: 15px;
    }

    .history-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .history-card {
        padding: 15px;
        background: #fff;
        border-radius: 10px;
        box-shadow: var(--shadow);
        transition: transform 0.2s ease;
    }

    .history-card:hover {
        transform: translateY(-5px);
    }

    /* Анимация */
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* Адаптивность */
    @@media (max-width: 768px) {
        .task-container {
            padding: 10px;
        }

        .task-info-grid {
            grid-template-columns: 1fr;
        }

        .tabs {
            flex-direction: column;
            align-items: center;
        }

        .tab-button {
            width: 100%;
            border-radius: 8px;
        }

        .time-input {
            flex-direction: column;
        }

        .form-select {
            width: 100%;
        }
    }
</style>