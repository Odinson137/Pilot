@page "/task/{Id:int}"
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.Contracts.Data.Enums
@using TaskStatus = Pilot.Contracts.Data.Enums.TaskStatus
@using Pilot.BlazorClient.Components.Pages.User
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.Data
@inject IProjectTaskPageService ProjectTaskPageService
@inject IJsonLocalizationService Localizer

<PageTitle>@Localizer.GetString("TaskTitle", "Task") @(_task?.Id ?? 0)</PageTitle>

<AuthCheck/>

@if (_isLoading)
{
    <Loading/>
}
else if (_task == null)
{
    <p>@Localizer.GetString("TaskNotFound", "Task")</p>
}
else
{
    <div class="task-background">
        <div class="task-header">
            <h2>@_task.Id) @Localizer.GetString("TaskDetails", "Task") @_task.Name</h2>
        </div>

        <div class="tabs">
            <button class="tab-button" @onclick="() => SetTab(Tab.View)" class="@(CurrentTab == Tab.View ? "active" : "")">
                @Localizer.GetString("ViewTab", "Task")
            </button>
            <button class="tab-button" @onclick="() => SetTab(Tab.Edit)" class="@(CurrentTab == Tab.Edit ? "active" : "")">
                @Localizer.GetString("EditTab", "Task")
            </button>
            <button class="tab-button" @onclick="() => SetTab(Tab.History)" class="@(CurrentTab == Tab.History ? "active" : "")">
                @Localizer.GetString("HistoryTab", "Task")
            </button>
        </div>

        <div class="tab-content">
            @switch (CurrentTab)
            {
                case Tab.View:
                    <div class="task-details-window">
                        <div class="task-main-info">
                            <h3>@_task.Name</h3>
                            <p>@_task.Description</p>

                            <div class="task-people">
                                <div class="task-owner">
                                    <b>@Localizer.GetString("AssignedTo", "Task")</b>
                                    <a href="@GetUserProfileLink(_task?.CompanyUser?.Id)">
                                        <img src="@TempFileService.GetUrl(_userViewModel?.AvatarImage)" alt="avatar"/>
                                        @_userViewModel?.FullName
                                    </a>
                                </div>
                                <div class="task-creator">
                                    <b>@Localizer.GetString("CreatedBy", "Task")</b>
                                    <a href="@GetUserProfileLink(_task?.CreatedBy?.Id)">
                                        <img src="@TempFileService.GetUrl(_createdUserViewModel?.AvatarImage)"
                                             style="max-width: 30px; max-height: 30px" alt="avatar"/>
                                        @_createdUserViewModel?.FullName
                                    </a>
                                </div>
                            </div>

                            <div class="task-status-priority">
                                <p style="color: @GetPriorityColor(_task.Priority)">
                                    <b>@Localizer.GetString("Priority", "Task")</b> @GetPriorityLabel(_task.Priority)
                                </p>
                                <p style="color: @GetStatusColor(_task.TaskStatus)">
                                    <b>@Localizer.GetString("Status", "Task")</b> @_task.TaskStatus
                                </p>
                                <p>
                                    <b>@Localizer.GetString("CreatedOn", "Task")</b> @_task.CreateAt
                                </p>
                            </div>

                            <div class="add-task-info">
                                <h4>@Localizer.GetString("AddProgressUpdate", "Task")</h4>
                                <div class="task-info-input-group">
                                    <textarea @bind="_newTaskInfoDescription" style="height: 150px"
                                              placeholder="@Localizer.GetString("EnterTaskUpdate", "Task")"></textarea>
                                    <div class="time-select-group">
                                        <select @bind="_newTaskInfoTimeSpentHours">
                                            @for (int i = 0; i <= 23; i++)
                                            {
                                                <option value="@i">@i ч</option>
                                            }
                                        </select>
                                        <select @bind="_newTaskInfoTimeSpentMinutes">
                                            @for (int i = 0; i <= 59; i += 5)
                                            {
                                                <option value="@i">@i мин</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                @if (_attachedFile != null)
                                {
                                    <div class="attached-files">
                                        <h5>@Localizer.GetString("AttachedFiles", "Task")</h5>
                                        <ul>
                                            <li>
                                                @_attachedFile.Value.Item1
                                                <button class="btn btn-danger btn-sm" @onclick="RemoveAttachedFile">
                                                    @Localizer.GetString("Remove", "Task")
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                }
                                <div class="upload-and-add">
                                    <span class="material-icons upload-icon" @onclick="TriggerFileInput">attach_file</span>
                                    <InputFile OnChange="HandleFileUpload" style="display: none;" multiple/>
                                    <button class="btn add-info-btn" @onclick="AddNewTaskInfo">
                                        @Localizer.GetString("AddUpdate", "Task")
                                    </button>
                                </div>
                            </div>

                            <div class="task-progress">
                                <h4>@Localizer.GetString("TaskProgress", "Task")</h4>
                                @if (_task?.TaskInfos is { Count: > 0 })
                                {
                                    @foreach (var info in _task.TaskInfos)
                                    {
                                        <div class="task-info-card">
                                            <p>@info.Description</p>
                                            @if (info.File != null)
                                            {
                                                <img src="@TempFileService.GetUrl(info.File)" alt="file"
                                                     style="margin-bottom: 20px; width: 200px"/>
                                            }
                                            <p>
                                                <b>@Localizer.GetString("AddedBy", "Task")</b> @_userViewModels[info.CreatedBy.Id].FullName
                                            </p>
                                            <p>
                                                <b>@Localizer.GetString("Date", "Task")</b> @info.CreateAt
                                            </p>
                                            <p>
                                                <b>@Localizer.GetString("TimeSpent", "Task")</b> @info.TimeSpent.ToString("hh\\:mm")
                                            </p>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>@Localizer.GetString("NoProgressUpdates", "Task")</p>
                                }
                            </div>
                        </div>
                    </div>
                    break;

                case Tab.Edit:
                    <div class="task-details-window">
                        <EditForm Model="_task">
                            <div class="task-edit-form">
                                <div class="form-group">
                                    <label>@Localizer.GetString("TaskName", "Task")</label>
                                    <input class="form-control" @bind="_task.Name" placeholder="@Localizer.GetString("EnterTaskName", "Task")"/>
                                </div>

                                <div class="form-group">
                                    <label>@Localizer.GetString("Description", "Task")</label>
                                    <textarea class="form-control" @bind="_task.Description"
                                              placeholder="@Localizer.GetString("EnterTaskDescription", "Task")" style="height: 200px"></textarea>
                                </div>

                                <div class="form-group">
                                    <label>@Localizer.GetString("Priority", "Task")</label>
                                    <select class="form-control" @bind="_task.Priority">
                                        @foreach (var value in Enum.GetValues(typeof(TaskPriority)))
                                        {
                                            <option value="@value">@value</option>
                                        }
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label>@Localizer.GetString("Status", "Task")</label>
                                    <select class="form-control" @bind="_task.TaskStatus">
                                        @foreach (var value in Enum.GetValues<TaskStatus>().Take(_task.CreatedBy.Id == _userViewModel.Id ? 4 : 3))
                                        {
                                            <option value="@value">@value</option>
                                        }
                                    </select>
                                </div>

                                <div class="task-edit-buttons">
                                    <button class="btn save-btn" @onclick="Save">@Localizer.GetString("Save", "Task")</button>
                                    <button class="btn cancel-btn" @onclick="() => SetTab(Tab.View)">@Localizer.GetString("Cancel", "Task")</button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                    break;

                case Tab.History:
                    <div class="task-details-window">
                        <div class="task-history">
                            <h4>@Localizer.GetString("TaskHistory", "Task")</h4>
                            <div class="history-list">
                                <div class="history-item">
                                    <p><b>@Localizer.GetString("User", "Task")</b> John Doe</p>
                                    <p><b>@Localizer.GetString("Date", "Task")</b> 2025-03-20 14:30</p>
                                    <p><b>@Localizer.GetString("Change", "Task")</b> Changed status to "Work"</p>
                                </div>
                                <div class="history-item">
                                    <p><b>@Localizer.GetString("User", "Task")</b> Jane Smith</p>
                                    <p><b>@Localizer.GetString("Date", "Task")</b> 2025-03-21 09:15</p>
                                    <p><b>@Localizer.GetString("Change", "Task")</b> Updated description</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    break;
            }
        </div>
    </div>
}

@code {
    private bool _isLoading = true;
    private ProjectTaskViewModel? _task;
    private (string, byte[])? _attachedFile;
    private string _newTaskInfoDescription = string.Empty;
    private int _newTaskInfoTimeSpentHours = 0;
    private int _newTaskInfoTimeSpentMinutes = 0;
    private UserViewModel? _createdUserViewModel;
    private UserViewModel? _userViewModel;
    private Dictionary<int, UserViewModel> _userViewModels = [];

    [Parameter] public int Id { get; set; }

    private Tab CurrentTab = Tab.View;

    private enum Tab { View, Edit, History }

    protected override async Task OnInitializedAsync()
    {
        _task = await ProjectTaskPageService.GetValueAsync(Id);
        var userIds = new List<int>
        {
            _task.CreatedBy.Id,
            _task.CompanyUser?.Id ?? throw new Exception("Database inconsistency: CompanyUser cannot be null")
        };

        var userViewModels = await ProjectTaskPageService.GetUsersAsync(userIds);
        _createdUserViewModel = userViewModels.FirstOrDefault(c => c.Id == _task.CreatedBy.Id);
        _userViewModel = userViewModels.FirstOrDefault(c => c.Id == _task.CompanyUser?.Id);

        var taskInfosIds = _task.TaskInfos.Select(c => c.Id).ToList();
        if (taskInfosIds.Any())
        {
            _task.TaskInfos = await ProjectTaskPageService.GetTaskInfoAsync(taskInfosIds);
            var taskInfoCreatedByIds = _task.TaskInfos.Select(c => c.CreatedBy.Id).ToList();
            var taskInfoCreatedBy = await ProjectTaskPageService.GetUsersAsync(taskInfoCreatedByIds);
            foreach (var createdBy in taskInfoCreatedBy)
            {
                _userViewModels[createdBy.Id] = createdBy;
            }
        }

        _isLoading = false;
    }

    private string GetPriorityLabel(TaskPriority? priority)
    {
        return priority switch
        {
            TaskPriority.Low => "Low Priority",
            TaskPriority.Middle => "Middle Priority",
            TaskPriority.High => "High Priority",
            _ => "Unknown Priority"
        };
    }

    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "#6c757d",
            TaskPriority.Middle => "#ffc107",
            TaskPriority.High => "#dc3545",
            _ => "#000000"
        };
    }

    private string GetStatusColor(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.ToDo => "#6c757d",
            TaskStatus.Work => "#007bff",
            TaskStatus.Completed => "#28a745",
            _ => "#000000"
        };
    }

    private async Task AddNewTaskInfo()
    {
        var fileName = _attachedFile?.Item2 is null ? null : Guid.NewGuid().ToString();
        var taskInfo = new TaskInfoViewModel
        {
            ProjectTask = new BaseViewModel { Id = _task!.Id },
            File = fileName,
            Description = _newTaskInfoDescription,
            TimeSpent = TimeSpan.FromHours(_newTaskInfoTimeSpentHours) + TimeSpan.FromMinutes(_newTaskInfoTimeSpentMinutes)
        };

        await ProjectTaskPageService.AddTaskInfoAsync(taskInfo);

        if (fileName is not null)
        {
            var file = new FileViewModel
            {
                Name = fileName,
                Type = "png",
                Format = FileFormat.Image,
                ByteFormFile = _attachedFile?.Item2
            };
            await ProjectTaskPageService.UploadFileAsync(file);
        }

        _newTaskInfoDescription = string.Empty;
        _newTaskInfoTimeSpentHours = 0;
        _newTaskInfoTimeSpentMinutes = 0;
        _attachedFile = null;

        _task.TaskInfos = await ProjectTaskPageService.GetTaskInfoAsync(_task.TaskInfos.Select(ti => ti.Id).Append(taskInfo.Id).ToList());
        StateHasChanged();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        _attachedFile = (e.File.Name, ms.ToArray());
    }

    private string GetUserProfileLink(int? userId) => $"/account/{userId}";

    private async Task Save()
    {
        if (_task != null)
        {
            await ProjectTaskPageService.UpdateValueAsync(_task);
            SetTab(Tab.View);
        }
    }

    private void RemoveAttachedFile()
    {
        _attachedFile = null;
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync("document.querySelector('input[type=file]').click");
    }

    private void SetTab(Tab tab)
    {
        CurrentTab = tab;
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;
}

<style>
    .task-background {
        background-color: #f0f0f0;
        padding: 50px;
        border-radius: 10px;
        margin-bottom: 100px;
        max-width: 800px;
        justify-self: center;
    }

    .task-header {
        margin-bottom: 20px;
    }

    .tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .tab-button {
        padding: 10px 20px;
        background-color: #e0e0e0;
        border: none;
        border-radius: 8px 8px 0 0;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .tab-button.active {
        background-color: #007bff;
        color: white;
    }

    .tab-button:hover:not(.active) {
        background-color: #d0d0d0;
    }

    .tab-content {
        background-color: white;
        border-radius: 0 8px 8px 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .task-details-window {
        padding: 20px;
        border-radius: 8px;
    }

    .task-people img {
        object-fit: cover;
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }

    .task-edit-buttons button {
        margin-right: 10px;
        border-radius: 8px;
    }

    .save-btn {
        background-color: #28a745;
        color: #fff;
    }

    .cancel-btn {
        background-color: #6c757d;
        color: #fff;
    }

    .task-info-card {
        background-color: #f9f9f9;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.05);
    }

    .add-task-info textarea {
        border-radius: 8px;
        padding: 10px;
        width: 100%;
        resize: vertical;
    }

    .add-info-btn {
        background-color: #007bff;
        color: #fff;
        border-radius: 8px;
        padding: 10px 20px;
    }

    .task-info-input-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .time-select-group {
        display: flex;
        gap: 10px;
    }

    .time-select-group select {
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ced4da;
        background-color: #fff;
        width: 100px;
    }

    .upload-and-add {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-top: 10px;
    }

    .upload-icon {
        font-size: 24px;
        color: #007bff;
        cursor: pointer;
        transition: color 0.3s;
    }

    .upload-icon:hover {
        color: #0056b3;
    }

    .attached-files {
        margin-top: 20px;
    }

    .attached-files ul {
        list-style-type: none;
        padding: 0;
    }

    .attached-files li {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .attached-files li button {
        margin-left: 10px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ced4da;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
    }

    .task-edit-form {
        padding: 20px;
        background-color: white;
        border-radius: 8px;
    }

    .task-edit-buttons {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }

    .task-history {
        padding: 20px;
    }

    .history-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .history-item {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }
</style>