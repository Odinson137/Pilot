@page "/task/{Id:int}"
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.Contracts.Data.Enums
@using TaskStatus = Pilot.Contracts.Data.Enums.TaskStatus
@using Pilot.BlazorClient.Components.Pages.User
@using Pilot.BlazorClient.Components.Helpers
@inject IProjectTaskPageService ProjectTaskPageService;

<PageTitle>Task @(_task?.Id ?? 0)</PageTitle>

<AuthCheck/>

@if (_isLoading)
{
    <Loading/>
}
else if (_task == null)
{
    <p>User not found.</p>
}
else
{
    <div class="task-background" style="max-width: 800px; justify-self: center">
        <div class="task-header">
            <h2>@_task?.Id) Task Details: @_task?.Name</h2>

            <!-- Переключатель редактирования -->
            <div class="edit-toggle">
                <input type="checkbox" id="edit-mode-toggle" @bind="@_isEditMode"/>
                <label for="edit-mode-toggle"></label>
            </div>
        </div>

        @if (!_isEditMode)
        {
            <!-- Режим просмотра задачи -->
            <div class="task-details-window">
                <div class="task-main-info">
                    <!-- Название и описание задачи -->
                    <h3>@_task!.Name</h3>
                    <p>@_task.Description</p>

                    <!-- Ответственный за задачу и создатель -->
                    <div class="task-people">
                        <div class="task-owner">
                            <b>Assigned to:</b>
                            <a href="@GetUserProfileLink(_task?.CompanyUser?.Id)">
                                <img src="@_userViewModel?.Avatar" style="max-width: 30px;max-height: 30px"
                                     alt="avatar"/>
                                @_userViewModel?.FullName
                            </a>
                        </div>
                        <div class="task-creator">
                            <b>Created by:</b>
                            <a href="@GetUserProfileLink(_task?.CreatedBy?.Id)">
                                <img src="@_createdUserViewModel?.Avatar" style="max-width: 30px;max-height: 30px"
                                     alt="avatar"/>
                                @_createdUserViewModel?.FullName
                            </a>
                        </div>
                    </div>

                    <!-- Приоритет и статус задачи -->
                    <div class="task-status-priority">
                        <p style="color: @GetPriorityColor(_task.Priority)">
                            <b>Priority:</b> @GetPriorityLabel(_task.Priority)
                        </p>
                        <p style="color: @GetStatusColor(_task.TaskStatus)">
                            <b>Status:</b> @_task.TaskStatus
                        </p>
                        <p>
                            <b>Created on:</b> @_task.CreateAt
                        </p>
                    </div>

                    <!-- Добавление новой информации -->
                    <div class="add-task-info">
                        <h4>Add new progress update</h4>
                        <textarea @bind="_newTaskInfoDescription" style="height: 150px"
                                  placeholder="Enter task update"></textarea>
                        @if (_attachedFile != null)
                        {
                            <div class="attached-files">
                                <h5>Attached Files:</h5>
                                <ul>
                                    <li>
                                        @_attachedFile.Value.Item1
                                        <button class="btn btn-danger btn-sm" @onclick="RemoveAttachedFile">Remove
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        }
                        <label class="upload-label">
                            <InputFile OnChange="HandleFileUpload" multiple />
                            Upload Photo
                        </label>
                        <button class="btn add-info-btn" @onclick="AddNewTaskInfo">Add Update</button>
                    </div>

                    <!-- Информация о ходе выполнения задачи -->
                    <div class="task-progress">
                        <h4>Task Progress</h4>
                        @if (_task?.TaskInfos is { Count: > 0 })
                        {
                            @foreach (var info in _task.TaskInfos)
                            {
                                <div class="task-info-card">
                                    <p>@info.Description</p>
                                    @if (info.File != null)
                                    {
                                        <img src="@info.File" alt="file" style="margin-bottom: 20px; width: 200px"/>
                                    }
                                    <p>
                                        <b>Added by:</b> @_userViewModels[info.CreatedBy.Id].FullName
                                    </p>
                                    <p>
                                        <b>Date:</b> @info.CreateAt
                                    </p>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No progress updates yet.</p>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="task-details-window" style="min-width: 500px">
                <EditForm Model="_task">
                    <div class="task-edit-form">
                        <div class="form-group">
                            <label>Task Name:</label>
                            <input class="form-control" @bind="_task.Name" placeholder="Enter task name"/>
                        </div>

                        <div class="form-group">
                            <label>Description:</label>
                            <textarea class="form-control" @bind="_task.Description"
                                      placeholder="Enter task description" style="height: 200px"></textarea>
                        </div>

                        <div class="form-group">
                            <label>Priority:</label>
                            <select class="form-control" @bind="_task.Priority">
                                @foreach (var value in Enum.GetValues(typeof(TaskPriority)))
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Status:</label>
                            <select class="form-control" @bind="_task.TaskStatus">
                                @foreach (var value in Enum.GetValues<TaskStatus>().Take(_task.CreatedBy.Id == _userViewModel.Id ? 4 : 3).ToList())
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        </div>

                        <div class="task-edit-buttons">
                            <button class="btn save-btn" @onclick="Save">Save</button>
                            <button class="btn cancel-btn" @onclick="ToggleEditMode">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        }
    </div>
}

@code {
    private bool _isLoading = true;
    private ProjectTaskViewModel? _task;
    private TaskInfoViewModel? _taskInfo;
    private (string, byte[])? _attachedFile;
    private string? _errorMessage;

    private string _newTaskInfoDescription = string.Empty;

    private UserViewModel? _createdUserViewModel;
    private UserViewModel? _userViewModel;
    private Dictionary<int, UserViewModel> _userViewModels = [];

    [Parameter] public int Id { get; set; }

    private bool _isEditMode;

    protected override async Task OnInitializedAsync()
    {
        _task = await ProjectTaskPageService.GetValueAsync(Id);
        var userIds = new List<int>
        {
            _task.CreatedBy.Id,
            _task.CompanyUser?.Id ?? throw new Exception("Что-то не так было с записью в бд, потому что при получении это значение не может быть null")
        };

        var userViewModels = await ProjectTaskPageService.GetUsersAsync(userIds);
        _createdUserViewModel = userViewModels.FirstOrDefault(c => c.Id == _task.CreatedBy.Id);
        _userViewModel = userViewModels.FirstOrDefault(c => c.Id == _task.CompanyUser?.Id);

        var taskInfosIds = _task.TaskInfos.Select(c => c.Id).ToList();
        if (taskInfosIds.Any())
        {
            _task.TaskInfos = await ProjectTaskPageService.GetTaskInfoAsync(taskInfosIds);
            var taskInfoCreatedByIds = _task.TaskInfos.Select(c => c.CreatedBy.Id).ToList();

            var taskInfoCreatedBy = await ProjectTaskPageService.GetUsersAsync(taskInfoCreatedByIds);
            foreach (var createdBy in taskInfoCreatedBy)
            {
                _userViewModels[createdBy.Id] = createdBy;
            }
        }

        _isLoading = false;
    }

    private string GetPriorityLabel(TaskPriority? priority)
    {
        return priority switch
        {
            TaskPriority.Low => "Low Priority",
            TaskPriority.Middle => "Middle Priority",
            TaskPriority.High => "High Priority",
            _ => "Unknown Priority"
        };
    }

    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "#6c757d",
            TaskPriority.Middle => "#ffc107",
            TaskPriority.High => "#dc3545",
            _ => "#000000"
        };
    }

    private string GetStatusColor(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.ToDo => "#6c757d",
            TaskStatus.Work => "#007bff",
            TaskStatus.Completed => "#28a745",
            _ => "#000000"
        };
    }

    private async Task AddNewTaskInfo()
    {
        var taskInfo = new TaskInfoViewModel
        {
            ProjectTask = new BaseViewModel {Id = _task!.Id},
            Description = _newTaskInfoDescription,
            FileBytes = _attachedFile?.Item2
        };

        await ProjectTaskPageService.AddTaskInfoAsync(taskInfo);
        
        // _task!.TaskInfos.Add(taskInfo);
        _newTaskInfoDescription = string.Empty;
        _attachedFile = null;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await using var stream = e.File.OpenReadStream(long.MaxValue); 
        using var ms = new MemoryStream();  
        await stream.CopyToAsync(ms);  
        var fileBytes = ms.ToArray();  
        
        _attachedFile = (e.File.Name, fileBytes);

    }

    private string GetUserProfileLink(int? userId) => $"/account/{userId}";

    private void ToggleEditMode()
    {
        _isEditMode = !_isEditMode;
    }

    private async Task Save()
    {
        if (_task != null)
        {
            await ProjectTaskPageService.UpdateValueAsync(_task);
            _isEditMode = false;
        }
    }

    private void RemoveAttachedFile()
    {
        _attachedFile = null;
    }

}

<style>
    .task-background {
        background-color: #f0f0f0;
        padding: 50px;
        border-radius: 10px;
        margin-bottom: 100px;
    }

    .task-details-window {
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    .task-people img {
        object-fit: cover;
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }

    .task-edit-buttons button {
        margin-right: 10px;
        border-radius: 8px;
    }

    .edit-btn {
        background-color: #007bff;
        color: #fff;
    }

    .save-btn {
        background-color: #28a745;
        color: #fff;
    }

    .cancel-btn {
        background-color: #6c757d;
        color: #fff;
    }

    .delete-btn {
        background-color: #dc3545;
        color: #fff;
    }

    .task-info-card {
        background-color: #f9f9f9;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.05);
    }

    .add-task-info textarea {
        border-radius: 8px;
        padding: 10px;
        width: 100%;
    }

    .add-info-btn {
        background-color: #007bff;
        color: #fff;
        border-radius: 8px;
    }

    .upload-label {
        display: inline-block;
        padding: 10px 15px;
        background-color: #007bff;
        color: #fff;
        border-radius: 5px;
        cursor: pointer;
        margin-right: 10px;
    }

    .upload-label input {
        display: none;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ced4da;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
    }

    .task-edit-form {
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .task-edit-buttons {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }

    .save-btn {
        background-color: #28a745;
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .cancel-btn {
        background-color: #6c757d;
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .save-btn:hover, .cancel-btn:hover {
        opacity: 0.9;
    }

    .task-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .edit-toggle {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 26px;
    }

    .edit-toggle input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .edit-toggle label {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        border-radius: 34px;
        transition: background-color 0.4s;
    }

    .edit-toggle label:before {
        position: absolute;
        content: "";
        left: 2px;
        height: 15px;
        width: 15px;
        bottom: 2px;
        background-color: white;
        border-radius: 50%;
        transition: transform 0.4s;
    }

    .edit-toggle input:checked + label {
        background-color: #28a745;
    }

    .edit-toggle input:checked + label:before {
        transform: translateX(32px);
    }

    .edit-toggle:hover:before {
        content: "EditMode";
        position: absolute;
        top: -30px;
        right: 0;
        background-color: #000;
        color: #fff;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
    }

    .attached-files {
        margin-top: 20px;
    }

    .attached-files ul {
        list-style-type: none;
        padding: 0;
    }

    .attached-files li {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .attached-files li button {
        margin-left: 10px;
    }
</style>