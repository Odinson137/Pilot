@page "/Work"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.BlazorClient.Components.Pages.User
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.Data
@inject IWorkPageService WorkPageService
@inject ProtectedSessionStorage ProtectedSessionStorage;
@inject IUserService UserService
@inject NavigationManager NavigationManager;

<PageTitle>Work</PageTitle>

<AuthCheck/>

@if (_isLoading)
{
    <Loading/>
}
else
{
    <div class="work-container">
        <aside class="work-sidebar">
            <div class="project-menu">
                <ul>
                    @if (_projects is { Count: > 0 })
                    {
                        <h5 @onclick="ClearProject" style="cursor: pointer">Projects:</h5>
                        @foreach (var project in _projects)
                        {
                            <li style="padding: 5px">
                                <span @onclick="() => NavigateToProject(project.Id)">@project.Name</span>
                            </li>
                        }
                    }
                    else
                    {
                        <li>No projects</li>
                    }
                </ul>
            </div>
        </aside>

        <section class="content-wrapper">
            <nav class="nav-menu">
                <ul>
                    @if (_companyUser == null)
                    {
                        <li @onclick="() => SetActiveTab(0)" class="@GetActiveClass(1)">
                            Main
                        </li>
                    }
                    else
                    {
                        <li @onclick="() => SetActiveTab(1)" class="@GetActiveClass(1)">
                            Main
                        </li>
                        <li @onclick="() => SetActiveTab(2)" class="@GetActiveClass(2)">
                            Summary
                        </li>
                        <li @onclick="() => SetActiveTab(3)" class="@GetActiveClass(3)">
                            Tasks
                        </li>
                        <li @onclick="() => SetActiveTab(5)" class="@GetActiveClass(5)">
                            Projects
                        </li>
                        <li @onclick="() => SetActiveTab(6)" class="@GetActiveClass(6)">
                            Teams
                        </li>
                        <li @onclick="() => SetActiveTab(7)" class="@GetActiveClass(7)">
                            Employees
                        </li>
                        <li @onclick="() => SetActiveTab(8)" class="@GetActiveClass(8)">
                            Vacancy
                        </li>
                        <li @onclick="() => SetActiveTab(10)" class="@GetActiveClass(10)">
                            Applications
                        </li>
                    }
                </ul>
            </nav>

            <main class="work-main">
                @if (_user != null)
                {
                    @switch (_activeTab)
                    {
                        case 0:
                            <NoCompany/>
                            break;
                        case 1:
                            <UserGreeting UserName="@_user.UserName" UserId="@_user.Id"/>
                            break;
                        case 2:
                            <Summary UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id"></Summary>
                            break;
                        case 3:
                            <UserTask UserId="@_user.Id" ProjectId="@_projectId"/>
                            break;
                        case 5:
                            <Projects UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id"/>
                            break;
                        case 6:
                            <Teams UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id"/>
                            break;
                        case 7:
                            <Employees UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id"/>
                            break;
                        case 8:
                            <Vacancy UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id"/>
                            break;
                        case 10:
                            <Applications UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id"/>
                            break;
                    }
                }
            </main>
        </section>
    </div>
}

@code {
    private int _activeTab = 1;
    private bool _isLoading = true;

    private UserViewModel? _user;
    private CompanyUserViewModel? _companyUser;

    private ICollection<ProjectViewModel>? _projects;

    private int _projectId;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserService.GetCurrentUserAsync();

        try
        {
            _companyUser = await WorkPageService.GetUserCompanyAsync(_user.Id);
            _projects = await WorkPageService.GetProjectsAsync(_companyUser.Company.Id);
        }
        catch (Exception ex)
        {
            _activeTab = 0;
        }

        var currentTabStorageResult = await ProtectedSessionStorage.GetAsync<int>("work:currentTab");
        if (currentTabStorageResult.Success)
            _activeTab = currentTabStorageResult.Value;

        _isLoading = false;
    }

    private void SetActiveTab(int tabId)
    {
        _activeTab = tabId;
        ProtectedSessionStorage.SetAsync("work:currentTab", tabId);
    }

    private string GetActiveClass(int tabId)
    {
        return _activeTab == tabId ? "active" : string.Empty;
    }

    private void NavigateToProject(int projectId)
    {
        _projectId = projectId;
        ProtectedSessionStorage.SetAsync(ClientConstants.SelectProject, projectId);

        if (_activeTab == 3)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private void ClearProject()
    {
        ProtectedSessionStorage.DeleteAsync(ClientConstants.SelectProject);

        if (_activeTab == 3)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

}

<style>
    .work-container {
        display: flex;
        height: 90vh;
        width: 100%;
        margin-bottom: 50px;
    }

    .content-wrapper {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .nav-menu ul {
        list-style-type: none;
        padding: 0;
        display: flex;
    }

    .nav-menu li {
        margin-right: 20px;
    }

    .nav-menu {
        cursor: pointer;
        text-decoration: none;
        color: #2980b9;
    }

    .active {
        font-weight: bold;
        color: #1a5276;
    }

    .nav-menu a:hover {
        text-decoration: underline;
    }

    .work-sidebar {
        margin: 0 10px;
        padding: 10px;
        border-radius: 15px;
        width: 150px;
        background-color: #34495e;
        color: #fff;
    }

    .work-main {
        flex-grow: 1;
        padding: 20px;
        border-radius: 15px;
        background-color: #deeaed;
        display: flex;
        flex-direction: column;
    }

    .project-menu {
        width: 250px;
        color: #fff; /* Изменен цвет текста */
    }

    .project-menu ul {
        list-style-type: none;
        padding-left: 0;
    }

    .project-menu li {
        padding: 5px;
        cursor: pointer;
    }

    .team-item:hover {
        color: #9acbff;
    }

    .work-main {
        overflow-y: auto; /* Включаем вертикальную прокрутку */
    }
</style>