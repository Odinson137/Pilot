@page "/Work"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.ViewModels.UserViewModels
@using Pilot.BlazorClient.Components.Pages.User
@using Pilot.BlazorClient.Components.Helpers
@using Pilot.BlazorClient.Data
@inject IWorkPageService WorkPageService
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Work</PageTitle>

<AuthCheck />

@if (_isLoading)
{
    <Loading />
}
else
{
    <div class="work-container">
        <nav class="work-nav">
            <ul>
                @if (_companyUser == null)
                {
                    <li @onclick="() => SetActiveTab(0)" class="@GetActiveClass(0)">Join or Create Company</li>
                }
                else
                {
                    <li @onclick="() => SetActiveTab(1)" class="@GetActiveClass(1)">Dashboard</li>
                    <li @onclick="() => SetActiveTab(2)" class="@GetActiveClass(2)">Summary</li>
                    <li @onclick="() => SetActiveTab(3)" class="@GetActiveClass(3)">Tasks</li>
                    <li @onclick="() => SetActiveTab(7)" class="@GetActiveClass(7)">Employees</li>
                    <li @onclick="() => SetActiveTab(8)" class="@GetActiveClass(8)">Vacancies</li>
                    <li @onclick="() => SetActiveTab(10)" class="@GetActiveClass(10)">Applications</li>
                    <li @onclick="() => SetActiveTab(11)" class="@GetActiveClass(11)">TaskManagement</li>
                }
            </ul>
        </nav>

        @if (_user != null)
        {
            @switch (_activeTab)
            {
                case 0:
                    <NoCompany />
                    break;
                case 1:
                    <UserGreeting UserName="@_user.UserName" UserId="@_user.Id" />
                    break;
                case 2:
                    <Summary UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
                case 3:
                    <UserTask UserId="@_user.Id" ProjectId="@_projectId" />
                    break;
                case 5:
                    <Projects UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
                case 6:
                    <Teams UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
                case 7:
                    <Employees UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
                case 8:
                    <Vacancy UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
                case 10:
                    <Applications UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
                case 11:
                    <TaskManagement UserId="@_user.Id" CompanyId="@_companyUser!.Company.Id" />
                    break;
            }
        }
    </div>
}

@code {
    private int _activeTab = 1;
    private bool _isLoading = true;
    private UserViewModel? _user;
    private CompanyUserViewModel? _companyUser;
    private ICollection<ProjectViewModel>? _projects;
    private int _projectId;
    private int _taskCount;
    private int _teamCount;
    private int _vacancyCount;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserService.GetCurrentUserAsync();

        try
        {
            _companyUser = await WorkPageService.GetUserCompanyAsync(_user.Id);
            _projects = await WorkPageService.GetProjectsAsync(_companyUser.Company.Id);
            _taskCount = (await WorkPageService.GetUserTasksAsync(new List<int>(), null)).Count;
            _teamCount = (await WorkPageService.GetCompanyEmployeesAsync(_companyUser.Company.Id)).Count;
            _vacancyCount = (await WorkPageService.GetPostsAsync(_companyUser.Company.Id)).Count;
        }
        catch
        {
            _activeTab = 0;
        }

        var currentTabStorageResult = await ProtectedSessionStorage.GetAsync<int>("work:currentTab");
        if (currentTabStorageResult.Success)
            _activeTab = currentTabStorageResult.Value;

        var projectStorageResult = await ProtectedSessionStorage.GetAsync<int>(ClientConstants.SelectProject);
        if (projectStorageResult.Success)
            _projectId = projectStorageResult.Value;

        _isLoading = false;
    }

    private void SetActiveTab(int tabId)
    {
        _activeTab = tabId;
        ProtectedSessionStorage.SetAsync("work:currentTab", tabId);
        StateHasChanged();
    }

    private string GetActiveClass(int tabId)
    {
        return _activeTab == tabId ? "active" : "";
    }

    private async Task HandleProjectChange(ChangeEventArgs e)
    {
        _projectId = int.Parse(e.Value?.ToString() ?? "0");
        if (_projectId == 0)
            await ProtectedSessionStorage.DeleteAsync(ClientConstants.SelectProject);
        else
            await ProtectedSessionStorage.SetAsync(ClientConstants.SelectProject, _projectId);

        if (_activeTab == 3)
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}

<style>
    /* Main container */
    .work-container {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background-color: var(--bg-light);
        padding: 0;
    }

    /* Header */
    .work-header {
        background: var(--gradient);
        color: white;
        padding: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: var(--card-shadow);
        position: relative;
        z-index: 10;
    }

    .work-title {
        color: black;
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .project-selector {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: none;
        font-size: 1rem;
        background-color: rgba(255, 255, 255, 0.9);
        color: var(--text-primary);
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .project-selector:focus {
        outline: none;
        background-color: white;
    }

    /* Navigation */
    .work-nav {
        background-color: var(--bg-white);
        padding: 1rem 2rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .work-nav ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
        display: flex;
        gap: 2rem;
    }

    .work-nav li {
        font-size: 1.1rem;
        color: var(--text-secondary);
        cursor: pointer;
        padding: 0.5rem 1rem;
        transition: color 0.3s ease, background-color 0.3s ease;
    }

    .work-nav li:hover {
        color: var(--primary-color);
        background-color: rgba(0, 0, 0, 0.05);
        border-radius: 8px;
    }

    .work-nav li.active {
        color: var(--primary-color);
        font-weight: 600;
        border-bottom: 3px solid var(--primary-color);
    }

    /* Main content */
    .work-main {
        flex-grow: 1;
        padding: 2rem;
        background-color: var(--bg-light);
    }

    /* Dashboard grid */
    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .dashboard-card {
        background-color: var(--bg-white);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: var(--card-shadow);
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .dashboard-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .dashboard-card h3 {
        font-size: 1.5rem;
        color: var(--text-primary);
        margin-bottom: 1rem;
    }

    .dashboard-card p {
        font-size: 1.2rem;
        color: var(--text-secondary);
        margin-bottom: 1.5rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
        border: none;
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
</style>