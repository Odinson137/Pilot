@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart
@using Pilot.BlazorClient.Interface
@inject ISummaryPageService SummaryPageService
@inject IWorkPageService WorkPageService
@inject IUserService UserService
@inject IJsonLocalizationService Localizer
@using ChartJs.Blazor.Util
@using Pilot.BlazorClient.Service
@using Pilot.Contracts.Data.Enums
@using TaskStatus = Pilot.Contracts.Data.Enums.ProjectTaskStatus

@if (_isLoading)
{
    <div>Loading...</div>
}
else if (_isAdmin)
{
    <h1>@Localizer.GetString("CompanyPerformanceTitle", "Summary")</h1>
    <p>@Localizer.GetString("CompanyPerformanceDescription", "Summary")</p>

    <div class="charts-container">
        <div class="chart-item">
            <h4>@Localizer.GetString("CompletedTasksByEmployees", "Summary")</h4>
            @if (_employeeTasksConfig != null)
            {
                <Chart Config="_employeeTasksConfig" />
            }
        </div>
        <div class="chart-item">
            <h4>@Localizer.GetString("TaskDistributionByPriority", "Summary")</h4>
            @if (_companyPriorityConfig != null)
            {
                <Chart Config="_companyPriorityConfig" />
            }
        </div>
    </div>
}
else
{
    <h1>@Localizer.GetString("PersonalSummaryTitle", "Summary")</h1>
    <p>@Localizer.GetString("PersonalSummaryDescription", "Summary")</p>

    <div class="daily-hours">
        <h3>@Localizer.GetString("DailyHoursWorked", "Summary")</h3>
        <div class="chart-item full-width">
            @if (_dailyHoursConfig != null)
            {
                <Chart Config="_dailyHoursConfig" />
            }
        </div>
    </div>

    <div class="personal-summary">
        <h3>@Localizer.GetString("TaskOverview", "Summary")</h3>
        <div class="charts-container">
            <div class="chart-item">
                <h4>@Localizer.GetString("TaskCategories", "Summary")</h4>
                @if (_categoryConfig != null)
                {
                    <Chart Config="_categoryConfig" />
                }
            </div>
            <div class="chart-item">
                <h4>@Localizer.GetString("TaskPriorities", "Summary")</h4>
                @if (_priorityConfig != null)
                {
                    <Chart Config="_priorityConfig" />
                }
            </div>
            <div class="chart-item">
                <h4>@Localizer.GetString("TaskStatus", "Summary")</h4>
                @if (_statusConfig != null)
                {
                    <Chart Config="_statusConfig" />
                }
            </div>
        </div>

        <h3>@Localizer.GetString("ContributionOverview", "Summary")</h3>
        <div class="charts-container">
            @foreach (var projectConfig in _projectContributionConfigs)
            {
                <div class="chart-item">
                    <h4>@projectConfig.Value.Item2</h4>
                    <Chart Config="projectConfig.Value.Item1" />
                </div>
            }
        </div>

        <div class="report-section">
            <h3>@Localizer.GetString("GenerateReport", "Summary")</h3>
            <button class="btn btn-primary" @onclick="GenerateWordReport">Word</button>
            <button class="btn btn-success" @onclick="GenerateExcelReport">Excel</button>
        </div>
    </div>
}

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int CompanyId { get; set; }

    private bool _isLoading = true;
    private bool _isAdmin;
    private LineConfig? _dailyHoursConfig;
    private PieConfig? _categoryConfig;
    private PieConfig? _priorityConfig;
    private PieConfig? _statusConfig;
    private Dictionary<int, (PieConfig, string)> _projectContributionConfigs = new();
    private PieConfig? _employeeTasksConfig;
    private PieConfig? _companyPriorityConfig;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetCurrentUserAsync();
        _isAdmin = currentUser.Role is Role.Owner or Role.Director;

        if (_isAdmin)
        {
            await InitializeCompanyCharts();
        }
        else
        {
            await InitializePersonalCharts();
        }
        _isLoading = false;
    }

    private async Task InitializePersonalCharts()
    {
        await InitializeProjectContributionCharts();
        await InitializeDailyHoursChart();
        await InitializeCategoryChart();
        await InitializePriorityChart();
        await InitializeStatusChart();
    }

    private async Task InitializeCompanyCharts()
    {
        await InitializeEmployeeTasksChart();
        await InitializeCompanyPriorityChart();
    }

    private async Task InitializeDailyHoursChart()
    {
        _dailyHoursConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true
            }
        };

        var random = new Random();
        var days = Enumerable.Range(1, 7).Select(i => $"День {i}").ToList();
        var hours = Enumerable.Range(1, 7).Select(_ => random.Next(1, 10)).ToList();

        foreach (var day in days)
        {
            _dailyHoursConfig.Data.Labels.Add(day);
        }

        _dailyHoursConfig.Data.Datasets.Add(new LineDataset<int>(hours)
        {
            Label = "Часы работы",
            BorderColor = "#4a90e2",
            BackgroundColor = "#4a90e230",
            Fill = true
        });
    }

    private async Task InitializeCategoryChart()
    {
        var userTasks = await WorkPageService.GetUserProjectTasksAsync(UserId);
        var completed = userTasks.Count(t => t.TaskStatus == TaskStatus.Completed);
        var inProgress = userTasks.Count(t => t.TaskStatus == TaskStatus.Work);
        var pending = userTasks.Count(t => t.TaskStatus == TaskStatus.ToDo);

        _categoryConfig = new PieConfig
        {
            Options = new PieOptions { Responsive = true }
        };

        foreach (var value in new[] { "Завершенные", "В процессе", "Ожидающие" })
        {
            _categoryConfig.Data.Labels.Add(value);
        }

        _categoryConfig.Data.Datasets.Add(new PieDataset<int>(new[] { completed, inProgress, pending })
        {
            BackgroundColor = new[] { "#4BC0C0", "#FF9F40", "#9966FF" }
        });
    }

    private async Task InitializePriorityChart()
    {
        var userTasks = await WorkPageService.GetUserProjectTasksAsync(UserId);
        var high = userTasks.Count(t => t is { Priority: TaskPriority.High, TaskStatus: TaskStatus.Completed });
        var medium = userTasks.Count(t => t is { Priority: TaskPriority.Normal, TaskStatus: TaskStatus.Completed });
        var low = userTasks.Count(t => t is { Priority: TaskPriority.Low, TaskStatus: TaskStatus.Completed });

        _priorityConfig = new PieConfig
        {
            Options = new PieOptions { Responsive = true }
        };

        foreach (var value in new[] { "Высокий", "Средний", "Низкий" })
        {
            _priorityConfig.Data.Labels.Add(value);
        }

        _priorityConfig.Data.Datasets.Add(new PieDataset<int>(new[] { high, medium, low })
        {
            BackgroundColor = new[] { "#FF6384", "#FFCD56", "#36A2EB" }
        });
    }

    private async Task InitializeStatusChart()
    {
        var userTasks = await WorkPageService.GetUserProjectTasksAsync(UserId);
        var completed = userTasks.Count(t => t.TaskStatus == TaskStatus.Completed);
        var inProgress = userTasks.Count(t => t.TaskStatus == TaskStatus.Work);
        var remaining = userTasks.Count(t => t.TaskStatus == TaskStatus.ToDo);

        _statusConfig = new PieConfig
        {
            Options = new PieOptions { Responsive = true }
        };

        foreach (var value in new[] { "Завершено", "В процессе", "Осталось" })
        {
            _statusConfig.Data.Labels.Add(value);
        }

        _statusConfig.Data.Datasets.Add(new PieDataset<int>(new[] { completed, inProgress, remaining })
        {
            BackgroundColor = new[] { "#4BC0C0", "#FF9F40", "#9966FF" }
        });
    }

    private async Task InitializeProjectContributionCharts()
    {
        var allProjects = await WorkPageService.GetProjectsAsync(CompanyId);
        var tasks = await WorkPageService.GetCompanyTasksAsync(CompanyId);
        await WorkPageService.FillProjectsIntoTeamsAsync(tasks);

        // Группируем задачи по проектам
        var projectTasks = tasks.GroupBy(t => t.Team.Project)
            .Select(g => new 
            { 
                Project = g.Key, 
                UserCompletedTasks = g.Count(t => t.CompanyUser.Id == UserId && t.TaskStatus == TaskStatus.Completed),
                TotalTasks = g.Count()
            })
            .ToList();

        _projectContributionConfigs.Clear();
        foreach (var project in allProjects)
        {
            var projectTask = projectTasks.FirstOrDefault(pt => pt.Project.Id == project.Id);
            var userCompleted = projectTask?.UserCompletedTasks ?? 0;
            var totalTasks = projectTask?.TotalTasks ?? 0;
            var othersCompleted = totalTasks - userCompleted;

            var config = new PieConfig
            {
                Options = new PieOptions { Responsive = true }
            };
            
            foreach (var value in new[] { "Ваш вклад", "Остальные" })
                config.Data.Labels.Add(value);

            config.Data.Datasets.Add(new PieDataset<int>([userCompleted, othersCompleted])
            {
                BackgroundColor = new[] { "#4BC0C0", "#FF9F40" }
            });

            _projectContributionConfigs[project.Id] = (config, project.Name);
        }

        StateHasChanged();
    }

    private async Task InitializeEmployeeTasksChart()
    {
        var allTasks = await WorkPageService.GetCompanyTasksAsync(CompanyId);
        var employeeTasks = allTasks.GroupBy(t => t.CompanyUser.Id)
            .Select(g => new { EmployeeId = g.Key, CompletedTasks = g.Count(t => t.TaskStatus == TaskStatus.Completed) })
            .ToList();

        _employeeTasksConfig = new PieConfig
        {
            Options = new PieOptions { Responsive = true }
        };

        var labels = employeeTasks.Select(e => $"Сотрудник {e.EmployeeId}").ToList();
        var data = employeeTasks.Select(e => e.CompletedTasks).ToList();

        foreach (var label in labels)
        {
            _employeeTasksConfig.Data.Labels.Add(label);
        }

        _employeeTasksConfig.Data.Datasets.Add(new PieDataset<int>(data)
        {
            BackgroundColor = data.Select((_, i) => ColorUtil.ColorHexString((byte)(80 + i * 40), 160, (byte)(220 - i * 25))).ToArray()
        });
    }

    private async Task InitializeCompanyPriorityChart()
    {
        var allTasks = await WorkPageService.GetCompanyTasksAsync(CompanyId);
        var high = allTasks.Count(t => t.Priority == TaskPriority.High);
        var medium = allTasks.Count(t => t.Priority == TaskPriority.Normal);
        var low = allTasks.Count(t => t.Priority == TaskPriority.Low);

        _companyPriorityConfig = new PieConfig
        {
            Options = new PieOptions { Responsive = true }
        };

        foreach (var value in new[] { "Высокий", "Средний", "Низкий" })
        {
            _companyPriorityConfig.Data.Labels.Add(value);
        }

        _companyPriorityConfig.Data.Datasets.Add(new PieDataset<int>(new[] { high, medium, low })
        {
            BackgroundColor = new[] { "#FF6384", "#FFCD56", "#36A2EB" }
        });
    }

    private async Task GenerateWordReport()
    {
        var userTasks = await WorkPageService.GetUserProjectTasksAsync(UserId);
        var completed = userTasks.Count(t => t.TaskStatus == TaskStatus.Completed);
        var content = $"Personal Summary Report\n\nCompleted Tasks: {completed}\nIn Progress: {userTasks.Count(t => t.TaskStatus == TaskStatus.Work)}\nPending: {userTasks.Count(t => t.TaskStatus == TaskStatus.ToDo)}";

        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
        await JSRuntime.InvokeVoidAsync("saveAsFile", "SummaryReport.docx", Convert.ToBase64String(bytes));
    }

    private async Task GenerateExcelReport()
    {
        var userTasks = await WorkPageService.GetUserProjectTasksAsync(UserId);
        var completed = userTasks.Count(t => t.TaskStatus == TaskStatus.Completed);
        var content = $"Task Status,Count\nCompleted,{completed}\nIn Progress,{userTasks.Count(t => t.TaskStatus == TaskStatus.Work)}\nPending,{userTasks.Count(t => t.TaskStatus == TaskStatus.ToDo)}";

        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
        await JSRuntime.InvokeVoidAsync("saveAsFile", "SummaryReport.csv", Convert.ToBase64String(bytes));
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;
}