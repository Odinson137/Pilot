@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@inject IWorkPageService WorkPageService
@inject IUserService UserService

<div class="user-greeting">
    <h2>@GetGreetingMessage(), @UserName! 🌟</h2>

    @if (_companyUser != null)
    {
        <p>You have been working at <strong>@_companyUser.Company.Title</strong> for <strong>@_daysInCompany</strong> days.</p>
        @if (_projects != null && _teams != null)
        {
            <p>You are participating in <strong>@_projects.Count</strong> project(s) and are a member of <strong>@_teams.Count</strong> teams:</p>

            <ul>
                @foreach (var team in _teams)
                {
                    <li>
                        <strong>Team:</strong> @team.Name
                    </li>
                }
            </ul>
        }
    }
</div>

@code {
    [Parameter] public string? UserName { get; set; }
    [Parameter] public int UserId { get; set; }

    private CompanyUserViewModel? _companyUser;
    private int _daysInCompany;
    private ICollection<ProjectViewModel>? _projects;
    private ICollection<TeamViewModel>? _teams;

    protected override async Task OnInitializedAsync()
    {
        _companyUser = await WorkPageService.GetUserCompanyAsync(UserId);

        _daysInCompany = (DateTime.Now - _companyUser.CreateAt!.Value).Days;

        _teams = await WorkPageService.GetUserTeamsAsync(_companyUser.Teams);

        var projectIds = _teams.Select(c => c.Project.Id).Distinct().ToList();
        _projects = await WorkPageService.GetUserProjectsAsync(projectIds);

        Console.WriteLine("Greeting loaded");
    }

    private string GetGreetingMessage()
    {
        var hour = DateTime.Now.Hour;
        return hour < 12 ? "Good morning" :
            hour < 18 ? "Good afternoon" : "Good evening";
    }
}