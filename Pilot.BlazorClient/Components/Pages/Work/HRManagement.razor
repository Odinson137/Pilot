@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.Service
@using Pilot.BlazorClient.ViewModels
@using Pilot.Contracts.Data.Enums
@using Pilot.BlazorClient.Components.Helpers
@inject IHrManagementPageService HrManagementPageService
@inject IJsonLocalizationService Localizer
@inject NavigationManager NavigationManager

<div class="hr-management-container">
    <div class="hr-header">
        <button class="btn btn-back" @onclick="GoBack">
            <span class="material-icons">arrow_back</span> @Localizer.GetString("Back", "HRManagement")
        </button>
        <h2>@Localizer.GetString("HRManagementTitle", "HRManagement")</h2>
        <div class="hr-tabs">
            <button class="tab-button @(_activeSubTab == SubTab.Positions ? "active" : "")" @onclick="() => SetSubTab(SubTab.Positions)">
                @Localizer.GetString("Positions", "HRManagement")
            </button>
            <button class="tab-button @(_activeSubTab == SubTab.Vacancies ? "active" : "")" @onclick="() => SetSubTab(SubTab.Vacancies)">
                @Localizer.GetString("Vacancies", "HRManagement")
            </button>
            <button class="tab-button @(_activeSubTab == SubTab.Applications ? "active" : "")" @onclick="() => SetSubTab(SubTab.Applications)">
                @Localizer.GetString("Applications", "HRManagement")
            </button>
        </div>
    </div>

    @if (_isLoading)
    {
        <Loading/>
    }
    else
    {
        @switch (_activeSubTab)
        {
            case SubTab.Positions:
                <div class="positions-section">
                    <div class="section-header">
                        <h3>@Localizer.GetString("PositionsTitle", "HRManagement")</h3>
                        <button class="btn btn-add" @onclick="ShowAddPositionForm">
                            <span class="material-icons">add</span> @Localizer.GetString("AddPosition", "HRManagement")
                        </button>
                    </div>
                    @if (_positions.Any())
                    {
                        <div class="positions-grid">
                            @foreach (var position in _positions)
                            {
                                <div class="position-card">
                                    <h3>@position.Title</h3>
                                    <p>@(position.Description?.Length > 100 ? position.Description[..100] + "..." : position.Description)</p>
                                    <div class="skills">
                                        @if (position.Skills.Any())
                                        {
                                            foreach (var skill in position.Skills)
                                            {
                                                <span class="skill-tag">@skill.Title</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="no-skills">@Localizer.GetString("NoSkills", "HRManagement")</span>
                                        }
                                    </div>
                                    <div class="actions">
                                        <button class="btn btn-view" @onclick="() => ViewPosition(position)">
                                            <span class="material-icons">visibility</span> @Localizer.GetString("View", "HRManagement")
                                        </button>
                                        <button class="btn btn-edit" @onclick="() => ShowEditPositionForm(position)">
                                            <span class="material-icons">edit</span> @Localizer.GetString("Edit", "HRManagement")
                                        </button>
                                        <button class="btn btn-danger" @onclick="() => DeletePosition(position.Id)">
                                            <span class="material-icons">delete</span> @Localizer.GetString("Delete", "HRManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-positions">
                            <span class="material-icons">work_off</span>
                            <p>@Localizer.GetString("NoPositions", "HRManagement")</p>
                        </div>
                    }
                </div>
                break;
            case SubTab.Vacancies:
                <div class="vacancies-section">
                    <div class="section-header">
                        <h3>@Localizer.GetString("VacanciesTitle", "HRManagement")</h3>
                        <button class="btn btn-add" @onclick="ShowAddVacancyForm">
                            <span class="material-icons">add</span> @Localizer.GetString("AddVacancy", "HRManagement")
                        </button>
                    </div>
                    @if (_vacancies.Any())
                    {
                        <div class="vacancies-grid">
                            @foreach (var vacancy in _vacancies)
                            {
                                <div class="vacancy-card">
                                    <h3>@vacancy.Post.Title</h3>
                                    <p>@(vacancy.Post.Description?.Length > 100 ? vacancy.Post.Description[..100] + "..." : vacancy.Post.Description)</p>
                                    <span class="vacancy-status @(vacancy.IsOpen ? "open" : "closed")">
                                        @Localizer.GetString(vacancy.IsOpen ? "Open" : "Closed", "HRManagement")
                                    </span>
                                    <div class="actions">
                                        <button class="btn btn-view" @onclick="() => ViewVacancy(vacancy)">
                                            <span class="material-icons">visibility</span> @Localizer.GetString("View", "HRManagement")
                                        </button>
                                        <button class="btn btn-edit" @onclick="() => ShowEditVacancyForm(vacancy)">
                                            <span class="material-icons">edit</span> @Localizer.GetString("Edit", "HRManagement")
                                        </button>
                                        <button class="btn btn-danger" @onclick="() => DeleteVacancy(vacancy.Id)">
                                            <span class="material-icons">delete</span> @Localizer.GetString("Delete", "HRManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-vacancies">
                            <span class="material-icons">work_off</span>
                            <p>@Localizer.GetString("NoVacancies", "HRManagement")</p>
                        </div>
                    }
                </div>
                break;
            case SubTab.Applications:
                <div class="applications-section">
                    <div class="section-header">
                        <h3>@Localizer.GetString("ApplicationsTitle", "HRManagement")</h3>
                        <div class="filters">
                            <div class="search-box">
                                <input type="text" placeholder="@Localizer.GetString("SearchApplications", "HRManagement")" @bind="_searchTerm" @bind:event="oninput"/>
                                <span class="material-icons">search</span>
                            </div>
                            <select @bind="_statusFilter">
                                <option value="">@Localizer.GetString("AllStatuses", "HRManagement")</option>
                                @foreach (var status in Enum.GetValues<ApplicationStatus>())
                                {
                                    <option value="@status">@Localizer.GetString(status.ToString(), "HRManagement")</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="applications-grid">
                        @if (_filteredApplications.Any())
                        {
                            @foreach (var application in _filteredApplications)
                            {
                                <div class="application-card">
                                    <div class="applicant-info">
                                        <div class="avatar">
                                            @if (application.User != null && !string.IsNullOrEmpty(application.User.AvatarImage))
                                            {
                                                <img src="@TempFileService.GetUrl(application.User.AvatarImage)" alt="@application.User.Name"/>
                                            }
                                            else
                                            {
                                                <img src="Images/Account/default-avatar.jpg" alt="Default Avatar"/>
                                            }
                                        </div>
                                        <div class="details">
                                            <h3>@(application.User?.Name ?? "Unknown")</h3>
                                            <p>@application.CompanyPost.Post.Title</p>
                                            <span class="application-date">@Localizer.GetString("Applied", "HRManagement"): @application.CreateAt!.Value.ToShortDateString()</span>
                                        </div>
                                    </div>
                                    <div class="application-status @application.Status.ToString().ToLower()">
                                        @Localizer.GetString(application.Status.ToString(), "HRManagement")
                                    </div>
                                    <div class="actions">
                                        <button class="btn btn-view" @onclick="() => ViewApplication(application)">
                                            <span class="material-icons">visibility</span> @Localizer.GetString("View", "HRManagement")
                                        </button>
                                        <button class="btn btn-status" @onclick="() => ShowUpdateStatusForm(application)">
                                            <span class="material-icons">edit</span> @Localizer.GetString("UpdateStatus", "HRManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-applications">
                                <span class="material-icons">inbox</span>
                                <p>@Localizer.GetString("NoApplications", "HRManagement")</p>
                            </div>
                        }
                    </div>
                </div>
                break;
        }
    }

    @if (_showAddPositionForm || _showEditPositionForm)
    {
        <div class="modal-overlay">
            <div class="modal-card">
                <h3>@(_showAddPositionForm ? Localizer.GetString("AddPosition", "HRManagement") : Localizer.GetString("EditPosition", "HRManagement"))</h3>
                <EditForm Model="_positionModel" OnValidSubmit="SavePosition">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>@Localizer.GetString("Title", "HRManagement")</label>
                        <InputText @bind-Value="_positionModel.Title" class="form-input"/>
                        <ValidationMessage For="@(() => _positionModel.Title)"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Description", "HRManagement")</label>
                        <InputTextArea @bind-Value="_positionModel.Description" class="form-textarea"/>
                        <ValidationMessage For="@(() => _positionModel.Description)"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Skills", "HRManagement")</label>
                        <InputSelectMultiple @bind-Value="_selectedSkillIds" class="form-select">
                            @foreach (var skill in _availableSkills)
                            {
                                <option value="@skill.Id">@skill.Title</option>
                            }
                        </InputSelectMultiple>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-save">@Localizer.GetString("Save", "HRManagement")</button>
                        <button type="button" class="btn btn-cancel" @onclick="HidePositionForm">@Localizer.GetString("Cancel", "HRManagement")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (_showAddVacancyForm || _showEditVacancyForm)
    {
        <div class="modal-overlay">
            <div class="modal-card">
                <h3>@(_showAddVacancyForm ? Localizer.GetString("AddVacancy", "HRManagement") : Localizer.GetString("EditVacancy", "HRManagement"))</h3>
                <EditForm Model="_vacancyModel" OnValidSubmit="SaveVacancy">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>@Localizer.GetString("Position", "HRManagement")</label>
                        <InputSelect @bind-Value="_vacancyModel.PostId" class="form-select">
                            <option value="0" disabled selected>@Localizer.GetString("SelectPosition", "HRManagement")</option>
                            @foreach (var position in _positions)
                            {
                                <option value="@position.Id">@position.Title</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => _vacancyModel.PostId)"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("AdditionalRequirements", "HRManagement")</label>
                        <InputTextArea @bind-Value="_vacancyModel.AdditionalRequirements" class="form-textarea"/>
                        <ValidationMessage For="@(() => _vacancyModel.AdditionalRequirements)"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("IsOpen", "HRManagement")</label>
                        <InputCheckbox @bind-Value="_vacancyModel.IsOpen" class="form-checkbox"/>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-save">@Localizer.GetString("Save", "HRManagement")</button>
                        <button type="button" class="btn btn-cancel" @onclick="HideVacancyForm">@Localizer.GetString("Cancel", "HRManagement")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (_showUpdateStatusForm)
    {
        <div class="modal-overlay">
            <div class="modal-card">
                <h3>@Localizer.GetString("UpdateStatus", "HRManagement")</h3>
                <EditForm Model="_applicationModel" OnValidSubmit="UpdateApplicationStatus">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>@Localizer.GetString("Status", "HRManagement")</label>
                        <InputSelect @bind-Value="_applicationModel.Status" class="form-select">
                            @foreach (var status in Enum.GetValues<ApplicationStatus>())
                            {
                                <option value="@status">@Localizer.GetString(status.ToString(), "HRManagement")</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => _applicationModel.Status)"/>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-save">@Localizer.GetString("Save", "HRManagement")</button>
                        <button type="button" class="btn btn-cancel" @onclick="HideUpdateStatusForm">@Localizer.GetString("Cancel", "HRManagement")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (_showViewApplication)
    {
        <div class="modal-overlay">
            <div class="modal-card">
                <h3>@Localizer.GetString("ApplicationDetails", "HRManagement")</h3>
                <div class="application-details">
                    <p><strong>@Localizer.GetString("Applicant", "HRManagement"):</strong> @(_viewApplication.User?.Name ?? "Unknown")</p>
                    <p><strong>@Localizer.GetString("Vacancy", "HRManagement"):</strong> @_viewApplication.CompanyPost.Post.Title</p>
                    <p><strong>@Localizer.GetString("Status", "HRManagement"):</strong> @Localizer.GetString(_viewApplication.Status.ToString(), "HRManagement")</p>
                    <p><strong>@Localizer.GetString("Applied", "HRManagement"):</strong> @_viewApplication.CreateAt!.Value.ToShortDateString()</p>
                    <p><strong>@Localizer.GetString("Message", "HRManagement"):</strong> @(_viewApplication.Message ?? Localizer.GetString("NoMessage", "HRManagement"))</p>
                    @if (!string.IsNullOrEmpty(_viewApplication.ResumeFileId))
                    {
                        <p>
                            <strong>@Localizer.GetString("Resume", "HRManagement"):</strong>
                            <a href="@TempFileService.GetUrl(_viewApplication.ResumeFileId)" target="_blank">@Localizer.GetString("DownloadResume", "HRManagement")</a>
                        </p>
                    }
                </div>
                <div class="form-actions">
                    <button class="btn btn-cancel" @onclick="HideViewApplication">@Localizer.GetString("Close", "HRManagement")</button>
                </div>
            </div>
        </div>
    }

    @if (_showViewPosition)
    {
        <div class="modal-overlay">
            <div class="modal-card">
                <h3>@Localizer.GetString("PositionDetails", "HRManagement")</h3>
                <div class="position-details">
                    <p><strong>@Localizer.GetString("Title", "HRManagement"):</strong> @_viewPosition.Title</p>
                    <p><strong>@Localizer.GetString("Description", "HRManagement"):</strong> @(_viewPosition.Description ?? Localizer.GetString("NoDescription", "HRManagement"))</p>
                    <p><strong>@Localizer.GetString("Skills", "HRManagement"):</strong>
                        @if (_viewPosition.Skills.Any())
                        {
                            foreach (var skill in _viewPosition.Skills)
                            {
                                <span class="skill-tag">@skill.Title</span>
                            }
                        }
                        else
                        {
                            @Localizer.GetString("NoSkills", "HRManagement")
                        }
                    </p>
                </div>
                <div class="form-actions">
                    <button class="btn btn-cancel" @onclick="HideViewPosition">@Localizer.GetString("Close", "HRManagement")</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int CompanyId { get; set; }

    private enum SubTab { Positions, Vacancies, Applications }
    private SubTab _activeSubTab = SubTab.Positions;
    private bool _isLoading = true;
    private ICollection<PostViewModel> _positions = [];
    private ICollection<CompanyPostViewModel> _vacancies = [];
    private ICollection<JobApplicationViewModel> _applications = [];
    private ICollection<JobApplicationViewModel> _filteredApplications = [];
    private ICollection<SkillViewModel> _availableSkills = [];
    private bool _showAddPositionForm;
    private bool _showEditPositionForm;
    private bool _showAddVacancyForm;
    private bool _showEditVacancyForm;
    private bool _showUpdateStatusForm;
    private bool _showViewApplication;
    private bool _showViewPosition;
    private PostViewModel _positionModel = new();
    private CompanyPostViewModel _vacancyModel = new();
    private JobApplicationViewModel _applicationModel = new();
    private JobApplicationViewModel _viewApplication = new();
    private PostViewModel _viewPosition = new();
    private ICollection<int> _selectedSkillIds = [];
    private string _searchTerm = "";
    private ApplicationStatus? _statusFilter;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            _positions = await HrManagementPageService.GetPositionsAsync(CompanyId);
            _vacancies = await HrManagementPageService.GetPostsAsync(CompanyId);
            _applications = await HrManagementPageService.GetCompanyJobApplicationsAsync(CompanyId);
            _availableSkills = await HrManagementPageService.GetAvailableSkillsAsync();
            UpdateFilteredApplications();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Load error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void SetSubTab(SubTab tab)
    {
        _activeSubTab = tab;
        _searchTerm = "";
        _statusFilter = null;
        UpdateFilteredApplications();
    }

    private void ShowAddPositionForm()
    {
        _positionModel = new PostViewModel { CompanyId = CompanyId };
        _selectedSkillIds = [];
        _showAddPositionForm = true;
    }

    private void ShowEditPositionForm(PostViewModel position)
    {
        _positionModel = new PostViewModel
        {
            Id = position.Id,
            Title = position.Title,
            Description = position.Description,
            CompanyId = position.CompanyId
        };
        _selectedSkillIds = position.Skills.Select(s => s.Id).ToList();
        _showEditPositionForm = true;
    }

    private void HidePositionForm()
    {
        _showAddPositionForm = false;
        _showEditPositionForm = false;
        _positionModel = new();
        _selectedSkillIds = [];
    }

    private async Task SavePosition()
    {
        try
        {
            _positionModel.Skills = _availableSkills.Where(s => _selectedSkillIds.Contains(s.Id)).ToList();
            if (_showAddPositionForm)
            {
                await HrManagementPageService.AddPositionAsync(_positionModel);
            }
            else
            {
                await HrManagementPageService.UpdatePositionAsync(_positionModel);
            }
            _positions = await HrManagementPageService.GetPositionsAsync(CompanyId);
            HidePositionForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Save position error: {ex.Message}");
        }
    }

    private async Task DeletePosition(int positionId)
    {
        try
        {
            await HrManagementPageService.DeletePositionAsync(positionId);
            _positions = await HrManagementPageService.GetPositionsAsync(CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Delete position error: {ex.Message}");
        }
    }

    private void ViewPosition(PostViewModel position)
    {
        _viewPosition = position;
        _showViewPosition = true;
    }

    private void HideViewPosition()
    {
        _showViewPosition = false;
        _viewPosition = new();
    }

    private void ShowAddVacancyForm()
    {
        _vacancyModel = new CompanyPostViewModel { Post = new PostViewModel { CompanyId = CompanyId }, IsOpen = true };
        _showAddVacancyForm = true;
    }

    private void ShowEditVacancyForm(CompanyPostViewModel vacancy)
    {
        _vacancyModel = new CompanyPostViewModel
        {
            Id = vacancy.Id,
            PostId = vacancy.Post.Id,
            IsOpen = vacancy.IsOpen,
            AdditionalRequirements = vacancy.AdditionalRequirements
        };
        _showEditVacancyForm = true;
    }

    private void HideVacancyForm()
    {
        _showAddVacancyForm = false;
        _showEditVacancyForm = false;
        _vacancyModel = new();
    }

    private async Task SaveVacancy()
    {
        try
        {
            if (_showAddVacancyForm)
            {
                await HrManagementPageService.AddPostAsync(_vacancyModel);
            }
            else
            {
                await HrManagementPageService.UpdatePostAsync(_vacancyModel);
            }
            _vacancies = await HrManagementPageService.GetPostsAsync(CompanyId);
            HideVacancyForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Save vacancy error: {ex.Message}");
        }
    }

    private async Task DeleteVacancy(int vacancyId)
    {
        try
        {
            await HrManagementPageService.DeletePostAsync(vacancyId);
            _vacancies = await HrManagementPageService.GetPostsAsync(CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Delete vacancy error: {ex.Message}");
        }
    }

    private void ViewVacancy(CompanyPostViewModel vacancy)
    {
        // Можно добавить модальное окно для просмотра деталей вакансии
    }

    private void ShowUpdateStatusForm(JobApplicationViewModel application)
    {
        _applicationModel = new JobApplicationViewModel
        {
            Id = application.Id,
            Status = application.Status
        };
        _showUpdateStatusForm = true;
    }

    private void HideUpdateStatusForm()
    {
        _showUpdateStatusForm = false;
        _applicationModel = new();
    }

    private async Task UpdateApplicationStatus()
    {
        try
        {
            await HrManagementPageService.UpdateApplicationStatusAsync(_applicationModel);
            _applications = await HrManagementPageService.GetCompanyJobApplicationsAsync(CompanyId);
            UpdateFilteredApplications();
            HideUpdateStatusForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Update status error: {ex.Message}");
        }
    }

    private void ViewApplication(JobApplicationViewModel application)
    {
        _viewApplication = application;
        _showViewApplication = true;
    }

    private void HideViewApplication()
    {
        _showViewApplication = false;
        _viewApplication = new();
    }

    private void UpdateFilteredApplications()
    {
        _filteredApplications = _applications.Where(a =>
            (string.IsNullOrEmpty(_searchTerm) ||
             a.User?.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
             a.CompanyPost.Post.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) == true) &&
            (!_statusFilter.HasValue || a.Status == _statusFilter.Value)
        ).ToList();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/Work");
    }
}

<style>
    :root {
        --primary: #007bff;
        --success: #28a745;
        --danger: #dc3545;
        --secondary: #6c757d;
        --light: #f8f9fa;
        --bg-white: #ffffff;
        --text-primary: #333;
        --text-secondary: #666;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .hr-management-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 20px;
        background: var(--bg-white);
        border-radius: 15px;
        box-shadow: var(--shadow);
        animation: fadeIn 0.5s ease-out;
    }

    .hr-header {
        display: flex;
        align-items: center;
        gap: 20px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .hr-tabs {
        display: flex;
        gap: 10px;
    }

    .tab-button {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        background: var(--light);
        color: var(--text-primary);
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
    }

    .tab-button:hover {
        background: var(--primary);
        color: #fff;
    }

    .tab-button.active {
        background: var(--primary);
        color: #fff;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .section-header h3 {
        font-size: 1.6rem;
        color: var(--text-primary);
    }

    .positions-grid, .vacancies-grid, .applications-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .position-card, .vacancy-card, .application-card {
        background: var(--bg-white);
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: var(--transition);
    }

    .position-card:hover, .vacancy-card:hover, .application-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .position-card h3, .vacancy-card h3, .application-card h3 {
        font-size: 1.4rem;
        color: var(--primary);
        margin: 0 0 10px;
    }

    .position-card p, .vacancy-card p, .application-card p {
        font-size: 0.95rem;
        color: var(--text-secondary);
        margin: 5px 0;
    }

    .skills {
        margin: 10px 0;
    }

    .skill-tag {
        display: inline-block;
        padding: 5px 10px;
        margin: 5px;
        background: #e9ecef;
        border-radius: 12px;
        font-size: 0.9rem;
        color: var(--text-primary);
    }

    .no-skills {
        font-style: italic;
        color: var(--text-secondary);
    }

    .vacancy-status {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .vacancy-status.open {
        background: #d4edda;
        color: #155724;
    }

    .vacancy-status.closed {
        background: #f8d7da;
        color: #721c24;
    }

    .applicant-info {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .avatar img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
    }

    .application-status {
        padding: 5px 10px;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
        text-align: center;
    }

    .application-status.pending {
        background: #fff3cd;
        color: #856404;
    }

    .application-status.accepted {
        background: #d4edda;
        color: #155724;
    }

    .application-status.rejected {
        background: #f8d7da;
        color: #721c24;
    }

    .actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 10px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-back {
        background: linear-gradient(90deg, var(--secondary), #9ca3af);
        color: #fff;
    }

    .btn-back:hover {
        background: linear-gradient(90deg, #5a6268, var(--secondary));
    }

    .btn-add {
        background: linear-gradient(90deg, var(--primary), #60a5fa);
        color: #fff;
    }

    .btn-add:hover {
        background: linear-gradient(90deg, #0056b3, var(--primary));
    }

    .btn-view {
        background: linear-gradient(90deg, #17a2b8, #2bc4de);
        color: #fff;
    }

    .btn-view:hover {
        background: linear-gradient(90deg, #138496, #17a2b8);
    }

    .btn-edit, .btn-status {
        background: linear-gradient(90deg, #17a2b8, #2bc4de);
        color: #fff;
    }

    .btn-edit:hover, .btn-status:hover {
        background: linear-gradient(90deg, #138496, #17a2b8);
    }

    .btn-danger {
        background: linear-gradient(90deg, var(--danger), #f87171);
        color: #fff;
    }

    .btn-danger:hover {
        background: linear-gradient(90deg, #c82333, var(--danger));
    }

    .btn-save {
        background: linear-gradient(90deg, var(--success), #34d399);
        color: #fff;
    }

    .btn-save:hover {
        background: linear-gradient(90deg, #059669, var(--success));
    }

    .btn-cancel {
        background: linear-gradient(90deg, var(--secondary), #9ca3af);
        color: #fff;
    }

    .btn-cancel:hover {
        background: linear-gradient(90deg, #5a6268, var(--secondary));
    }

    .filters {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .search-box {
        position: relative;
    }

    .search-box input {
        padding: 10px 40px 10px 15px;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        width: 200px;
    }

    .search-box input:focus {
        border-color: var(--primary);
        outline: none;
    }

    .search-box .material-icons {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-secondary);
    }

    select {
        padding: 10px;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        background: #fff;
        cursor: pointer;
    }

    select:focus {
        border-color: var(--primary);
        outline: none;
    }

    .no-positions, .no-vacancies, .no-applications {
        text-align: center;
        padding: 40px;
        color: var(--text-secondary);
        font-size: 1.2rem;
    }

    .no-positions .material-icons, .no-vacancies .material-icons, .no-applications .material-icons {
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-card {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 20px;
        max-width: 600px;
        width: 90%;
        box-shadow: var(--shadow);
        animation: slideIn 0.3s ease-out;
    }

    .modal-card h3 {
        font-size: 1.6rem;
        color: var(--text-primary);
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        display: block;
        margin-bottom: 5px;
    }

    .form-input, .form-textarea, .form-select {
        width: 100%;
        padding: 10px;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .form-textarea {
        min-height: 100px;
        resize: vertical;
    }

    .form-input:focus, .form-textarea:focus, .form-select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
        outline: none;
    }

    .form-checkbox {
        margin-top: 10px;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .application-details p, .position-details p {
        margin: 10px 0;
        font-size: 1rem;
        color: var(--text-primary);
    }

    .application-details strong, .position-details strong {
        font-weight: 600;
        margin-right: 5px;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @@keyframes slideIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @@media (max-width: 768px) {
        .positions-grid, .vacancies-grid, .applications-grid {
            grid-template-columns: 1fr;
        }

        .hr-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .hr-tabs {
            width: 100%;
            justify-content: space-between;
        }

        .filters {
            flex-direction: column;
            align-items: flex-start;
        }

        .search-box input {
            width: 100%;
        }
    }
</style>