@page "/Work/HRManagement"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@using Pilot.BlazorClient.Service
@using Pilot.Contracts.Data.Enums
@using Pilot.Contracts.Services
@inject IHrManagementPageService HrManagementPageService
@inject IJsonLocalizationService Localizer
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStorage

<div class="hr-management-container">
    <div class="title-header">
        <h1>@Localizer.GetString("PageTitle", "HrManagement")</h1>
        <p class="subtitle">@Localizer.GetString("Subtitle", "HrManagement")</p>
    </div>

    @if (_errorMessage != null)
    {
        <div class="error-message">
            <span class="material-icons">error</span>
            @_errorMessage
        </div>
    }

    <nav class="hr-nav">
        <button class="tab-button @(_activeTab == 0 ? "active" : "")" @onclick="() => SetActiveTab(0)">
            <span class="material-icons">work</span> @Localizer.GetString("Positions", "HrManagement")
        </button>
        <button class="tab-button @(_activeTab == 1 ? "active" : "")" @onclick="() => SetActiveTab(1)">
            <span class="material-icons">assignment</span> @Localizer.GetString("Vacancies", "HrManagement")
        </button>
        <button class="tab-button @(_activeTab == 2 ? "active" : "")" @onclick="() => SetActiveTab(2)">
            <span class="material-icons">people</span> @Localizer.GetString("Applications", "HrManagement")
        </button>
    </nav>

    @if (_isLoading)
    {
        <div class="loading">
            <span class="material-icons spin">refresh</span> @Localizer.GetString("Loading", "HrManagement")
        </div>
    }
    else
    {
        <div class="tab-content">
            @switch (_activeTab)
            {
                case 0:
                    <div class="section-header">
                        <h2>@Localizer.GetString("ManagePositions", "HrManagement")</h2>
                        <button class="btn btn-add" @onclick="ShowCreatePostModal">
                            <span class="material-icons">add</span> @Localizer.GetString("CreatePosition", "HrManagement")
                        </button>
                    </div>
                    @if (_posts.Any())
                    {
                        <div class="card-grid">
                            @foreach (var post in _posts)
                            {
                                <div class="card">
                                    <h3>@post.Title</h3>
                                    <p>@(post.Description?.TakeOnly(100, "...") ?? Localizer.GetString("NoDescription", "HrManagement"))</p>
                                    <p><strong>@Localizer.GetString("Skills", "HrManagement"):</strong> @(string.Join(", ", post.Skills.Select(s => s.Title)))</p>
                                    <div class="card-actions">
                                        <button class="btn btn-edit" @onclick="() => ShowEditPostModal(post)">
                                            <span class="material-icons">edit</span> @Localizer.GetString("Edit", "HrManagement")
                                        </button>
                                        <button class="btn btn-delete" @onclick="() => DeletePost(post.Id)">
                                            <span class="material-icons">delete</span> @Localizer.GetString("Delete", "HrManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <span class="material-icons">work_off</span>
                            <p>@Localizer.GetString("NoPositions", "HrManagement")</p>
                        </div>
                    }
                    break;
                case 1:
                    <div class="section-header">
                        <h2>@Localizer.GetString("ManageVacancies", "HrManagement")</h2>
                        <button class="btn btn-add" @onclick="ShowCreateVacancyModal">
                            <span class="material-icons">add</span> @Localizer.GetString("CreateVacancy", "HrManagement")
                        </button>
                    </div>
                    @if (_vacancies.Any())
                    {
                        <div class="card-grid">
                            @foreach (var vacancy in _vacancies)
                            {
                                <div class="card">
                                    <h3>@vacancy.Post.Title</h3>
                                    <p>@(vacancy.AdditionalRequirements?.TakeOnly(100, "...") ?? Localizer.GetString("NoRequirements", "HrManagement"))</p>
                                    <div class="vacancy-status @(vacancy.IsOpen ? "open" : "closed")">
                                        @(vacancy.IsOpen ? Localizer.GetString("Open", "HrManagement") : Localizer.GetString("Closed", "HrManagement"))
                                    </div>
                                    <div class="card-actions">
                                        <button class="btn btn-edit" @onclick="() => ShowEditVacancyModal(vacancy)">
                                            <span class="material-icons">edit</span> @Localizer.GetString("Edit", "HrManagement")
                                        </button>
                                        <button class="btn btn-delete" @onclick="() => DeleteVacancy(vacancy.Id)">
                                            <span class="material-icons">delete</span> @Localizer.GetString("Delete", "HrManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <span class="material-icons">assignment_late</span>
                            <p>@Localizer.GetString("NoVacancies", "HrManagement")</p>
                        </div>
                    }
                    break;
                case 2:
                    <div class="section-header">
                        <h2>@Localizer.GetString("ManageApplications", "HrManagement")</h2>
                        <div class="filters">
                            <div class="search-box">
                                <input type="text" placeholder="@Localizer.GetString("SearchApplications", "HrManagement")" @bind-value="_searchTerm" @bind-value:event="oninput" @bind-value:after="FilterApplications"/>
                                <span class="material-icons">search</span>
                            </div>
                            <select @bind="_statusFilter" @bind:after="FilterApplications">
                                <option value="">@Localizer.GetString("AllStatuses", "HrManagement")</option>
                                @foreach (var status in Enum.GetValues(typeof(ApplicationStatus)))
                                {
                                    <option value="@status">@Localizer.GetString(status.ToString(), "HrManagement")</option>
                                }
                            </select>
                        </div>
                    </div>
                    @if (_filteredApplications.Any())
                    {
                        <div class="card-grid">
                            @foreach (var application in _filteredApplications)
                            {
                                <div class="application-card">
                                    <div class="applicant-info">
                                        <div class="avatar">
                                            @if (application.User?.AvatarImage != null)
                                            {
                                                <img src="@TempFileService.GetUrl(application.User.AvatarImage)" alt="@application.User.UserName"/>
                                            }
                                            else
                                            {
                                                <span class="material-icons">person</span>
                                            }
                                        </div>
                                        <div class="details">
                                            <h3>@application.User?.UserName</h3>
                                            <p>@application.CompanyPost.Post.Title</p>
                                            <span class="application-date">@Localizer.GetString("Applied", "HrManagement"): @application.CreateAt?.ToShortDateString()</span>
                                        </div>
                                    </div>
                                    <div class="application-status @application.Status.ToString().ToLower()">
                                        @Localizer.GetString(application.Status.ToString(), "HrManagement")
                                    </div>
                                    <div class="card-actions">
                                        <button class="btn btn-view" @onclick="() => ViewCandidate(application.User?.Id ?? 0)">
                                            <span class="material-icons">visibility</span> @Localizer.GetString("View", "HrManagement")
                                        </button>
                                        <button class="btn btn-status" @onclick="() => ShowUpdateStatusModal(application)">
                                            <span class="material-icons">edit</span> @Localizer.GetString("UpdateStatus", "HrManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <span class="material-icons">inbox</span>
                            <p>@Localizer.GetString("NoApplications", "HrManagement")</p>
                        </div>
                    }
                    break;
            }
        </div>
    }

    <!-- Modal for Creating/Editing Post -->
    @if (_showPostModal)
    {
        <div class="form-overlay">
            <div class="form-card">
                <h3>@(_editingPost == null ? Localizer.GetString("CreatePosition", "HrManagement") : Localizer.GetString("EditPosition", "HrManagement"))</h3>
                <EditForm Model="_newPost" OnValidSubmit="SavePost">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>@Localizer.GetString("Title", "HrManagement")</label>
                        <InputText @bind-Value="_newPost.Title" class="form-input" placeholder="@Localizer.GetString("TitlePlaceholder", "HrManagement")"/>
                        <ValidationMessage For="@(() => _newPost.Title)"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Description", "HrManagement")</label>
                        <InputTextArea @bind-Value="_newPost.Description" class="form-textarea" placeholder="@Localizer.GetString("DescriptionPlaceholder", "HrManagement")"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Skills", "HrManagement")</label>
                        <div class="skill-selector">
                            <InputSelect @bind-Value="_selectedSkill" class="form-select">
                                <option value="0">@Localizer.GetString("SelectSkill", "HrManagement")</option>
                                @foreach (var skill in _skills)
                                {
                                    <option value="@skill.Id">@skill.Title</option>
                                }
                            </InputSelect>
                            <button type="button" class="btn btn-action" style="width: 200px" @onclick="AddSkillToPost" disabled="@(_selectedSkill == 0)">
                                <span class="material-icons">add</span> @Localizer.GetString("AddSkill", "HrManagement")
                            </button>
                        </div>
                        <div class="selected-skills">
                            @foreach (var skill in _newPost.Skills)
                            {
                                <span class="skill-tag">
                                    @skill.Title
                                    <button type="button" class="remove-skill" @onclick="() => RemoveSkillFromPost(skill)">
                                        <span class="material-icons">close</span>
                                    </button>
                                </span>
                            }
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-save">@Localizer.GetString("Save", "HrManagement")</button>
                        <button type="button" class="btn btn-cancel" @onclick="ClosePostModal">@Localizer.GetString("Cancel", "HrManagement")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <!-- Modal for Creating/Editing Vacancy -->
    @if (_showVacancyModal)
    {
        <div class="form-overlay">
            <div class="form-card">
                <h3>@(_editingVacancy == null ? Localizer.GetString("CreateVacancy", "HrManagement") : Localizer.GetString("EditVacancy", "HrManagement"))</h3>
                <EditForm Model="_newVacancy" OnValidSubmit="SaveVacancy">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>@Localizer.GetString("Position", "HrManagement")</label>
                        <InputSelect @bind-Value="_newVacancy.PostId" class="form-select">
                            <option value="0">@Localizer.GetString("SelectPosition", "HrManagement")</option>
                            @foreach (var post in _posts)
                            {
                                <option value="@post.Id">@post.Title</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => _newVacancy.PostId)"/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Status", "HrManagement")</label>
                        <div class="form-check">
                            <InputCheckbox @bind-Value="_newVacancy.IsOpen" class="form-checkbox"/>
                            <label>@Localizer.GetString("IsOpen", "HrManagement")</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("AdditionalRequirements", "HrManagement")</label>
                        <InputTextArea @bind-Value="_newVacancy.AdditionalRequirements" class="form-textarea" placeholder="@Localizer.GetString("RequirementsPlaceholder", "HrManagement")"/>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-save">@Localizer.GetString("Save", "HrManagement")</button>
                        <button type="button" class="btn btn-cancel" @onclick="CloseVacancyModal">@Localizer.GetString("Cancel", "HrManagement")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <!-- Modal for Updating Application Status -->
    @if (_showStatusModal)
    {
        <div class="form-overlay">
            <div class="form-card">
                <h3>@Localizer.GetString("UpdateApplicationStatus", "HrManagement")</h3>
                <EditForm Model="_selectedApplication" OnValidSubmit="UpdateApplicationStatus">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>@Localizer.GetString("Applicant", "HrManagement")</label>
                        <InputText @bind-Value="_selectedApplication!.User!.UserName" class="form-input" disabled/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Position", "HrManagement")</label>
                        <InputText @bind-Value="_selectedApplication!.CompanyPost.Post.Title" class="form-input" disabled/>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.GetString("Status", "HrManagement")</label>
                        <InputSelect @bind-Value="_selectedApplication!.Status" class="form-select">
                            @foreach (var status in Enum.GetValues(typeof(ApplicationStatus)))
                            {
                                <option value="@status">@Localizer.GetString(status.ToString(), "HrManagement")</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-save">@Localizer.GetString("Save", "HrManagement")</button>
                        <button type="button" class="btn btn-cancel" @onclick="CloseStatusModal">@Localizer.GetString("Cancel", "HrManagement")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int CompanyId { get; set; }

    private int _activeTab;
    private bool _isLoading = true;
    private bool _showPostModal;
    private bool _showVacancyModal;
    private bool _showStatusModal;
    private string? _errorMessage;
    private string _searchTerm = "";
    private ApplicationStatus? _statusFilter = ApplicationStatus.Pending; // Default to Pending
    private PostViewModel _newPost = new();
    private CompanyPostViewModel _newVacancy = new();
    private JobApplicationViewModel? _selectedApplication;
    private PostViewModel? _editingPost;
    private CompanyPostViewModel? _editingVacancy;
    private List<PostViewModel> _posts = [];
    private List<CompanyPostViewModel> _vacancies = [];
    private List<JobApplicationViewModel> _applications = [];
    private List<JobApplicationViewModel> _filteredApplications = [];
    private List<SkillViewModel> _skills = [];
    private int _selectedSkill;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await FilterApplications(); // Apply default filter
        _isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            _posts = (await HrManagementPageService.GetPositionsAsync(CompanyId)).ToList();
            _vacancies = (await HrManagementPageService.GetPostsAsync(CompanyId)).ToList();
            _applications = (await HrManagementPageService.GetCompanyJobApplicationsAsync(CompanyId)).ToList();
            _skills = (await HrManagementPageService.GetAvailableSkillsAsync()).ToList();
            _filteredApplications = _applications;
        }
        catch (Exception ex)
        {
            _errorMessage = Localizer.GetString("LoadError", "HrManagement");
            Console.WriteLine($"Load error: {ex.Message}");
        }
    }

    private void SetActiveTab(int tabId)
    {
        _activeTab = tabId;
        ProtectedSessionStorage.SetAsync("hr:currentTab", tabId);
        StateHasChanged();
    }

    private async Task FilterApplications()
    {
        _filteredApplications = _applications;
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredApplications = _filteredApplications
                .Where(a => a.User?.UserName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) == true)
                .ToList();
        }
        if (_statusFilter.HasValue)
        {
            _filteredApplications = _filteredApplications
                .Where(a => a.Status == _statusFilter.Value)
                .ToList();
        }
        await Task.CompletedTask; // Ensure async compatibility
        StateHasChanged();
    }

    // Post CRUD Operations
    private void ShowCreatePostModal()
    {
        _newPost = new PostViewModel { CompanyId = CompanyId, Skills = [] };
        _editingPost = null;
        _selectedSkill = 0;
        _showPostModal = true;
    }

    private void ShowEditPostModal(PostViewModel post)
    {
        _newPost = new PostViewModel
        {
            Id = post.Id,
            Title = post.Title,
            Description = post.Description,
            CompanyId = post.CompanyId,
            Skills = post.Skills.ToList()
        };
        _editingPost = post;
        _selectedSkill = 0;
        _showPostModal = true;
    }

    private async Task SavePost()
    {
        try
        {
            if (_editingPost == null)
            {
                await HrManagementPageService.AddPositionAsync(_newPost);
            }
            else
            {
                await HrManagementPageService.UpdatePositionAsync(_newPost);
            }

            await Task.Delay(500);
            await LoadData();
            ClosePostModal();
        }
        catch (Exception ex)
        {
            _errorMessage = Localizer.GetString("SaveError", "HrManagement");
            Console.WriteLine($"Save post error: {ex.Message}");
        }
    }

    private async Task DeletePost(int postId)
    {
        try
        {
            await HrManagementPageService.DeletePostAsync(postId);
            await LoadData();
        }
        catch (Exception ex)
        {
            _errorMessage = Localizer.GetString("DeleteError", "HrManagement");
            Console.WriteLine($"Delete post error: {ex.Message}");
        }
    }

    private void AddSkillToPost()
    {
        var skill = _skills.FirstOrDefault(s => s.Id == _selectedSkill);
        if (skill != null && _newPost.Skills.All(s => s.Id != skill.Id))
        {
            _newPost.Skills.Add(skill);
            _selectedSkill = 0;
            StateHasChanged();
        }
    }

    private void RemoveSkillFromPost(SkillViewModel skill)
    {
        _newPost.Skills.Remove(skill);
        StateHasChanged();
    }

    private void ClosePostModal()
    {
        _showPostModal = false;
        _newPost = new();
        _editingPost = null;
        _selectedSkill = 0;
    }

    // Vacancy CRUD Operations
    private void ShowCreateVacancyModal()
    {
        _newVacancy = new CompanyPostViewModel { Post = new PostViewModel(), IsOpen = true };
        _editingVacancy = null;
        _showVacancyModal = true;
    }

    private void ShowEditVacancyModal(CompanyPostViewModel vacancy)
    {
        _newVacancy = new CompanyPostViewModel
        {
            Id = vacancy.Id,
            PostId = vacancy.PostId,
            Post = vacancy.Post,
            IsOpen = vacancy.IsOpen,
            AdditionalRequirements = vacancy.AdditionalRequirements
        };
        _editingVacancy = vacancy;
        _showVacancyModal = true;
    }

    private async Task SaveVacancy()
    {
        try
        {
            if (_editingVacancy == null)
            {
                await HrManagementPageService.AddPostAsync(_newVacancy);
            }
            else
            {
                await HrManagementPageService.UpdatePostAsync(_newVacancy);
            }
            await LoadData();
            CloseVacancyModal();
        }
        catch (Exception ex)
        {
            _errorMessage = Localizer.GetString("SaveError", "HrManagement");
            Console.WriteLine($"Save vacancy error: {ex.Message}");
        }
    }

    private async Task DeleteVacancy(int vacancyId)
    {
        try
        {
            await HrManagementPageService.DeletePositionAsync(vacancyId);
            await LoadData();
        }
        catch (Exception ex)
        {
            _errorMessage = Localizer.GetString("DeleteError", "HrManagement");
            Console.WriteLine($"Delete vacancy error: {ex.Message}");
        }
    }

    private void CloseVacancyModal()
    {
        _showVacancyModal = false;
        _newVacancy = new();
        _editingVacancy = null;
    }

    // Application Operations
    private void ViewCandidate(int userId)
    {
        if (userId > 0)
        {
            NavigationManager.NavigateTo($"/account/{userId}");
        }
    }

    private void ShowUpdateStatusModal(JobApplicationViewModel application)
    {
        _selectedApplication = new JobApplicationViewModel
        {
            Id = application.Id,
            User = application.User,
            CompanyPost = application.CompanyPost,
            Status = application.Status
        };
        _showStatusModal = true;
    }

    private async Task UpdateApplicationStatus()
    {
        try
        {
            if (_selectedApplication != null)
            {
                await HrManagementPageService.UpdateApplicationStatusAsync(_selectedApplication);
                await LoadData();
                await FilterApplications();
                CloseStatusModal();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = Localizer.GetString("SaveError", "HrManagement");
            Console.WriteLine($"Update application status error: {ex.Message}");
        }
    }

    private void CloseStatusModal()
    {
        _showStatusModal = false;
        _selectedApplication = null;
    }
}

<style>
    :root {
        --primary: #3b82f6;
        --secondary: #6b7280;
        --success: #10b981;
        --danger: #ef4444;
        --bg-light: #f3f4f6;
        --bg-white: #ffffff;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        --transition: all 0.3s ease;
    }

    .hr-management-container {
        width: 900px;
        margin: 2rem auto;
        padding: 2rem;
        background: linear-gradient(135deg, var(--bg-white), #e5e7eb);
        border-radius: 16px;
        box-shadow: var(--shadow);
        animation: fadeIn 0.5s ease-out;
    }

    .title-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    h1 {
        font-size: 2.5rem;
        font-weight: 800;
        background: linear-gradient(to right, var(--primary), #60a5fa);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
    }

    .subtitle {
        font-size: 1.1rem;
        color: var(--text-secondary);
        margin-top: 0.5rem;
    }

    .error-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: #fee2e2;
        border: 1px solid var(--danger);
        border-radius: 8px;
        color: var(--danger);
        font-size: 1rem;
        margin-bottom: 1.5rem;
    }

    .hr-nav {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-bottom: 2rem;
        background: var(--bg-light);
        padding: 0.5rem;
        border-radius: 12px;
    }

    .tab-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-secondary);
        background: none;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
    }

    .tab-button:hover {
        background: #e5e7eb;
    }

    .tab-button.active {
        background: var(--primary);
        color: #fff;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }

    .tab-content {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: var(--shadow);
        width: 100%;
        min-height: 400px;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .section-header h2 {
        font-size: 1.8rem;
        color: var(--text-primary);
        margin: 0;
    }

    .filters {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .search-box {
        position: relative;
        display: flex;
        align-items: center;
        background: var(--bg-light);
        border-radius: 8px;
        padding: 0.5rem;
    }

    .search-box input {
        border: none;
        background: none;
        font-size: 1rem;
        padding: 0.5rem;
        width: 200px;
    }

    .search-box input:focus {
        outline: none;
    }

    .search-box .material-icons {
        color: var(--text-secondary);
        right: 0.5rem;
    }

    select {
        padding: 0.5rem;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        background: var(--bg-white);
    }

    .card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
    }

    .card {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow);
        transition: var(--transition);
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.2);
    }

    .card h3 {
        font-size: 1.4rem;
        color: var(--text-primary);
        margin: 0 0 0.5rem;
    }

    .card p {
        font-size: 0.95rem;
        color: var(--text-secondary);
        margin: 0.5rem 0;
    }

    .vacancy-status {
        padding: 0.5rem 1rem;
        border-radius: 12px;
        font-size: 0.9rem;
        text-align: center;
        width: fit-content;
    }

    .vacancy-status.open {
        background: #d1fae5;
        color: #059669;
    }

    .vacancy-status.closed {
        background: #fee2e2;
        color: #dc2626;
    }

    .application-card {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        background: var(--bg-white);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow);
        transition: var(--transition);
    }

    .application-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.2);
    }

    .applicant-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--bg-light);
        overflow: hidden;
    }

    .avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .avatar .material-icons {
        font-size: 2rem;
        color: var(--text-secondary);
    }

    .details h3 {
        font-size: 1.2rem;
        color: var(--text-primary);
        margin: 0;
    }

    .details p {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin: 0.2rem 0;
    }

    .application-date {
        font-size: 0.85rem;
        color: var(--text-secondary);
    }

    .application-status {
        padding: 0.5rem 1rem;
        border-radius: 12px;
        font-size: 0.9rem;
        text-align: center;
        width: fit-content;
    }

    .application-status.pending {
        background: #fef3c7;
        color: #d97706;
    }

    .application-status.approved {
        background: #d1fae5;
        color: #059669;
    }

    .application-status.rejected {
        background: #fee2e2;
        color: #dc2626;
    }

    .card-actions {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border: none;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-add {
        background: linear-gradient(90deg, var(--primary), #60a5fa);
        color: #fff;
    }

    .btn-add:hover {
        background: linear-gradient(90deg, #2563eb, var(--primary));
    }

    .btn-view {
        background: var(--bg-light);
        color: var(--text-primary);
    }

    .btn-view:hover {
        background: #e5e7eb;
    }

    .btn-status {
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
        color: #fff;
    }

    .btn-status:hover {
        background: linear-gradient(90deg, #d97706, #f59e0b);
    }

    .btn-edit {
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
        color: #fff;
    }

    .btn-edit:hover {
        background: linear-gradient(90deg, #d97706, #f59e0b);
    }

    .btn-delete {
        background: linear-gradient(90deg, var(--danger), #f87171);
        color: #fff;
    }

    .btn-delete:hover {
        background: linear-gradient(90deg, #dc2626, var(--danger));
    }

    .btn-save {
        background: linear-gradient(90deg, var(--success), #34d399);
        color: #fff;
    }

    .btn-save:hover {
        background: linear-gradient(90deg, #059669, #10b981);
    }

    .btn-cancel {
        background: linear-gradient(90deg, var(--secondary), #9ca3af);
        color: #fff;
    }

    .btn-cancel:hover {
        background: linear-gradient(90deg, #4b5563, #6b7280);
    }

    .btn-action {
        background: var(--bg-light);
        color: var(--text-primary);
    }

    .btn-action:hover {
        background: #e5e7eb;
    }

    .no-data {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-secondary);
        text-align: center;
        padding: 2rem;
    }

    .no-data .material-icons {
        font-size: 3rem;
    }

    .loading {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        justify-content: center;
        font-size: 1.1rem;
        color: var(--text-secondary);
        padding: 2rem;
    }

    .spin {
        animation: spin 1s linear infinite;
    }

    .form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .form-card {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 2rem;
        max-width: 500px;
        width: 100%;
        box-shadow: var(--shadow);
        animation: slideIn 0.3s ease-out;
    }

    .form-card h3 {
        font-size: 1.6rem;
        color: var(--text-primary);
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        display: block;
        margin-bottom: 0.5rem;
    }

    .form-input,
    .form-textarea,
    .form-select {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .form-input:focus,
    .form-textarea:focus,
    .form-select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
        outline: none;
    }

    .form-textarea {
        min-height: 120px;
        resize: vertical;
    }

    .form-select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23333'%3E%3Cpath d='M7 10l5 5 5-5H7z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1.2rem;
        padding-right: 2.5rem;
    }

    .form-checkbox {
        margin-right: 0.5rem;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .skill-selector {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .selected-skills {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .skill-tag {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--bg-light);
        padding: 0.3rem 0.6rem;
        border-radius: 12px;
        font-size: 0.9rem;
        color: var(--text-primary);
    }

    .remove-skill {
        background: none;
        border: none;
        color: var(--danger);
        cursor: pointer;
        padding: 0;
        display: flex;
        align-items: center;
    }

    .remove-skill .material-icons {
        font-size: 1rem;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>