@page "/employees"
@using Pilot.BlazorClient.Data
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.ViewModels
@inject IWorkPageService WorkPageService
@inject NavigationManager NavigationManager

<div class="container mt-5 mb-5" style="max-width: 1000px;">
    <div class="text-center mb-4">
        <h1 class="display-4 text-primary">Employees</h1>
        <p class="text-muted">Manage employees within your company.</p>
    </div>

    <!-- Search Bar -->
    <div class="mb-4">
        <div class="input-group">
            <input @bind="_searchQuery" class="form-control" placeholder="Search employees..." />
            <button class="btn btn-outline-primary" type="button">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>

    <!-- Employees Section -->
    @if (_isLoading)
    {
        <div class="text-center">
            <p class="text-info">Loading employee details...</p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_employees != null && _posts != null)
    {
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var employee in _employees.Where(e => string.IsNullOrWhiteSpace(_searchQuery) || e.User!.FullName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)))
            {
                <div class="col">
                    <div class="card mb-4 border-primary shadow-sm">
                        <div class="card-body d-flex align-items-center">
                            <div class="avatar me-3">
                                @if (!string.IsNullOrEmpty(employee.User!.AvatarImage))
                                {
                                    <img src="@TempFileService.GetUrl(employee.User.AvatarImage)" alt="@employee.User.FullName" class="rounded-circle" style="width: 60px; height: 60px; object-fit: cover;" />
                                }
                            </div>
                            <div class="flex-grow-1">
                                <h4 class="card-title text-primary">@employee.User?.FullName</h4>
                                <h4 class="card-title text-primary">@(_posts.FirstOrDefault(c => c.Id == employee.PostId)?.Title)</h4>
                                <p><strong>Teams count:</strong> @employee.Teams.Count</p>
                            </div>
                            <div>
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToEmployee(employee.Id)">
                                    <i class="bi bi-person"></i> View Profile
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-danger">No employees found.</p>
    }
</div>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int CompanyId { get; set; }
    
    private bool _isLoading = true;
    private string _searchQuery = string.Empty;
    private ICollection<CompanyUserViewModel>? _employees;
    private ICollection<ProjectViewModel>? _projects;
    private ICollection<PostViewModel>? _posts;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            _employees = await WorkPageService.GetCompanyEmployeesAsync(CompanyId);
            _projects = await WorkPageService.GetProjectsAsync(CompanyId);
            _posts = await WorkPageService.GetPostsAsync(CompanyId);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToEmployee(int employeeId)
    {
        NavigationManager.NavigateTo($"/employees/{employeeId}");
    }
}
