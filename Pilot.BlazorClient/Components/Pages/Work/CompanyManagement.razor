@page "/company-management/{CompanyId:int}"
@using Pilot.BlazorClient.ViewModels
@using Pilot.Contracts.Data.Enums
@using Pilot.BlazorClient.Service
@using Pilot.BlazorClient.Interface
@using Pilot.BlazorClient.Data
@using Pilot.Contracts.Base
@using Pilot.Contracts.Services
@inject IWorkPageService WorkPageService
@inject IJsonLocalizationService Localization
@inject NavigationManager NavigationManager

<PageTitle>@Localization.GetString("CompanyManagementTitle", "CompanyManagement")</PageTitle>

<div class="company-management-container">
    <div class="title-header">
        <h1>@Localization.GetString("CompanyManagementTitle", "CompanyManagement")</h1>
        <p class="subtitle">@Localization.GetString("CompanyManagementSubtitle", "CompanyManagement")</p>
    </div>

    @if (ErrorMessage != null)
    {
        <div class="error-message">
            <span class="material-icons">error</span>
            @ErrorMessage
        </div>
    }

    <!-- Tabs -->
    <div class="tabs">
        <button class="tab-button @(ActiveTab == Tab.Projects ? "active" : "")" @onclick="() => SetTab(Tab.Projects)">
            <span class="material-icons">apartment</span> @Localization.GetString("Projects", "CompanyManagement")
        </button>
        <button class="tab-button @(ActiveTab == Tab.Teams ? "active" : "")" @onclick="() => SetTab(Tab.Teams)">
            <span class="material-icons">group</span> @Localization.GetString("Teams", "CompanyManagement")
        </button>
        <button class="tab-button @(ActiveTab == Tab.Employees ? "active" : "")" @onclick="() => SetTab(Tab.Employees)">
            <span class="material-icons">person</span> @Localization.GetString("Employees", "CompanyManagement")
        </button>
        <button class="tab-button @(ActiveTab == Tab.Permissions ? "active" : "")"
                @onclick="() => SetTab(Tab.Permissions)">
            <span class="material-icons">lock</span> @Localization.GetString("Permissions", "CompanyManagement")
        </button>
        <button class="tab-button @(ActiveTab == Tab.Company ? "active" : "")" @onclick="() => SetTab(Tab.Company)">
            <span class="material-icons">business</span> @Localization.GetString("Company", "CompanyManagement")
        </button>
    </div>

    <!-- Tab Content -->
    <div class="tab-content">
        @switch (ActiveTab)
        {
            case Tab.Projects:
                <div class="section">
                    <div class="section-header">
                        <h2>@Localization.GetString("Projects", "CompanyManagement")</h2>
                        <button class="btn btn-add" @onclick="ShowAddProjectForm">
                            <span
                                class="material-icons">add</span> @Localization.GetString("AddProject", "CompanyManagement")
                        </button>
                    </div>
                    @if (_isLoading)
                    {
                        <div class="loading">
                            <span
                                class="material-icons spin">refresh</span> @Localization.GetString("Loading", "CompanyManagement")
                        </div>
                    }
                    else if (_projects?.Any() != true)
                    {
                        <p class="no-data">@Localization.GetString("NoProjects", "CompanyManagement")</p>
                    }
                    else
                    {
                        <div class="card-grid">
                            @foreach (var project in _projects)
                            {
                                <div class="card">
                                    <h3>@project.Name</h3>
                                    <p>@project.Description?.TakeOnly(100, "...")</p>
                                    <p>
                                        <strong>@Localization.GetString("TeamsCount", "CompanyManagement"):</strong> @project.Teams?.Count
                                    </p>
                                    <p>
                                        <strong>@Localization.GetString("ProjectStatus", "CompanyManagement"):</strong> @Localization.GetString(project.ProjectStatus.ToString(), "CompanyManagement")
                                    </p>
                                    <div class="card-actions">
                                        <button class="btn btn-edit" @onclick="() => ShowEditProjectForm(project)">
                                            <span
                                                class="material-icons">edit</span> @Localization.GetString("Edit", "CompanyManagement")
                                        </button>
                                        <button class="btn btn-delete" @onclick="() => DeleteProject(project.Id)">
                                            <span
                                                class="material-icons">delete</span> @Localization.GetString("Delete", "CompanyManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (_showAddProjectForm)
                    {
                        <div class="form-overlay">
                            <div class="form-card">
                                <h3>@Localization.GetString("AddProject", "CompanyManagement")</h3>
                                <EditForm Model="_newProject" OnValidSubmit="SaveProject">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group">
                                        <label>@Localization.GetString("ProjectName", "CompanyManagement")</label>
                                        <InputText @bind-Value="_newProject.Name" class="form-input"
                                                   placeholder="@Localization.GetString("ProjectNamePlaceholder", "CompanyManagement")"/>
                                        <ValidationMessage For="@(() => _newProject.Name)"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("ProjectDescription", "CompanyManagement")</label>
                                        <InputTextArea @bind-Value="_newProject.Description" class="form-textarea"
                                                       placeholder="@Localization.GetString("ProjectDescriptionPlaceholder", "CompanyManagement")"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("ProjectStatus", "CompanyManagement")</label>
                                        <InputSelect @bind-Value="_newProject.ProjectStatus" class="form-select">
                                            @foreach (var status in Enum.GetValues<ProjectStatus>())
                                            {
                                                <option
                                                    value="@status">@Localization.GetString(status.ToString(), "CompanyManagement")</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="form-actions">
                                        <button type="submit"
                                                class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                        <button type="button" class="btn btn-cancel"
                                                @onclick="HideAddProjectForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }

                    @if (_showEditProjectForm)
                    {
                        <div class="form-overlay">
                            <div class="form-card">
                                <h3>@Localization.GetString("EditProject", "CompanyManagement")</h3>
                                <EditForm Model="_editProject" OnValidSubmit="UpdateProject">
                                    <DataAnnotationsValidator/>
                                    @if (ErrorMessage != null)
                                    {
                                        <div class="error-message">
                                            <span class="material-icons">error</span>
                                            @ErrorMessage
                                        </div>
                                    }
                                    <div class="form-group">
                                        <label>@Localization.GetString("ProjectName", "CompanyManagement")</label>
                                        <InputText @bind-Value="_editProject.Name" class="form-input"
                                                   placeholder="@Localization.GetString("ProjectNamePlaceholder", "CompanyManagement")"/>
                                        <ValidationMessage For="@(() => _editProject.Name)"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("ProjectDescription", "CompanyManagement")</label>
                                        <InputTextArea @bind-Value="_editProject.Description" class="form-textarea"
                                                       placeholder="@Localization.GetString("ProjectDescriptionPlaceholder", "CompanyManagement")"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("ProjectStatus", "CompanyManagement")</label>
                                        <InputSelect @bind-Value="_editProject.ProjectStatus" class="form-select">
                                            @foreach (var status in Enum.GetValues<ProjectStatus>())
                                            {
                                                <option
                                                    value="@status">@Localization.GetString(status.ToString(), "CompanyManagement")</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="form-actions">
                                        <button type="submit"
                                                class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                        <button type="button" class="btn btn-cancel"
                                                @onclick="HideEditProjectForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </div>
                break;

            case Tab.Teams:
                <div class="section">
                    <div class="section-header">
                        <h2>@Localization.GetString("Teams", "CompanyManagement")</h2>
                        <button class="btn btn-add" @onclick="ShowAddTeamForm">
                            <span
                                class="material-icons">add</span> @Localization.GetString("AddTeam", "CompanyManagement")
                        </button>
                    </div>
                    @if (_isLoading)
                    {
                        <div class="loading">
                            <span
                                class="material-icons spin">refresh</span> @Localization.GetString("Loading", "CompanyManagement")
                        </div>
                    }
                    else if (_teams?.Any() != true)
                    {
                        <p class="no-data">@Localization.GetString("NoTeams", "CompanyManagement")</p>
                    }
                    else
                    {
                        <div class="card-grid">
                            @foreach (var team in _teams)
                            {
                                <div class="card">
                                    <h3>@team.Name</h3>
                                    <p>@team.Description.TakeOnly(100, "...")</p>
                                    <p>
                                        <strong>@Localization.GetString("Project", "CompanyManagement"):</strong> @(_projects?.FirstOrDefault(p => p.Id == team.Project.Id)?.Name ?? "N/A")
                                    </p>
                                    <p>
                                        <strong>@Localization.GetString("MembersCount", "CompanyManagement"):</strong> @team.CompanyUsers?.Count
                                    </p>
                                    <div class="card-actions">
                                        <button class="btn btn-edit" @onclick="() => ShowEditTeamForm(team)">
                                            <span
                                                class="material-icons">edit</span> @Localization.GetString("Edit", "CompanyManagement")
                                        </button>
                                        <button class="btn btn-delete" @onclick="() => DeleteTeam(team.Id)">
                                            <span
                                                class="material-icons">delete</span> @Localization.GetString("Delete", "CompanyManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (_showAddTeamForm)
                    {
                        <div class="form-overlay">
                            <div class="form-card">
                                <h3>@Localization.GetString("AddTeam", "CompanyManagement")</h3>
                                <EditForm Model="_newTeam" OnValidSubmit="SaveTeam">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group">
                                        <label>@Localization.GetString("TeamName", "CompanyManagement")</label>
                                        <InputText @bind-Value="_newTeam.Name" class="form-input"
                                                   placeholder="@Localization.GetString("TeamNamePlaceholder", "CompanyManagement")"/>
                                        <ValidationMessage For="@(() => _newTeam.Name)"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("TeamDescription", "CompanyManagement")</label>
                                        <InputTextArea @bind-Value="_newTeam.Description" class="form-textarea"
                                                       placeholder="@Localization.GetString("TeamDescriptionPlaceholder", "CompanyManagement")"/>
                                        <ValidationMessage For="@(() => _newTeam.Description)"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("Project", "CompanyManagement")</label>
                                        <InputSelect @bind-Value="_newTeam.ProjectId" class="form-select">
                                            <option value="0" disabled
                                                    selected>@Localization.GetString("SelectProject", "CompanyManagement")</option>
                                            @foreach (var project in _projects ?? new List<ProjectViewModel>())
                                            {
                                                <option value="@project.Id">@project.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => _newTeam.ProjectId)"/>
                                    </div>
                                    <div class="form-actions">
                                        <button type="submit"
                                                class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                        <button type="button" class="btn btn-cancel"
                                                @onclick="HideAddTeamForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }

                    @if (_showEditTeamForm)
                    {
                        <div class="form-overlay">
                            <div class="form-card">
                                <h3>@Localization.GetString("EditTeam", "CompanyManagement")</h3>
                                <EditForm Model="_editTeam" OnValidSubmit="UpdateTeam">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group">
                                        <label>@Localization.GetString("TeamName", "CompanyManagement")</label>
                                        <InputText @bind-Value="_editTeam.Name" class="form-input"
                                                   placeholder="@Localization.GetString("TeamNamePlaceholder", "CompanyManagement")"/>
                                        <ValidationMessage For="@(() => _editTeam.Name)"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("TeamDescription", "CompanyManagement")</label>
                                        <InputTextArea @bind-Value="_editTeam.Description" class="form-textarea"
                                                       placeholder="@Localization.GetString("TeamDescriptionPlaceholder", "CompanyManagement")"/>
                                        <ValidationMessage For="@(() => _editTeam.Description)"/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("Project", "CompanyManagement")</label>
                                        <InputSelect @bind-Value="_editTeam.ProjectId" class="form-select">
                                            <option value="0"
                                                    disabled>@Localization.GetString("SelectProject", "CompanyManagement")</option>
                                            @foreach (var project in _projects ?? new List<ProjectViewModel>())
                                            {
                                                <option value="@project.Id">@project.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => _editTeam.ProjectId)"/>
                                    </div>
                                    <div class="form-actions">
                                        <button type="submit"
                                                class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                        <button type="button" class="btn btn-cancel"
                                                @onclick="HideEditTeamForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </div>
                break;

            case Tab.Employees:
                <div class="section">
                    <div class="section-header">
                        <h2>@Localization.GetString("Employees", "CompanyManagement")</h2>
                        <div class="search-bar">
                            <span class="material-icons">search</span>
                            <input @bind="_searchQuery" class="form-input"
                                   placeholder="@Localization.GetString("SearchEmployees", "CompanyManagement")"
                                   @oninput="FilterEmployees"/>
                        </div>
                    </div>
                    @if (_isLoading)
                    {
                        <div class="loading">
                            <span
                                class="material-icons spin">refresh</span> @Localization.GetString("Loading", "CompanyManagement")
                        </div>
                    }
                    else if (_filteredEmployees?.Any() != true)
                    {
                        <p class="no-data">@Localization.GetString("NoEmployees", "CompanyManagement")</p>
                    }
                    else
                    {
                        <div class="card-grid">
                            @foreach (var employee in _filteredEmployees)
                            {
                                <div class="card">
                                    <div class="card-header" @onclick="() => NavigateToEmployee(employee.Id)">
                                        <img src="@TempFileService.GetUrl(employee.User?.AvatarImage)"
                                             alt="@employee.User?.FullName" class="avatar"/>
                                        <div>
                                            <h3>@employee.User?.FullName</h3>
                                            <p>@(_posts?.FirstOrDefault(p => p.Id == employee.PostId)?.Title ?? Localization.GetString("Owner", "CompanyManagement"))</p>
                                        </div>
                                    </div>
                                    <p>
                                        <strong>@Localization.GetString("TeamsCount", "CompanyManagement"):</strong> @employee.Teams?.Count
                                    </p>
                                    <div class="card-actions">
                                        <button class="btn btn-action"
                                                title="@Localization.GetString("AssignTeam", "CompanyManagement")"
                                                @onclick="() => ShowAssignTeamForm(employee.Id)">
                                            <span class="material-icons">group_add</span>
                                            @Localization.GetString("AssignTeam", "CompanyManagement")
                                        </button>
                                        <button class="btn btn-action btn-danger"
                                                title="@Localization.GetString("RemoveFromTeam", "CompanyManagement")"
                                                disabled="@(employee.Teams == null || !employee.Teams.Any())"
                                                @onclick="() => ShowTeamSelectionDialog(employee)">
                                            <span class="material-icons">delete</span>
                                            @Localization.GetString("RemoveFromTeam", "CompanyManagement")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (_showTeamSelectionDialog)
                        {
                            <div class="modal">
                                <div class="modal-content">
                                    <h3>@Localization.GetString("SelectTeamToRemove", "CompanyManagement")</h3>
                                    <p>@Localization.GetString("SelectTeamMessage", "CompanyManagement")</p>
                                    <div class="form-group">
                                        <InputSelect @bind-Value="_selectedTeamId" class="form-select">
                                            <option value="0" disabled
                                                    selected>@Localization.GetString("SelectTeam", "CompanyManagement")</option>
                                            @foreach (var team in _teams!.Where(c => c.CompanyUsers.Select(x => x.Id).Contains(_selectedEmployee!.Id)).ToList())
                                            {
                                                <option value="@team.Id">@team.Name</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="modal-actions">
                                        <button class="btn btn-danger" disabled="@(_selectedTeamId == 0)"
                                                @onclick="ConfirmRemoveEmployee">
                                            @Localization.GetString("Proceed", "CompanyManagement")
                                        </button>
                                        <button class="btn btn-cancel" @onclick="CancelTeamSelection">
                                            @Localization.GetString("Cancel", "CompanyManagement")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (_showConfirmDialog)
                        {
                            <div class="modal">
                                <div class="modal-content">
                                    <h3>@Localization.GetString("ConfirmRemove", "CompanyManagement")</h3>
                                    <p>@Localization.GetString("ConfirmRemoveEmployeeMessage", "CompanyManagement")</p>
                                    <div class="modal-actions">
                                        <button class="btn btn-danger"
                                                @onclick="RemoveTeamEmployee">@Localization.GetString("Remove", "CompanyManagement")</button>
                                        <button class="btn btn-cancel"
                                                @onclick="CancelRemove">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    @if (_showAssignTeamForm)
                    {
                        <div class="form-overlay">
                            <div class="form-card">
                                <h3>@Localization.GetString("AssignTeam", "CompanyManagement")</h3>
                                <EditForm Model="_assignTeamModel" OnValidSubmit="AssignTeam">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group">
                                        <label>@Localization.GetString("Employee", "CompanyManagement")</label>
                                        <InputText
                                            @bind-Value="_assignTeamModel.EmployeeFullName"
                                            class="form-input" disabled/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("Team", "CompanyManagement")</label>
                                        <InputSelect @bind-Value="_assignTeamModel.TeamId" class="form-select">
                                            <option value="0" disabled
                                                    selected>@Localization.GetString("SelectTeam", "CompanyManagement")</option>
                                            @foreach (var team in _teams!.Where(c => !c.CompanyUsers.Select(x => x.Id).Contains(_assignTeamModel.EmployeeId)).ToList())
                                            {
                                                <option value="@team.Id">@team.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => _assignTeamModel.TeamId)"/>
                                    </div>
                                    <div class="form-actions">
                                        <button type="submit"
                                                class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                        <button type="button" class="btn btn-cancel"
                                                @onclick="HideAssignTeamForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </div>
                break;

            case Tab.Permissions:
                <div class="section">
                    <div class="section-header">
                        <h2>@Localization.GetString("Permissions", "CompanyManagement")</h2>
                    </div>
                    @if (_isLoading)
                    {
                        <div class="loading">
                            <span
                                class="material-icons spin">refresh</span> @Localization.GetString("Loading", "CompanyManagement")
                        </div>
                    }
                    else if (_employees?.Any() != true)
                    {
                        <p class="no-data">@Localization.GetString("NoEmployees", "CompanyManagement")</p>
                    }
                    else
                    {
                        <div class="card-grid">
                            @foreach (var employee in _employees)
                            {
                                <div class="card">
                                    <div class="card-header">
                                        <img src="@TempFileService.GetUrl(employee.User?.AvatarImage)"
                                             alt="@employee.User?.FullName" class="avatar"/>
                                        <div>
                                            <h3>@employee.User?.FullName</h3>
                                            <p>@(_posts?.FirstOrDefault(p => p.Id == employee.PostId)?.Title ?? Localization.GetString("Owner", "CompanyManagement"))</p>
                                        </div>
                                    </div>
                                    <p>
                                        <strong>@Localization.GetString("Permissions", "CompanyManagement"):</strong>
                                        @if (employee.Id == employee.Company.CreatedBy?.Id || employee.Permissions.HasFlag(Permission.All))
                                        {
                                            @(" " + Localization.GetString("All", "CompanyManagement"))
                                        }
                                        else
                                        {
                                            @(" " + string.Join(", ", Enum.GetValues<Permission>()
                                                .Where(p => employee.Permissions.HasFlag(p))
                                                .Select(p => Localization.GetString(p.ToString(), "CompanyManagement"))))
                                        }
                                    </p>
                                    @if (employee.Id != employee.Company.CreatedBy?.Id)
                                    {
                                        <div class="card-actions">
                                            <button class="btn btn-action"
                                                    @onclick="() => ShowAssignPermissionsForm(employee.Id)">
                                                <span
                                                    class="material-icons">lock</span> @Localization.GetString("EditPermissions", "CompanyManagement")
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }

                    @if (_showAssignPermissionsForm)
                    {
                        <div class="form-overlay">
                            <div class="form-card">
                                <h3>@Localization.GetString("EditPermissions", "CompanyManagement")</h3>
                                <EditForm Model="_assignPermissionsModel" OnValidSubmit="AssignPermissions">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group">
                                        <label>@Localization.GetString("Employee", "CompanyManagement")</label>
                                        <InputText
                                            @bind-Value="_assignPermissionsModel.EmployeeFullName"
                                            class="form-input" disabled/>
                                    </div>
                                    <div class="form-group">
                                        <label>@Localization.GetString("Permissions", "CompanyManagement")</label>
                                        @foreach (var permissionTuple in _permissionTuples)
                                        {
                                            // Показываем разрешение, только если это All или если All не выбрано
                                            if (permissionTuple.Permission == Permission.All || !_permissionTuples.Any(c => c.IsChecked && c.Permission == Permission.All))
                                            {
                                                <div class="permission-checkbox">
                                                    <InputCheckbox @bind-Value="permissionTuple.IsChecked"
                                                                   id="@($"perm-{permissionTuple.Permission}")"
                                                                   @onchange="args => OnPermissionChanged(permissionTuple, args)" />
                                                    <label for="@($"perm-{permissionTuple.Permission}")">
                                                        @Localization.GetString(permissionTuple.Permission.ToString(), "CompanyManagement")
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <div class="form-actions">
                                        <button type="submit"
                                                class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                        <button type="button" class="btn btn-cancel"
                                                @onclick="HideAssignPermissionsForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </div>
                break;

            case Tab.Company:
                <div class="section">
                    <div class="section-header">
                        <h2><a href="/Company/@_company!.Id">@Localization.GetString("Company", "CompanyManagement")</a>
                        </h2>
                    </div>
                    @if (_isLoading)
                    {
                        <div class="loading">
                            <span
                                class="material-icons spin">refresh</span> @Localization.GetString("Loading", "CompanyManagement")
                        </div>
                    }
                    else if (_company == null)
                    {
                        <p class="no-data">@Localization.GetString("NoCompanyData", "CompanyManagement")</p>
                    }
                    else
                    {
                        <div class="company-edit">
                            <EditForm Model="_company" OnValidSubmit="SaveCompany">
                                <DataAnnotationsValidator/>
                                <div class="form-group">
                                    <label>@Localization.GetString("CompanyName", "CompanyManagement")</label>
                                    <InputText @bind-Value="_company.Title" class="form-input"
                                               placeholder="@Localization.GetString("CompanyNamePlaceholder", "CompanyManagement")"/>
                                    <ValidationMessage For="@(() => _company.Title)"/>
                                </div>
                                <div class="form-group">
                                    <label>@Localization.GetString("CompanyDescription", "CompanyManagement")</label>
                                    <InputTextArea @bind-Value="_company.Description" class="form-textarea"
                                                   placeholder="@Localization.GetString("CompanyDescriptionPlaceholder", "CompanyManagement")"/>
                                    <ValidationMessage For="@(() => _company.Description)"/>
                                </div>
                                <div class="form-group">
                                    <label>@Localization.GetString("CompanyLogo", "CompanyManagement")</label>
                                    <div class="logo-container">
                                        @if (_company.Logo != null || _newLogo != null)
                                        {
                                            <img
                                                src="@(_newLogo != null ? $"data:image/png;base64,{Convert.ToBase64String(_newLogo.Value.Item2)}" : TempFileService.GetUrl(_company.Logo))"
                                                alt="Company Logo" class="logo-preview"/>
                                        }
                                        else
                                        {
                                            <div class="logo-placeholder">
                                                <span class="material-icons">business</span>
                                                <p>@Localization.GetString("NoLogo", "CompanyManagement")</p>
                                            </div>
                                        }
                                    </div>
                                    <div class="logo-actions">
                                        <label class="btn btn-action">
                                            <span class="material-icons">upload</span>
                                            @Localization.GetString("ReplaceLogo", "CompanyManagement")
                                            <InputFile OnChange="HandleLogoUpload" class="file-input"/>
                                        </label>
                                        <button class="btn btn-action btn-danger" style="height: 53px"
                                                disabled="@(_company.Logo == null && _newLogo == null)"
                                                @onclick="RemoveLogo">
                                            <span class="material-icons">delete</span>
                                            @Localization.GetString("DeleteLogo", "CompanyManagement")
                                        </button>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>@Localization.GetString("InsideImages", "CompanyManagement")</label>
                                    @if (_company.InsideImages?.Any() == true || _newInsideImages.Any())
                                    {
                                        <div class="image-grid">
                                            @foreach (var image in _company.InsideImages ?? new List<string>())
                                            {
                                                <div class="image-container">
                                                    <img src="@TempFileService.GetUrl(image)" alt="Inside Image"
                                                         class="inside-image"/>
                                                    <button class="btn btn-icon btn-danger remove-image"
                                                            @onclick="() => RemoveInsideImage(image)">
                                                        <span class="material-icons">delete</span>
                                                    </button>
                                                </div>
                                            }
                                            @foreach (var image in _newInsideImages)
                                            {
                                                <div class="image-container">
                                                    <img
                                                        src="@($"data:image/png;base64,{Convert.ToBase64String(image.Item2)}")"
                                                        alt="New Inside Image" class="inside-image"/>
                                                    <button class="btn btn-icon btn-danger remove-image"
                                                            @onclick="() => _newInsideImages.Remove(image)">
                                                        <span class="material-icons">delete</span>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="images-placeholder">
                                            <span class="material-icons">image</span>
                                            <p>@Localization.GetString("NoImages", "CompanyManagement")</p>
                                        </div>
                                    }
                                    <div class="images-actions">
                                        <label class="btn btn-action">
                                            <span class="material-icons">upload</span>
                                            @Localization.GetString("UploadImages", "CompanyManagement")
                                            <InputFile OnChange="HandleInsideImagesUpload" class="file-input" multiple/>
                                        </label>
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <button type="submit"
                                            class="btn btn-save">@Localization.GetString("Save", "CompanyManagement")</button>
                                    <button type="button" class="btn btn-cancel"
                                            @onclick="ResetCompanyForm">@Localization.GetString("Cancel", "CompanyManagement")</button>
                                </div>
                            </EditForm>
                        </div>
                    }
                </div>

                break;
        }
    </div>
</div>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int CompanyId { get; set; }

    private enum Tab
    {
        Projects,
        Teams,
        Employees,
        Permissions,
        Company
    }

    private Tab ActiveTab = Tab.Employees;
    private bool _isLoading = true;
    private string? ErrorMessage;
    private string _searchQuery = string.Empty;
    private ICollection<ProjectViewModel>? _projects;
    private ICollection<TeamViewModel>? _teams;
    private ICollection<CompanyUserViewModel>? _employees;
    private ICollection<CompanyUserViewModel>? _filteredEmployees;
    private ICollection<PostViewModel>? _posts;
    private ProjectViewModel _newProject = new();
    private TeamViewModel _newTeam = new();
    private bool _showAddProjectForm;
    private bool _showAddTeamForm;
    private bool _showEditProjectForm;
    private bool _showEditTeamForm;
    private bool _showAssignTeamForm;
    private bool _showAssignPermissionsForm;
    private ProjectViewModel _editProject = new();
    private TeamViewModel _editTeam = new();
    private AssignTeamModel _assignTeamModel = new();
    private AssignPermissionsModel _assignPermissionsModel = new();
    private List<PermissionItem> _permissionTuples = [];
    private bool _showTeamSelectionDialog;
    private bool _showConfirmDialog;
    private CompanyUserViewModel? _selectedEmployee;
    private int _selectedTeamId;
    private CompanyViewModel? _company;
    private (string, byte[])? _newLogo;
    private List<(string, byte[])> _newInsideImages = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _isLoading = true;
        try
        {
            _company = await WorkPageService.GetCompanyAsync(CompanyId);
            _projects = await WorkPageService.GetProjectsAsync(CompanyId);
            _teams = await WorkPageService.GetTeamsAsync(CompanyId);
            _employees = await WorkPageService.GetCompanyEmployeesAsync(CompanyId);
            _posts = await WorkPageService.GetPostsAsync(CompanyId);
            _filteredEmployees = _employees;
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("LoadError", "CompanyManagement");
            Console.WriteLine($"Load error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void SetTab(Tab tab)
    {
        ActiveTab = tab;
    }

    private void ShowAddProjectForm()
    {
        _newProject = new ProjectViewModel
        {
            Company = new BaseDto { Id = CompanyId }
        };
        _showAddProjectForm = true;
    }

    private void HideAddProjectForm()
    {
        _showAddProjectForm = false;
    }

    private async Task SaveProject()
    {
        try
        {
            await WorkPageService.AddProjectAsync(_newProject);
            await Task.Delay(100);
            _projects = await WorkPageService.GetProjectsAsync(CompanyId);
            _showAddProjectForm = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Save project error: {ex.Message}");
        }
    }

    private void ShowEditProjectForm(ProjectViewModel project)
    {
        _editProject = new ProjectViewModel
        {
            Id = project.Id,
            Name = project.Name,
            Description = project.Description,
            ProjectStatus = project.ProjectStatus,
            Company = new BaseDto { Id = CompanyId }
        };
        _showEditProjectForm = true;
    }

    private void HideEditProjectForm()
    {
        _showEditProjectForm = false;
    }

    private async Task UpdateProject()
    {
        try
        {
            await WorkPageService.UpdateProjectAsync(_editProject);
            await Task.Delay(100); // пока так, потом сделать ожидание прихода события
            _projects = await WorkPageService.GetProjectsAsync(CompanyId);
            _showEditProjectForm = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Update project error: {ex.Message}");
        }
    }

    private async Task DeleteProject(int projectId)
    {
        try
        {
            await WorkPageService.DeleteProjectAsync(projectId);
            await Task.Delay(100);
            _projects = await WorkPageService.GetProjectsAsync(CompanyId);
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("DeleteError", "CompanyManagement");
            Console.WriteLine($"Delete project error: {ex.Message}");
        }
    }

    private void ShowAddTeamForm()
    {
        _newTeam = new TeamViewModel();
        _showAddTeamForm = true;
    }

    private void HideAddTeamForm()
    {
        _showAddTeamForm = false;
    }

    public async Task SaveTeam()
    {
        if (_newTeam.ProjectId == 0)
            return;

        try
        {
            await WorkPageService.AddTeamAsync(_newTeam);
            await Task.Delay(100);
            _teams = await WorkPageService.GetTeamsAsync(CompanyId);
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Save team error: {ex.Message}");
        }
        finally
        {
            _showAddTeamForm = false;
        }
    }

    private void ShowEditTeamForm(TeamViewModel team)
    {
        _editTeam = new TeamViewModel
        {
            Id = team.Id,
            Name = team.Name,
            Description = team.Description,
            ProjectId = team.ProjectId
        };
        _showEditTeamForm = true;
    }

    private void HideEditTeamForm()
    {
        _showEditTeamForm = false;
    }

    private async Task UpdateTeam()
    {
        try
        {
            await WorkPageService.UpdateTeamAsync(_editTeam);
            _teams = await WorkPageService.GetTeamsAsync(CompanyId);
            _showEditTeamForm = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Update team error: {ex.Message}");
        }
    }

    private async Task DeleteTeam(int teamId)
    {
        try
        {
            await WorkPageService.DeleteTeamAsync(teamId);
            _teams = await WorkPageService.GetTeamsAsync(CompanyId);
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("DeleteError", "CompanyManagement");
            Console.WriteLine($"Delete team error: {ex.Message}");
        }
    }

    private void FilterEmployees()
    {
        _filteredEmployees = string.IsNullOrWhiteSpace(_searchQuery)
            ? _employees
            : _employees?.Where(e => e.User!.FullName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowAssignTeamForm(int employeeId)
    {
        var employee = _employees?.FirstOrDefault(c => c.Id == employeeId)?.User;
        _assignTeamModel = new AssignTeamModel { EmployeeFullName = employee?.FullName, EmployeeId = employee?.Id ?? 0 };
        _showAssignTeamForm = true;
    }

    private void HideAssignTeamForm()
    {
        _showAssignTeamForm = false;
    }

    private async Task AssignTeam()
    {
        try
        {
            await WorkPageService.AssignEmployeeToTeamAsync(_assignTeamModel.TeamId, _assignTeamModel.EmployeeId);
            await Task.Delay(100);
            _employees = await WorkPageService.GetCompanyEmployeesAsync(CompanyId);
            _teams = await WorkPageService.GetTeamsAsync(CompanyId);
            _filteredEmployees = _employees;
            _showAssignTeamForm = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Assign team error: {ex.Message}");
        }
    }

    private void ShowTeamSelectionDialog(CompanyUserViewModel employee)
    {
        _selectedEmployee = employee;
        _selectedTeamId = 0; // Сбрасываем выбор команды
        _showTeamSelectionDialog = true;
    }

    private void CancelTeamSelection()
    {
        _showTeamSelectionDialog = false;
        _selectedEmployee = null;
        _selectedTeamId = 0;
    }

    private void ConfirmRemoveEmployee()
    {
        if (_selectedTeamId > 0)
        {
            _showTeamSelectionDialog = false;
            _showConfirmDialog = true;
        }
    }

    private async Task RemoveTeamEmployee()
    {
        try
        {
            await WorkPageService.RemoveTeamEmployeeAsync(_selectedTeamId, _selectedEmployee!.Id);

            await Task.Delay(100);
            var employee = _filteredEmployees?.FirstOrDefault(e => e.Id == _selectedEmployee!.Id);
            if (employee != null)
            {
                employee.Teams = employee.Teams.Where(t => t.Id != _selectedTeamId).ToList();
            }

            _teams = await WorkPageService.GetTeamsAsync(CompanyId);

            _showConfirmDialog = false;
            _selectedEmployee = null;
            _selectedTeamId = 0;

            // Принудительно обновляем UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Обработка ошибки (например, показать уведомление)
            Console.WriteLine($"Error removing employee: {ex.Message}");
        }
    }

    private void CancelRemove()
    {
        _showConfirmDialog = false;
        _selectedEmployee = null;
        _selectedTeamId = 0;
    }

    private void ShowAssignPermissionsForm(int employeeId)
    {
        _permissionTuples.Clear();
        _selectedEmployee = _employees?.FirstOrDefault(e => e.Id == employeeId);
        foreach (var permission in Enum.GetValues<Permission>())
            _permissionTuples.Add(new PermissionItem { Permission = permission, IsChecked = _selectedEmployee!.Permissions.HasPermission(permission) });

        _assignPermissionsModel = new AssignPermissionsModel
        {
            EmployeeId = employeeId,
            EmployeeFullName = _selectedEmployee!.User?.FullName ?? string.Empty,
            Permissions = _selectedEmployee.Permissions
        };
        _showAssignPermissionsForm = true;
    }

    private void HideAssignPermissionsForm()
    {
        _showAssignPermissionsForm = false;
    }

    private async Task AssignPermissions()
    {
        try
        {
            var startSum = (int)_assignPermissionsModel.Permissions;
            var endSum = _permissionTuples.Any(c => c.IsChecked && c.Permission.HasFlag(Permission.All)) ? 1 : _permissionTuples.Where(c => c.IsChecked).Select(c => (int)c.Permission).Sum();
            if (startSum == endSum)
                return;

            _selectedEmployee!.Permissions = (Permission)endSum;

            await WorkPageService.UpdateEmployeeAsync(_selectedEmployee);
            await Task.Delay(100);

            _showAssignPermissionsForm = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Assign permissions error: {ex.Message}");
        }
    }

    private void NavigateToEmployee(int employeeId)
    {
        NavigationManager.NavigateTo($"/account/{employeeId}");
    }

    private class AssignTeamModel
    {
        public int EmployeeId { get; set; }
        public string? EmployeeFullName { get; set; }
        public int TeamId { get; set; }
    }

    private class AssignPermissionsModel
    {
        public int EmployeeId { get; set; }
        public string EmployeeFullName { get; set; } = null!;
        public Permission Permissions { get; set; }
    }


    private class PermissionItem
    {
        public Permission Permission { get; set; }
        public bool IsChecked { get; set; }
    }

    private async Task HandleLogoUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.File;
            await using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _newLogo = (file.Name, ms.ToArray());
        }
    }

    private async Task HandleInsideImagesUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            await using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            _newInsideImages.Add((file.Name, ms.ToArray()));
        }
    }

    private bool _isFinalSave = true;

    private async Task RemoveLogo()
    {
        _isFinalSave = false;
        _company!.Logo = null;
        _newLogo = null;
        StateHasChanged();
        await Task.Delay(500);
        _isFinalSave = true;
    }

    private async Task RemoveInsideImage(string imageId)
    {
        _isFinalSave = false;
        _company!.InsideImages.Remove(imageId);
        await Task.Delay(500);
        _isFinalSave = true;
    }

    private async Task SaveCompany()
    {
        if (!_isFinalSave) return;
        try
        {
            // Update Logo
            if (_newLogo != null)
            {
                var fileName = Guid.NewGuid().ToString();
                var file = new FileViewModel
                {
                    Name = fileName,
                    Type = "png",
                    Format = FileFormat.Image,
                    ByteFormFile = _newLogo!.Value.Item2
                };
                await WorkPageService.UploadFileAsync(file);
                _company!.Logo = fileName;
            }

            // Update InsideImages
            if (_newInsideImages.Any())
            {
                foreach (var image in _newInsideImages)
                {
                    var fileName = Guid.NewGuid().ToString();
                    var file = new FileViewModel
                    {
                        Name = fileName,
                        Type = "png",
                        Format = FileFormat.Image,
                        ByteFormFile = image.Item2
                    };
                    await WorkPageService.UploadFileAsync(file);
                    _company!.InsideImages.Add(fileName);
                }
            }

            // Save company changes
            await WorkPageService.UpdateCompanyAsync(_company!);
            _newLogo = null;
            _newInsideImages.Clear();
            _company = await WorkPageService.GetCompanyAsync(CompanyId);
            await Task.Delay(500);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = Localization.GetString("SaveError", "CompanyManagement");
            Console.WriteLine($"Save company error: {ex.Message}");
        }
    }

    private void ResetCompanyForm()
    {
        _newLogo = null;
        _newInsideImages.Clear();
        StateHasChanged();
    }

    
    private void OnPermissionChanged(PermissionItem permissionTuple, ChangeEventArgs args)
    {
        // Обновляем состояние чекбокса
        permissionTuple.IsChecked = (bool)args.Value;

        // Если выбрано Permission.All, сбрасываем остальные
        if (permissionTuple.Permission == Permission.All && permissionTuple.IsChecked)
        {
            foreach (var tuple in _permissionTuples.Where(t => t.Permission != Permission.All))
            {
                tuple.IsChecked = false;
            }
        }
        // Если выбрано другое разрешение, сбрасываем Permission.All
        else if (permissionTuple.Permission != Permission.All && permissionTuple.IsChecked)
        {
            var allTuple = _permissionTuples.FirstOrDefault(t => t.Permission == Permission.All);
            if (allTuple != default)
            {
                allTuple.IsChecked = false;
            }
        }

        // Вызываем StateHasChanged, чтобы обновить UI
        StateHasChanged();
    }
}

<style>
    :root {
        --primary: #3b82f6;
        --secondary: #6b7280;
        --success: #10b981;
        --danger: #ef4444;
        --bg-light: #f3f4f6;
        --bg-white: #ffffff;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        --transition: all 0.3s ease;
    }

    .company-management-container {
        width: 1000px;
        min-width: 800px;
        margin: 3rem auto;
        padding: 2rem;
        background: linear-gradient(135deg, var(--bg-white), #e5e7eb);
        border-radius: 16px;
        box-shadow: var(--shadow);
        animation: fadeIn 0.5s ease-out;
    }

    .title-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    h1 {
        font-size: 3rem;
        font-weight: 800;
        background: linear-gradient(to right, var(--primary), #60a5fa);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
    }

    .subtitle {
        font-size: 1.2rem;
        color: var(--text-secondary);
        margin-top: 0.5rem;
    }

    .error-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: #fee2e2;
        border: 1px solid var(--danger);
        border-radius: 8px;
        color: var(--danger);
        font-size: 1rem;
        margin-bottom: 1.5rem;
    }

    .tabs {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-bottom: 2rem;
        background: var(--bg-light);
        padding: 0.5rem;
        border-radius: 12px;
    }

    .tab-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-secondary);
        background: none;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
    }

    .tab-button:hover {
        background: #e5e7eb;
    }

    .tab-button.active {
        background: var(--primary);
        color: #fff;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }

    .tab-content {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: var(--shadow);
        width: 100%;
        min-height: 400px;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .section-header h2 {
        font-size: 1.8rem;
        color: var(--text-primary);
        margin: 0;
    }

    .search-bar {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        max-width: 300px;
        background: var(--bg-light);
        border-radius: 8px;
        padding: 0.5rem;
    }

    .search-bar .material-icons {
        color: var(--text-secondary);
    }

    .form-input {
        border: none;
        background: none;
        font-size: 1rem;
        width: 100%;
    }

    .form-input:focus {
        outline: none;
    }

    .card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
    }

    .card {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow);
        transition: var(--transition);
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.2);
    }

    .card-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .card h3 {
        font-size: 1.4rem;
        color: var(--text-primary);
        margin: 0;
    }

    .card p {
        font-size: 0.95rem;
        color: var(--text-secondary);
        margin: 0.5rem 0;
    }

    .card-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border: none;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-add {
        background: linear-gradient(90deg, var(--primary), #60a5fa);
        color: #fff;
    }

    .btn-add:hover {
        background: linear-gradient(90deg, #2563eb, var(--primary));
    }

    .btn-action {
        background: var(--bg-light);
        color: var(--text-primary);
    }

    .btn-action:hover {
        background: #e5e7eb;
    }

    .btn-edit {
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
        color: #fff;
    }

    .btn-edit:hover {
        background: linear-gradient(90deg, #d97706, #f59e0b);
    }

    .btn-delete {
        background: linear-gradient(90deg, var(--danger), #f87171);
        color: #fff;
    }

    .btn-delete:hover {
        background: linear-gradient(90deg, #dc2626, var(--danger));
    }

    .btn-save {
        background: linear-gradient(90deg, var(--success), #34d399);
        color: #fff;
    }

    .btn-save:hover {
        background: linear-gradient(90deg, #059669, #10b981);
    }

    .btn-cancel {
        background: linear-gradient(90deg, var(--secondary), #9ca3af);
        color: #fff;
    }

    .btn-cancel:hover {
        background: linear-gradient(90deg, #4b5563, #6b7280);
    }

    .form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .form-card {
        background: var(--bg-white);
        border-radius: 12px;
        padding: 2rem;
        max-width: 500px;
        width: 100%;
        box-shadow: var(--shadow);
        animation: slideIn 0.3s ease-out;
    }

    .form-card h3 {
        font-size: 1.6rem;
        color: var(--text-primary);
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        display: block;
        margin-bottom: 0.5rem;
    }

    .form-input,
    .form-textarea,
    .form-select {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .form-input:focus,
    .form-textarea:focus,
    .form-select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
        outline: none;
    }

    .form-textarea {
        min-height: 200px;
        resize: vertical;
    }

    .form-select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23333'%3E%3Cpath d='M7 10l5 5 5-5H7z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1.2rem;
        padding-right: 2.5rem;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .permission-checkbox {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .no-data {
        font-size: 1.1rem;
        color: var(--text-secondary);
        text-align: center;
        font-style: italic;
    }

    .loading {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        justify-content: center;
        font-size: 1.1rem;
        color: var(--text-secondary);
    }

    .spin {
        animation: spin 1s linear infinite;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        background: white;
    }

    .card-header {
        display: flex;
        align-items: center;
        gap: 12px;
        cursor: pointer; /* Указывает, что элемент кликабелен */
        padding: 8px;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

    .card-header:hover {
        background-color: #f0f0f0; /* Эффект наведения */
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .card-actions {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
        flex-wrap: nowrap;
    }

    .btn-action {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
        padding: 6px 12px;
        font-size: 14px;
    }

    .btn-action:hover {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #e74c3c;
    }

    .btn-danger:hover {
        background-color: #c0392b;
    }

    .btn-danger:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 400px;
        text-align: center;
    }

    .modal-actions {
        display: flex;
        justify-content: space-around;
        margin-top: 20px;
    }

    .form-select {
        width: 100%;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .company-edit {
        padding: 20px;
    }

    .file-preview {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        background: #e9ecef;
        border-radius: 8px;
        margin-bottom: 10px;
    }
    
    .upload-btn {
        display: flex;
        align-items: center;
        gap: 5px;
        padding: 8px 15px;
        background: #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
        margin-top: 10px;
    }

    .upload-btn:hover {
        background: #dee2e6;
    }

    .file-input {
        opacity: 0;
        position: absolute;
        width: 0;
        height: 0;
    }

    .btn-icon {
        padding: 5px;
        min-width: unset;
    }

    .logo-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 1rem 0;
        min-height: 120px;
    }

    .logo-preview {
        max-width: 150px;
        max-height: 150px;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .logo-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-secondary);
        background: #e9ecef;
        padding: 1rem;
        border-radius: 8px;
        width: 150px;
        text-align: center;
    }

    .logo-placeholder .material-icons {
        font-size: 2rem;
    }

    .logo-placeholder p {
        margin: 0;
        font-size: 0.9rem;
    }

    .logo-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1rem;
    }

    .btn-action {
        padding: 0.6rem 1.2rem;
        font-size: 0.95rem;
        background: var(--bg-light);
        color: var(--text-primary);
    }

    .btn-action:hover {
        background: #e5e7eb;
    }

    .btn-action.btn-danger {
        background: linear-gradient(90deg, var(--danger), #f87171);
        color: #fff;
    }

    .btn-action.btn-danger:hover {
        background: linear-gradient(90deg, #dc2626, var(--danger));
    }

    .btn-action.btn-danger:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .file-input {
        opacity: 0;
        position: absolute;
        width: 0;
        height: 0;
    }

    .image-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
        justify-content: center;
        margin: 1rem 0;
    }

    .image-container {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 10px;
    }

    .inside-image {
        max-width: 100%;
        max-height: 150px;
        object-fit: cover;
        border-radius: 8px;
    }

    .remove-image {
        position: absolute;
        top: -8px;
        right: -8px;
        padding: 4px;
        background: var(--danger);
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .remove-image .material-icons {
        font-size: 16px;
    }

    .images-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-secondary);
        background: #e9ecef;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1rem auto;
        width: 200px;
        text-align: center;
    }

    .images-placeholder .material-icons {
        font-size: 2.5rem;
    }

    .images-placeholder p {
        margin: 0;
        font-size: 1rem;
    }

    .images-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1rem;
    }
</style>