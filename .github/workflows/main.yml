name: Combined Workflow

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  gateway:
    name: Gateway
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - uses: actions/checkout@v4

      - name: Restore Messenger project
        run: dotnet restore ./Pilot.Messenger/Pilot.Messenger.csproj

      - name: Build Messenger project
        run: dotnet build ./Pilot.Messenger/Pilot.Messenger.csproj --configuration Release --no-restore

      - name: Restore Identity project
        run: dotnet restore ./Pilot.Identity/Pilot.Identity.csproj

      - name: Build Identity project
        run: dotnet build ./Pilot.Identity/Pilot.Identity.csproj --configuration Release --no-restore

      - name: Restore Tests project
        run: dotnet restore ./Pilot.Tests/Test.Api/Test.Api.csproj

      - name: Build Tests
        run: dotnet build ./Pilot.Tests/Test.Api/Test.Api.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Api/Test.Api.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
            
  worker:
    name: Worker
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Messenger project
        run: dotnet restore ./Pilot.Messenger/Pilot.Messenger.csproj

      - name: Build Messenger project
        run: dotnet build ./Pilot.Messenger/Pilot.Messenger.csproj --configuration Release --no-restore

      - name: Restore Identity project
        run: dotnet restore ./Pilot.Identity/Pilot.Identity.csproj

      - name: Build Identity project
        run: dotnet build ./Pilot.Identity/Pilot.Identity.csproj --configuration Release --no-restore

      - name: Worker Tests project
        run: dotnet restore ./Pilot.Tests/Test.Worker/Test.Worker.csproj

      - name: Build Tests
        run: dotnet build ./Pilot.Tests/Test.Worker/Test.Worker.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Worker/Test.Worker.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  identity:
    name: Identity
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Messenger project
        run: dotnet restore ./Pilot.Messenger/Pilot.Messenger.csproj

      - name: Build Messenger project
        run: dotnet build ./Pilot.Messenger/Pilot.Messenger.csproj --configuration Release --no-restore

      - name: Restore Tests project
        run: dotnet restore ./Pilot.Tests/Test.Identity/Test.Identity.csproj

      - name: Build Tests
        run: dotnet build ./Pilot.Tests/Test.Identity/Test.Identity.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Identity/Test.Identity.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  messenger:
    name: Messenger
    runs-on: ubuntu-latest
    timeout-minutes: 30
  
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Identity project
        run: dotnet restore ./Pilot.Identity/Pilot.Identity.csproj

      - name: Build Identity project
        run: dotnet build ./Pilot.Identity/Pilot.Identity.csproj --configuration Release --no-restore

      - name: Restore Messenger project
        run: dotnet restore ./Pilot.Messenger/Pilot.Messenger.csproj

      - name: Build Messenger project
        run: dotnet build ./Pilot.Messenger/Pilot.Messenger.csproj --configuration Release --no-restore

      - name: Worker Tests project
        run: dotnet restore ./Pilot.Tests/Test.Worker/Test.Worker.csproj
  
      - name: Restore Test.Messenger project
        run: dotnet restore ./Pilot.Tests/Test.Messenger/Test.Messenger.csproj
  
      - name: Build Test.Worker project
        run: dotnet build ./Pilot.Tests/Test.Worker/Test.Worker.csproj --configuration Release --no-restore
  
      - name: Build Test.Messenger project
        run: dotnet build ./Pilot.Tests/Test.Messenger/Test.Messenger.csproj --configuration Release --no-restore
  
      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Messenger/Test.Messenger.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  storage:
    name: Storage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Test.Storage project
        run: dotnet restore ./Pilot.Tests/Test.Storage/Test.Storage.csproj

      - name: Build Test.Storage project
        run: dotnet build ./Pilot.Tests/Test.Storage/Test.Storage.csproj --configuration Release --no-restore

      - name: Create Google credentials file
        run: |
          echo "${{ secrets.GOOGLE_CREDENTIALS }}" > ./Pilot.Tests/Test.Storage/bin/Release/net9.0/pilot-credentials.json
        shell: bash

      - name: Set up GOOGLE_APPLICATION_CREDENTIALS environment variable
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/Pilot.Tests/Test.Storage/bin/Release/net9.0/pilot-credentials.json" >> $GITHUB_ENV

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Storage/Test.Storage.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  base:
    name: Base
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Base project
        run: dotnet restore ./Pilot.Tests/Test.Base/Test.Base.csproj

      - name: Build Base project
        run: dotnet build ./Pilot.Tests/Test.Base/Test.Base.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Base/Test.Base.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  capability:
    name: Storage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Test.Storage project
        run: dotnet restore ./Pilot.Tests/Test.Capability/Test.Capability.csproj

      - name: Build Test.Capability project
        run: dotnet build ./Pilot.Tests/Test.Capability/Test.Capability.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.Capability/Test.Capability.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  background_job:
    name: BackgroundJob
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - uses: actions/checkout@v4

      - name: Restore Test.BackgroundJob project
        run: dotnet restore ./Pilot.Tests/Test.BackgroundJob/Test.BackgroundJob.csproj

      - name: Build Test.BackgroundJob project
        run: dotnet build ./Pilot.Tests/Test.BackgroundJob/Test.BackgroundJob.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./Pilot.Tests/Test.BackgroundJob/Test.BackgroundJob.csproj --configuration Release --no-build

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-gateway
          path: '**/TestResults/*.trx'
          
  code_quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Build and analyze
        shell: pwsh
        run: dotnet build
#          ./.sonar/scanner/dotnet-sonarscanner begin /k:"example" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
#          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
#  CodeQuality:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#      pull-requests: write
#      checks: write
#    steps:
#      - name: Setup .NET
#        uses: actions/setup-dotnet@v3
#        with:
#          dotnet-version: '9.0.x'
#          
#      - uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
#          fetch-depth: 0  # a full history is required for pull request analysis
#      - name: 'Qodana Scan'
#        uses: JetBrains/qodana-action@v2024.1
#        env:
#          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}